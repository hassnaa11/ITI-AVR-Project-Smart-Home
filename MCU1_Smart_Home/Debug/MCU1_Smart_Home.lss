
MCU1_Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  00004b98  00004c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080020c  0080020c  00004dd8  2**0
                  ALLOC
  3 .stab         00004014  00000000  00000000  00004dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d5e  00000000  00000000  00008dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ab4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000af1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d530  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000fd0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000feec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000101f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010c0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_4>
      14:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__vector_5>
      18:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_6>
      1c:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__vector_7>
      20:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__vector_8>
      24:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__vector_9>
      28:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__vector_10>
      2c:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_13>
      38:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_14>
      3c:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <main>
      8a:	0c 94 ca 25 	jmp	0x4b94	; 0x4b94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 25 	jmp	0x4b26	; 0x4b26 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ee       	ldi	r26, 0xEA	; 234
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 25 	jmp	0x4b5e	; 0x4b5e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 25 	jmp	0x4b26	; 0x4b26 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ee       	ldi	r24, 0xEA	; 234
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 25 	jmp	0x4b5e	; 0x4b5e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a ee       	ldi	r22, 0xEA	; 234
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 b8 25 	jmp	0x4b70	; 0x4b70 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a3 25 	jmp	0x4b46	; 0x4b46 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 50       	subi	r30, 0x0E	; 14
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Global_Interrupt_Enable>:
#include "../../00-LIB/LBIT_math.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
     ef2:	af e5       	ldi	r26, 0x5F	; 95
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ef e5       	ldi	r30, 0x5F	; 95
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	8c 93       	st	X, r24
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
     f0e:	af e5       	ldi	r26, 0x5F	; 95
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ef e5       	ldi	r30, 0x5F	; 95
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 77       	andi	r24, 0x7F	; 127
     f1a:	8c 93       	st	X, r24
}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <UART_voidInit>:
volatile u8 Global_Var=0;
void (*Tx_pf)(void)=NULL;
void (*Rx_pf)(void)=NULL;
u8 Data=0;
void UART_voidInit(void)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Temp=0;
     f2c:	19 82       	std	Y+1, r1	; 0x01
/******   Enable Rx Interrupt (RXCIE)   *******/
SET_BIT(UCSRB,UCSRB_RXCIE);
     f2e:	aa e2       	ldi	r26, 0x2A	; 42
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ea e2       	ldi	r30, 0x2A	; 42
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	8c 93       	st	X, r24
/******   Enable UDRIE          *******/
SET_BIT(UCSRB,UCSRB_UDRIE);
     f3c:	aa e2       	ldi	r26, 0x2A	; 42
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ea e2       	ldi	r30, 0x2A	; 42
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	8c 93       	st	X, r24

/******   Select 8-BIT Data *********/
CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f4a:	aa e2       	ldi	r26, 0x2A	; 42
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ea e2       	ldi	r30, 0x2A	; 42
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8b 7f       	andi	r24, 0xFB	; 251
     f56:	8c 93       	st	X, r24
/*select UCSRC Register*/
SET_BIT(Local_Temp,UCSRC_URSEL);
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	80 68       	ori	r24, 0x80	; 128
     f5c:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ0);
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	82 60       	ori	r24, 0x02	; 2
     f62:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ1);
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	84 60       	ori	r24, 0x04	; 4
     f68:	89 83       	std	Y+1, r24	; 0x01
/******  Select UART Mode *********/
CLR_BIT(Local_Temp,UCSRC_UMSEL);//select  Asynchronous Mode
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	8f 7b       	andi	r24, 0xBF	; 191
     f6e:	89 83       	std	Y+1, r24	; 0x01
/******   Select Parity Mode *********/
CLR_BIT(Local_Temp,UCSRC_UPM0);//disable Parity
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(Local_Temp,UCSRC_UPM1);
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	8f 7d       	andi	r24, 0xDF	; 223
     f7a:	89 83       	std	Y+1, r24	; 0x01
/******   Select Stop bit *********/
CLR_BIT(Local_Temp,UCSRC_USBS);
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	89 83       	std	Y+1, r24	; 0x01

UCSRC=Local_Temp;
     f82:	e0 e4       	ldi	r30, 0x40	; 64
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	80 83       	st	Z, r24

/******   Select BuadRate *********/
UBRRL=BUAD_RATE;
     f8a:	e9 e2       	ldi	r30, 0x29	; 41
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	83 e3       	ldi	r24, 0x33	; 51
     f90:	80 83       	st	Z, r24
/******   Enable Rx *********/
SET_BIT(UCSRB,UCSRB_RXEN);
     f92:	aa e2       	ldi	r26, 0x2A	; 42
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ea e2       	ldi	r30, 0x2A	; 42
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 61       	ori	r24, 0x10	; 16
     f9e:	8c 93       	st	X, r24
/******   Enable Tx *********/
SET_BIT(UCSRB,UCSRB_TXEN);
     fa0:	aa e2       	ldi	r26, 0x2A	; 42
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ea e2       	ldi	r30, 0x2A	; 42
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	88 60       	ori	r24, 0x08	; 8
     fac:	8c 93       	st	X, r24
}
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <UART_voidSendData_Asynch>:
void UART_voidSendData_Asynch(u8 Copy_u8Data)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01
//Global_Var =Copy_u8Data;
UDR =Copy_u8Data;
     fc2:	ec e2       	ldi	r30, 0x2C	; 44
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	80 83       	st	Z, r24
}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <UART_u8ReceiveData>:
u8  UART_u8ReceiveData(void)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
//GET_BIT(UCSRA,UCSRA_RXC);
return UDR;
     fda:	ec e2       	ldi	r30, 0x2C	; 44
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <__vector_13>:


// USART, RXC
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	Rx_pf();
    1010:	e0 91 0f 02 	lds	r30, 0x020F
    1014:	f0 91 10 02 	lds	r31, 0x0210
    1018:	09 95       	icall
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__vector_14>:
// USART, UDRE
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	Tx_pf();
    106a:	e0 91 0d 02 	lds	r30, 0x020D
    106e:	f0 91 0e 02 	lds	r31, 0x020E
    1072:	09 95       	icall
	//UART_voidSendData_Asynch();
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__vector_15>:
//USART, TXC
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void){
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62

}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <UARTTX_vidSetISR>:
void UARTTX_vidSetISR(void (*p)(void))
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <UARTTX_vidSetISR+0x6>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	Tx_pf=p;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	90 93 0e 02 	sts	0x020E, r25
    10d0:	80 93 0d 02 	sts	0x020D, r24
	//Data=value;
	}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <UARTRX_vidSetISR>:
void UARTRX_vidSetISR(void (*p)(void))
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <UARTRX_vidSetISR+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	Rx_pf=p;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	90 93 10 02 	sts	0x0210, r25
    10f4:	80 93 0f 02 	sts	0x020F, r24
	//Data=value;
	}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <disable_tx>:

void disable_tx(void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    110a:	aa e2       	ldi	r26, 0x2A	; 42
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ea e2       	ldi	r30, 0x2A	; 42
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8f 7d       	andi	r24, 0xDF	; 223
    1116:	8c 93       	st	X, r24

	}
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <enable_tx>:
void enable_tx(void)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
    1126:	aa e2       	ldi	r26, 0x2A	; 42
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ea e2       	ldi	r30, 0x2A	; 42
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	80 62       	ori	r24, 0x20	; 32
    1132:	8c 93       	st	X, r24

	}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <TIM_voidIni>:

#include "TIM_private.h"
#include "TIM_config.h"
#include "TIM_interface.h"

void TIM_voidIni(TIM_ID copy_TIM_ID){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <TIM_voidIni+0x6>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_ID){
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3b 83       	std	Y+3, r19	; 0x03
    1150:	2a 83       	std	Y+2, r18	; 0x02
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	69 f1       	breq	.+90     	; 0x11b6 <TIM_voidIni+0x7c>
    115c:	2a 81       	ldd	r18, Y+2	; 0x02
    115e:	3b 81       	ldd	r19, Y+3	; 0x03
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <TIM_voidIni+0x2e>
    1166:	69 c0       	rjmp	.+210    	; 0x123a <TIM_voidIni+0x100>
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	09 f0       	breq	.+2      	; 0x1172 <TIM_voidIni+0x38>
    1170:	85 c0       	rjmp	.+266    	; 0x127c <TIM_voidIni+0x142>
						SET_BIT(TIMS->TCCR0,COM01);
					#else
						#error "OC0_MODE Wrong define"
					#endif
			#elif(TIM0_MODE== TIM0_TIM2_FAST_PWM)
					SET_BIT(TIMS->TCCR0,WGM00);
    1172:	a3 e4       	ldi	r26, 0x43	; 67
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e3 e4       	ldi	r30, 0x43	; 67
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 89       	ldd	r24, Z+16	; 0x10
    117c:	80 64       	ori	r24, 0x40	; 64
    117e:	50 96       	adiw	r26, 0x10	; 16
    1180:	8c 93       	st	X, r24
					SET_BIT(TIMS->TCCR0,WGM01);
    1182:	a3 e4       	ldi	r26, 0x43	; 67
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e4       	ldi	r30, 0x43	; 67
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 89       	ldd	r24, Z+16	; 0x10
    118c:	88 60       	ori	r24, 0x08	; 8
    118e:	50 96       	adiw	r26, 0x10	; 16
    1190:	8c 93       	st	X, r24
					#if(OC0_MODE==OC_DISCONNECTED)
						CLR_BIT(TIMS->TCCR0,COM00);
						CLR_BIT(TIMS->TCCR0,COM01);
					#elif(OC0_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)
						CLR_BIT(TIMS->TCCR0,COM00);
    1192:	a3 e4       	ldi	r26, 0x43	; 67
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e4       	ldi	r30, 0x43	; 67
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 89       	ldd	r24, Z+16	; 0x10
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	50 96       	adiw	r26, 0x10	; 16
    11a0:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,COM01);
    11a2:	a3 e4       	ldi	r26, 0x43	; 67
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e3 e4       	ldi	r30, 0x43	; 67
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 89       	ldd	r24, Z+16	; 0x10
    11ac:	80 62       	ori	r24, 0x20	; 32
    11ae:	50 96       	adiw	r26, 0x10	; 16
    11b0:	8c 93       	st	X, r24
    11b2:	50 97       	sbiw	r26, 0x10	; 16
    11b4:	63 c0       	rjmp	.+198    	; 0x127c <TIM_voidIni+0x142>
					SET_BIT(TIMS->TCCR1A,COM1B1);
				#else
					#error "OC1B_MODE Wrong define"
				#endif
			#elif(TIM1_MODE== TIM1_FAST_TOP_ICR1)
				CLR_BIT(TIMS->TCCR1A,WGM10);
    11b6:	a3 e4       	ldi	r26, 0x43	; 67
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e4       	ldi	r30, 0x43	; 67
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	84 85       	ldd	r24, Z+12	; 0x0c
    11c0:	8e 7f       	andi	r24, 0xFE	; 254
    11c2:	1c 96       	adiw	r26, 0x0c	; 12
    11c4:	8c 93       	st	X, r24
				SET_BIT(TIMS->TCCR1A,WGM11);
    11c6:	a3 e4       	ldi	r26, 0x43	; 67
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e4       	ldi	r30, 0x43	; 67
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	84 85       	ldd	r24, Z+12	; 0x0c
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	1c 96       	adiw	r26, 0x0c	; 12
    11d4:	8c 93       	st	X, r24
				SET_BIT(TIMS->TCCR1B,WGM12);
    11d6:	a3 e4       	ldi	r26, 0x43	; 67
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e3 e4       	ldi	r30, 0x43	; 67
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	83 85       	ldd	r24, Z+11	; 0x0b
    11e0:	88 60       	ori	r24, 0x08	; 8
    11e2:	1b 96       	adiw	r26, 0x0b	; 11
    11e4:	8c 93       	st	X, r24
				SET_BIT(TIMS->TCCR1B,WGM13);
    11e6:	a3 e4       	ldi	r26, 0x43	; 67
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e3 e4       	ldi	r30, 0x43	; 67
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	83 85       	ldd	r24, Z+11	; 0x0b
    11f0:	80 61       	ori	r24, 0x10	; 16
    11f2:	1b 96       	adiw	r26, 0x0b	; 11
    11f4:	8c 93       	st	X, r24
				#if(OC1A_MODE==OC_DISCONNECTED)
					CLR_BIT(TIMS->TCCR1A,COM1A0);
					CLR_BIT(TIMS->TCCR1A,COM1A1);
				#elif(OC1A_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)
					CLR_BIT(TIMS->TCCR1A,COM1A0);
    11f6:	a3 e4       	ldi	r26, 0x43	; 67
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e3 e4       	ldi	r30, 0x43	; 67
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	84 85       	ldd	r24, Z+12	; 0x0c
    1200:	8f 7b       	andi	r24, 0xBF	; 191
    1202:	1c 96       	adiw	r26, 0x0c	; 12
    1204:	8c 93       	st	X, r24
					SET_BIT(TIMS->TCCR1A,COM1A1);
    1206:	a3 e4       	ldi	r26, 0x43	; 67
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e3 e4       	ldi	r30, 0x43	; 67
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	84 85       	ldd	r24, Z+12	; 0x0c
    1210:	80 68       	ori	r24, 0x80	; 128
    1212:	1c 96       	adiw	r26, 0x0c	; 12
    1214:	8c 93       	st	X, r24
					SET_BIT(TIMS->TCCR1A,COM1A1);
				#else
					#error "OC1A_MODE Wrong define"
				#endif
				#if(OC1B_MODE==OC_DISCONNECTED)
					CLR_BIT(TIMS->TCCR1A,COM1B0);
    1216:	a3 e4       	ldi	r26, 0x43	; 67
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e3 e4       	ldi	r30, 0x43	; 67
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	84 85       	ldd	r24, Z+12	; 0x0c
    1220:	8f 7e       	andi	r24, 0xEF	; 239
    1222:	1c 96       	adiw	r26, 0x0c	; 12
    1224:	8c 93       	st	X, r24
					CLR_BIT(TIMS->TCCR1A,COM1B1);
    1226:	a3 e4       	ldi	r26, 0x43	; 67
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e3 e4       	ldi	r30, 0x43	; 67
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	84 85       	ldd	r24, Z+12	; 0x0c
    1230:	8f 7d       	andi	r24, 0xDF	; 223
    1232:	1c 96       	adiw	r26, 0x0c	; 12
    1234:	8c 93       	st	X, r24
    1236:	1c 97       	sbiw	r26, 0x0c	; 12
    1238:	21 c0       	rjmp	.+66     	; 0x127c <TIM_voidIni+0x142>
						SET_BIT(TIMS->TCCR2,COM21);
					#else
						#error "OC2_MODE Wrong define"
					#endif
			#elif(TIM2_MODE== TIM0_TIM2_PWM_PHASECORRECT)
					SET_BIT(TIMS->TCCR2,WGM20);
    123a:	a3 e4       	ldi	r26, 0x43	; 67
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e4       	ldi	r30, 0x43	; 67
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	80 64       	ori	r24, 0x40	; 64
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	8c 93       	st	X, r24
					CLR_BIT(TIMS->TCCR2,WGM21);
    124a:	a3 e4       	ldi	r26, 0x43	; 67
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e3 e4       	ldi	r30, 0x43	; 67
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	87 7f       	andi	r24, 0xF7	; 247
    1256:	12 96       	adiw	r26, 0x02	; 2
    1258:	8c 93       	st	X, r24
					#if(OC2_MODE==OC_DISCONNECTED)
						CLR_BIT(TIMS->TCCR2,COM20);
						CLR_BIT(TIMS->TCCR2,COM21);
					#elif(OC2_MODE==OC_CLEAR_UP_SET_DOWN)
						CLR_BIT(TIMS->TCCR2,COM20);
    125a:	a3 e4       	ldi	r26, 0x43	; 67
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e3 e4       	ldi	r30, 0x43	; 67
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	8f 7e       	andi	r24, 0xEF	; 239
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,COM21);
    126a:	a3 e4       	ldi	r26, 0x43	; 67
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e3 e4       	ldi	r30, 0x43	; 67
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	80 62       	ori	r24, 0x20	; 32
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	8c 93       	st	X, r24
    127a:	12 97       	sbiw	r26, 0x02	; 2
			default:

				break;

		}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <TIM_voidStart>:
void TIM_voidStart(TIM_ID copy_TIM_ID,TIMS_CLOCK_T copy_TIMS_CLOCK){
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	2a 97       	sbiw	r28, 0x0a	; 10
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIM_ID){
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3a 87       	std	Y+10, r19	; 0x0a
    12a8:	29 87       	std	Y+9, r18	; 0x09
    12aa:	89 85       	ldd	r24, Y+9	; 0x09
    12ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <TIM_voidStart+0x2e>
    12b4:	1b c1       	rjmp	.+566    	; 0x14ec <TIM_voidStart+0x264>
    12b6:	29 85       	ldd	r18, Y+9	; 0x09
    12b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <TIM_voidStart+0x3a>
    12c0:	25 c2       	rjmp	.+1098   	; 0x170c <TIM_voidStart+0x484>
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	09 f0       	breq	.+2      	; 0x12cc <TIM_voidStart+0x44>
    12ca:	29 c3       	rjmp	.+1618   	; 0x191e <TIM_voidStart+0x696>
			case (TIM0):
				switch(copy_TIMS_CLOCK){
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	38 87       	std	Y+8, r19	; 0x08
    12d4:	2f 83       	std	Y+7, r18	; 0x07
    12d6:	8f 81       	ldd	r24, Y+7	; 0x07
    12d8:	98 85       	ldd	r25, Y+8	; 0x08
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <TIM_voidStart+0x5a>
    12e0:	83 c0       	rjmp	.+262    	; 0x13e8 <TIM_voidStart+0x160>
    12e2:	2f 81       	ldd	r18, Y+7	; 0x07
    12e4:	38 85       	ldd	r19, Y+8	; 0x08
    12e6:	25 30       	cpi	r18, 0x05	; 5
    12e8:	31 05       	cpc	r19, r1
    12ea:	8c f4       	brge	.+34     	; 0x130e <TIM_voidStart+0x86>
    12ec:	8f 81       	ldd	r24, Y+7	; 0x07
    12ee:	98 85       	ldd	r25, Y+8	; 0x08
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <TIM_voidStart+0x70>
    12f6:	44 c0       	rjmp	.+136    	; 0x1380 <TIM_voidStart+0xf8>
    12f8:	2f 81       	ldd	r18, Y+7	; 0x07
    12fa:	38 85       	ldd	r19, Y+8	; 0x08
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <TIM_voidStart+0x7c>
    1302:	58 c0       	rjmp	.+176    	; 0x13b4 <TIM_voidStart+0x12c>
    1304:	8f 81       	ldd	r24, Y+7	; 0x07
    1306:	98 85       	ldd	r25, Y+8	; 0x08
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	01 f1       	breq	.+64     	; 0x134c <TIM_voidStart+0xc4>
    130c:	08 c3       	rjmp	.+1552   	; 0x191e <TIM_voidStart+0x696>
    130e:	2f 81       	ldd	r18, Y+7	; 0x07
    1310:	38 85       	ldd	r19, Y+8	; 0x08
    1312:	27 30       	cpi	r18, 0x07	; 7
    1314:	31 05       	cpc	r19, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <TIM_voidStart+0x92>
    1318:	9b c0       	rjmp	.+310    	; 0x1450 <TIM_voidStart+0x1c8>
    131a:	8f 81       	ldd	r24, Y+7	; 0x07
    131c:	98 85       	ldd	r25, Y+8	; 0x08
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	91 05       	cpc	r25, r1
    1322:	3c f4       	brge	.+14     	; 0x1332 <TIM_voidStart+0xaa>
    1324:	2f 81       	ldd	r18, Y+7	; 0x07
    1326:	38 85       	ldd	r19, Y+8	; 0x08
    1328:	26 30       	cpi	r18, 0x06	; 6
    132a:	31 05       	cpc	r19, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <TIM_voidStart+0xa8>
    132e:	76 c0       	rjmp	.+236    	; 0x141c <TIM_voidStart+0x194>
    1330:	f6 c2       	rjmp	.+1516   	; 0x191e <TIM_voidStart+0x696>
    1332:	8f 81       	ldd	r24, Y+7	; 0x07
    1334:	98 85       	ldd	r25, Y+8	; 0x08
    1336:	88 30       	cpi	r24, 0x08	; 8
    1338:	91 05       	cpc	r25, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <TIM_voidStart+0xb6>
    133c:	a3 c0       	rjmp	.+326    	; 0x1484 <TIM_voidStart+0x1fc>
    133e:	2f 81       	ldd	r18, Y+7	; 0x07
    1340:	38 85       	ldd	r19, Y+8	; 0x08
    1342:	29 30       	cpi	r18, 0x09	; 9
    1344:	31 05       	cpc	r19, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <TIM_voidStart+0xc2>
    1348:	b7 c0       	rjmp	.+366    	; 0x14b8 <TIM_voidStart+0x230>
    134a:	e9 c2       	rjmp	.+1490   	; 0x191e <TIM_voidStart+0x696>
					case TIMS_STOP:
						CLR_BIT(TIMS->TCCR0,CS00);
    134c:	a3 e4       	ldi	r26, 0x43	; 67
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e3 e4       	ldi	r30, 0x43	; 67
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 89       	ldd	r24, Z+16	; 0x10
    1356:	8e 7f       	andi	r24, 0xFE	; 254
    1358:	50 96       	adiw	r26, 0x10	; 16
    135a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    135c:	a3 e4       	ldi	r26, 0x43	; 67
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e3 e4       	ldi	r30, 0x43	; 67
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 89       	ldd	r24, Z+16	; 0x10
    1366:	8d 7f       	andi	r24, 0xFD	; 253
    1368:	50 96       	adiw	r26, 0x10	; 16
    136a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    136c:	a3 e4       	ldi	r26, 0x43	; 67
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e3 e4       	ldi	r30, 0x43	; 67
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 89       	ldd	r24, Z+16	; 0x10
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	50 96       	adiw	r26, 0x10	; 16
    137a:	8c 93       	st	X, r24
    137c:	50 97       	sbiw	r26, 0x10	; 16
    137e:	cf c2       	rjmp	.+1438   	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1:
						SET_BIT(TIMS->TCCR0,CS00);
    1380:	a3 e4       	ldi	r26, 0x43	; 67
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e3 e4       	ldi	r30, 0x43	; 67
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 89       	ldd	r24, Z+16	; 0x10
    138a:	81 60       	ori	r24, 0x01	; 1
    138c:	50 96       	adiw	r26, 0x10	; 16
    138e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    1390:	a3 e4       	ldi	r26, 0x43	; 67
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e3 e4       	ldi	r30, 0x43	; 67
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 89       	ldd	r24, Z+16	; 0x10
    139a:	8d 7f       	andi	r24, 0xFD	; 253
    139c:	50 96       	adiw	r26, 0x10	; 16
    139e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    13a0:	a3 e4       	ldi	r26, 0x43	; 67
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e3 e4       	ldi	r30, 0x43	; 67
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 89       	ldd	r24, Z+16	; 0x10
    13aa:	8b 7f       	andi	r24, 0xFB	; 251
    13ac:	50 96       	adiw	r26, 0x10	; 16
    13ae:	8c 93       	st	X, r24
    13b0:	50 97       	sbiw	r26, 0x10	; 16
    13b2:	b5 c2       	rjmp	.+1386   	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_8:
						CLR_BIT(TIMS->TCCR0,CS00);
    13b4:	a3 e4       	ldi	r26, 0x43	; 67
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e3 e4       	ldi	r30, 0x43	; 67
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 89       	ldd	r24, Z+16	; 0x10
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	50 96       	adiw	r26, 0x10	; 16
    13c2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    13c4:	a3 e4       	ldi	r26, 0x43	; 67
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e3 e4       	ldi	r30, 0x43	; 67
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 89       	ldd	r24, Z+16	; 0x10
    13ce:	82 60       	ori	r24, 0x02	; 2
    13d0:	50 96       	adiw	r26, 0x10	; 16
    13d2:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    13d4:	a3 e4       	ldi	r26, 0x43	; 67
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e3 e4       	ldi	r30, 0x43	; 67
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 89       	ldd	r24, Z+16	; 0x10
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	50 96       	adiw	r26, 0x10	; 16
    13e2:	8c 93       	st	X, r24
    13e4:	50 97       	sbiw	r26, 0x10	; 16
    13e6:	9b c2       	rjmp	.+1334   	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_64:
						SET_BIT(TIMS->TCCR0,CS00);
    13e8:	a3 e4       	ldi	r26, 0x43	; 67
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e3 e4       	ldi	r30, 0x43	; 67
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 89       	ldd	r24, Z+16	; 0x10
    13f2:	81 60       	ori	r24, 0x01	; 1
    13f4:	50 96       	adiw	r26, 0x10	; 16
    13f6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    13f8:	a3 e4       	ldi	r26, 0x43	; 67
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e3 e4       	ldi	r30, 0x43	; 67
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 89       	ldd	r24, Z+16	; 0x10
    1402:	82 60       	ori	r24, 0x02	; 2
    1404:	50 96       	adiw	r26, 0x10	; 16
    1406:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    1408:	a3 e4       	ldi	r26, 0x43	; 67
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e3 e4       	ldi	r30, 0x43	; 67
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 89       	ldd	r24, Z+16	; 0x10
    1412:	8b 7f       	andi	r24, 0xFB	; 251
    1414:	50 96       	adiw	r26, 0x10	; 16
    1416:	8c 93       	st	X, r24
    1418:	50 97       	sbiw	r26, 0x10	; 16
    141a:	81 c2       	rjmp	.+1282   	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_256:
						CLR_BIT(TIMS->TCCR0,CS00);
    141c:	a3 e4       	ldi	r26, 0x43	; 67
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e3 e4       	ldi	r30, 0x43	; 67
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 89       	ldd	r24, Z+16	; 0x10
    1426:	8e 7f       	andi	r24, 0xFE	; 254
    1428:	50 96       	adiw	r26, 0x10	; 16
    142a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    142c:	a3 e4       	ldi	r26, 0x43	; 67
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e3 e4       	ldi	r30, 0x43	; 67
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 89       	ldd	r24, Z+16	; 0x10
    1436:	8d 7f       	andi	r24, 0xFD	; 253
    1438:	50 96       	adiw	r26, 0x10	; 16
    143a:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    143c:	a3 e4       	ldi	r26, 0x43	; 67
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e3 e4       	ldi	r30, 0x43	; 67
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 89       	ldd	r24, Z+16	; 0x10
    1446:	84 60       	ori	r24, 0x04	; 4
    1448:	50 96       	adiw	r26, 0x10	; 16
    144a:	8c 93       	st	X, r24
    144c:	50 97       	sbiw	r26, 0x10	; 16
    144e:	67 c2       	rjmp	.+1230   	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1024:
						SET_BIT(TIMS->TCCR0,CS00);
    1450:	a3 e4       	ldi	r26, 0x43	; 67
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e3 e4       	ldi	r30, 0x43	; 67
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 89       	ldd	r24, Z+16	; 0x10
    145a:	81 60       	ori	r24, 0x01	; 1
    145c:	50 96       	adiw	r26, 0x10	; 16
    145e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    1460:	a3 e4       	ldi	r26, 0x43	; 67
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e3 e4       	ldi	r30, 0x43	; 67
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 89       	ldd	r24, Z+16	; 0x10
    146a:	8d 7f       	andi	r24, 0xFD	; 253
    146c:	50 96       	adiw	r26, 0x10	; 16
    146e:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    1470:	a3 e4       	ldi	r26, 0x43	; 67
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e3 e4       	ldi	r30, 0x43	; 67
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 89       	ldd	r24, Z+16	; 0x10
    147a:	84 60       	ori	r24, 0x04	; 4
    147c:	50 96       	adiw	r26, 0x10	; 16
    147e:	8c 93       	st	X, r24
    1480:	50 97       	sbiw	r26, 0x10	; 16
    1482:	4d c2       	rjmp	.+1178   	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_FALLINGEVENT:
						CLR_BIT(TIMS->TCCR0,CS00);
    1484:	a3 e4       	ldi	r26, 0x43	; 67
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e3 e4       	ldi	r30, 0x43	; 67
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 89       	ldd	r24, Z+16	; 0x10
    148e:	8e 7f       	andi	r24, 0xFE	; 254
    1490:	50 96       	adiw	r26, 0x10	; 16
    1492:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    1494:	a3 e4       	ldi	r26, 0x43	; 67
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e3 e4       	ldi	r30, 0x43	; 67
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 89       	ldd	r24, Z+16	; 0x10
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	50 96       	adiw	r26, 0x10	; 16
    14a2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    14a4:	a3 e4       	ldi	r26, 0x43	; 67
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e3 e4       	ldi	r30, 0x43	; 67
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 89       	ldd	r24, Z+16	; 0x10
    14ae:	84 60       	ori	r24, 0x04	; 4
    14b0:	50 96       	adiw	r26, 0x10	; 16
    14b2:	8c 93       	st	X, r24
    14b4:	50 97       	sbiw	r26, 0x10	; 16
    14b6:	33 c2       	rjmp	.+1126   	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_RISINGEVENT:
						SET_BIT(TIMS->TCCR0,CS00);
    14b8:	a3 e4       	ldi	r26, 0x43	; 67
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e3 e4       	ldi	r30, 0x43	; 67
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 89       	ldd	r24, Z+16	; 0x10
    14c2:	81 60       	ori	r24, 0x01	; 1
    14c4:	50 96       	adiw	r26, 0x10	; 16
    14c6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    14c8:	a3 e4       	ldi	r26, 0x43	; 67
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e3 e4       	ldi	r30, 0x43	; 67
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 89       	ldd	r24, Z+16	; 0x10
    14d2:	82 60       	ori	r24, 0x02	; 2
    14d4:	50 96       	adiw	r26, 0x10	; 16
    14d6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    14d8:	a3 e4       	ldi	r26, 0x43	; 67
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e3 e4       	ldi	r30, 0x43	; 67
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 89       	ldd	r24, Z+16	; 0x10
    14e2:	84 60       	ori	r24, 0x04	; 4
    14e4:	50 96       	adiw	r26, 0x10	; 16
    14e6:	8c 93       	st	X, r24
    14e8:	50 97       	sbiw	r26, 0x10	; 16
    14ea:	19 c2       	rjmp	.+1074   	; 0x191e <TIM_voidStart+0x696>
					default:
						break;
				}
				break;
			case (TIM1):
				switch(copy_TIMS_CLOCK){
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <TIM_voidStart+0x27a>
    1500:	83 c0       	rjmp	.+262    	; 0x1608 <TIM_voidStart+0x380>
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	25 30       	cpi	r18, 0x05	; 5
    1508:	31 05       	cpc	r19, r1
    150a:	8c f4       	brge	.+34     	; 0x152e <TIM_voidStart+0x2a6>
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <TIM_voidStart+0x290>
    1516:	44 c0       	rjmp	.+136    	; 0x15a0 <TIM_voidStart+0x318>
    1518:	2d 81       	ldd	r18, Y+5	; 0x05
    151a:	3e 81       	ldd	r19, Y+6	; 0x06
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <TIM_voidStart+0x29c>
    1522:	58 c0       	rjmp	.+176    	; 0x15d4 <TIM_voidStart+0x34c>
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	01 f1       	breq	.+64     	; 0x156c <TIM_voidStart+0x2e4>
    152c:	f8 c1       	rjmp	.+1008   	; 0x191e <TIM_voidStart+0x696>
    152e:	2d 81       	ldd	r18, Y+5	; 0x05
    1530:	3e 81       	ldd	r19, Y+6	; 0x06
    1532:	27 30       	cpi	r18, 0x07	; 7
    1534:	31 05       	cpc	r19, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <TIM_voidStart+0x2b2>
    1538:	9b c0       	rjmp	.+310    	; 0x1670 <TIM_voidStart+0x3e8>
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	91 05       	cpc	r25, r1
    1542:	3c f4       	brge	.+14     	; 0x1552 <TIM_voidStart+0x2ca>
    1544:	2d 81       	ldd	r18, Y+5	; 0x05
    1546:	3e 81       	ldd	r19, Y+6	; 0x06
    1548:	26 30       	cpi	r18, 0x06	; 6
    154a:	31 05       	cpc	r19, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <TIM_voidStart+0x2c8>
    154e:	76 c0       	rjmp	.+236    	; 0x163c <TIM_voidStart+0x3b4>
    1550:	e6 c1       	rjmp	.+972    	; 0x191e <TIM_voidStart+0x696>
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	88 30       	cpi	r24, 0x08	; 8
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <TIM_voidStart+0x2d6>
    155c:	a3 c0       	rjmp	.+326    	; 0x16a4 <TIM_voidStart+0x41c>
    155e:	2d 81       	ldd	r18, Y+5	; 0x05
    1560:	3e 81       	ldd	r19, Y+6	; 0x06
    1562:	29 30       	cpi	r18, 0x09	; 9
    1564:	31 05       	cpc	r19, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <TIM_voidStart+0x2e2>
    1568:	b7 c0       	rjmp	.+366    	; 0x16d8 <TIM_voidStart+0x450>
    156a:	d9 c1       	rjmp	.+946    	; 0x191e <TIM_voidStart+0x696>
					case TIMS_STOP:
						CLR_BIT(TIMS->TCCR1B,CS10);
    156c:	a3 e4       	ldi	r26, 0x43	; 67
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e3 e4       	ldi	r30, 0x43	; 67
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	83 85       	ldd	r24, Z+11	; 0x0b
    1576:	8e 7f       	andi	r24, 0xFE	; 254
    1578:	1b 96       	adiw	r26, 0x0b	; 11
    157a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    157c:	a3 e4       	ldi	r26, 0x43	; 67
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e3 e4       	ldi	r30, 0x43	; 67
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	83 85       	ldd	r24, Z+11	; 0x0b
    1586:	8d 7f       	andi	r24, 0xFD	; 253
    1588:	1b 96       	adiw	r26, 0x0b	; 11
    158a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    158c:	a3 e4       	ldi	r26, 0x43	; 67
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e3 e4       	ldi	r30, 0x43	; 67
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	83 85       	ldd	r24, Z+11	; 0x0b
    1596:	8b 7f       	andi	r24, 0xFB	; 251
    1598:	1b 96       	adiw	r26, 0x0b	; 11
    159a:	8c 93       	st	X, r24
    159c:	1b 97       	sbiw	r26, 0x0b	; 11
    159e:	bf c1       	rjmp	.+894    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1:
						SET_BIT(TIMS->TCCR1B,CS10);
    15a0:	a3 e4       	ldi	r26, 0x43	; 67
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e3 e4       	ldi	r30, 0x43	; 67
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	83 85       	ldd	r24, Z+11	; 0x0b
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	1b 96       	adiw	r26, 0x0b	; 11
    15ae:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    15b0:	a3 e4       	ldi	r26, 0x43	; 67
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e3 e4       	ldi	r30, 0x43	; 67
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	83 85       	ldd	r24, Z+11	; 0x0b
    15ba:	8d 7f       	andi	r24, 0xFD	; 253
    15bc:	1b 96       	adiw	r26, 0x0b	; 11
    15be:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    15c0:	a3 e4       	ldi	r26, 0x43	; 67
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e3 e4       	ldi	r30, 0x43	; 67
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	83 85       	ldd	r24, Z+11	; 0x0b
    15ca:	8b 7f       	andi	r24, 0xFB	; 251
    15cc:	1b 96       	adiw	r26, 0x0b	; 11
    15ce:	8c 93       	st	X, r24
    15d0:	1b 97       	sbiw	r26, 0x0b	; 11
    15d2:	a5 c1       	rjmp	.+842    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_8:
						CLR_BIT(TIMS->TCCR1B,CS10);
    15d4:	a3 e4       	ldi	r26, 0x43	; 67
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e3 e4       	ldi	r30, 0x43	; 67
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	83 85       	ldd	r24, Z+11	; 0x0b
    15de:	8e 7f       	andi	r24, 0xFE	; 254
    15e0:	1b 96       	adiw	r26, 0x0b	; 11
    15e2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    15e4:	a3 e4       	ldi	r26, 0x43	; 67
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e3 e4       	ldi	r30, 0x43	; 67
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	83 85       	ldd	r24, Z+11	; 0x0b
    15ee:	82 60       	ori	r24, 0x02	; 2
    15f0:	1b 96       	adiw	r26, 0x0b	; 11
    15f2:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    15f4:	a3 e4       	ldi	r26, 0x43	; 67
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e3 e4       	ldi	r30, 0x43	; 67
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	83 85       	ldd	r24, Z+11	; 0x0b
    15fe:	8b 7f       	andi	r24, 0xFB	; 251
    1600:	1b 96       	adiw	r26, 0x0b	; 11
    1602:	8c 93       	st	X, r24
    1604:	1b 97       	sbiw	r26, 0x0b	; 11
    1606:	8b c1       	rjmp	.+790    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_64:
						SET_BIT(TIMS->TCCR1B,CS10);
    1608:	a3 e4       	ldi	r26, 0x43	; 67
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e3 e4       	ldi	r30, 0x43	; 67
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	83 85       	ldd	r24, Z+11	; 0x0b
    1612:	81 60       	ori	r24, 0x01	; 1
    1614:	1b 96       	adiw	r26, 0x0b	; 11
    1616:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    1618:	a3 e4       	ldi	r26, 0x43	; 67
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e3 e4       	ldi	r30, 0x43	; 67
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	83 85       	ldd	r24, Z+11	; 0x0b
    1622:	82 60       	ori	r24, 0x02	; 2
    1624:	1b 96       	adiw	r26, 0x0b	; 11
    1626:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    1628:	a3 e4       	ldi	r26, 0x43	; 67
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e3 e4       	ldi	r30, 0x43	; 67
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	83 85       	ldd	r24, Z+11	; 0x0b
    1632:	8b 7f       	andi	r24, 0xFB	; 251
    1634:	1b 96       	adiw	r26, 0x0b	; 11
    1636:	8c 93       	st	X, r24
    1638:	1b 97       	sbiw	r26, 0x0b	; 11
    163a:	71 c1       	rjmp	.+738    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_256:
						CLR_BIT(TIMS->TCCR1B,CS10);
    163c:	a3 e4       	ldi	r26, 0x43	; 67
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e3 e4       	ldi	r30, 0x43	; 67
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	83 85       	ldd	r24, Z+11	; 0x0b
    1646:	8e 7f       	andi	r24, 0xFE	; 254
    1648:	1b 96       	adiw	r26, 0x0b	; 11
    164a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    164c:	a3 e4       	ldi	r26, 0x43	; 67
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e3 e4       	ldi	r30, 0x43	; 67
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	83 85       	ldd	r24, Z+11	; 0x0b
    1656:	8d 7f       	andi	r24, 0xFD	; 253
    1658:	1b 96       	adiw	r26, 0x0b	; 11
    165a:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    165c:	a3 e4       	ldi	r26, 0x43	; 67
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e3 e4       	ldi	r30, 0x43	; 67
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	83 85       	ldd	r24, Z+11	; 0x0b
    1666:	84 60       	ori	r24, 0x04	; 4
    1668:	1b 96       	adiw	r26, 0x0b	; 11
    166a:	8c 93       	st	X, r24
    166c:	1b 97       	sbiw	r26, 0x0b	; 11
    166e:	57 c1       	rjmp	.+686    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1024:
						SET_BIT(TIMS->TCCR1B,CS10);
    1670:	a3 e4       	ldi	r26, 0x43	; 67
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e3 e4       	ldi	r30, 0x43	; 67
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	83 85       	ldd	r24, Z+11	; 0x0b
    167a:	81 60       	ori	r24, 0x01	; 1
    167c:	1b 96       	adiw	r26, 0x0b	; 11
    167e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    1680:	a3 e4       	ldi	r26, 0x43	; 67
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e3 e4       	ldi	r30, 0x43	; 67
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	83 85       	ldd	r24, Z+11	; 0x0b
    168a:	8d 7f       	andi	r24, 0xFD	; 253
    168c:	1b 96       	adiw	r26, 0x0b	; 11
    168e:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    1690:	a3 e4       	ldi	r26, 0x43	; 67
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e3 e4       	ldi	r30, 0x43	; 67
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	83 85       	ldd	r24, Z+11	; 0x0b
    169a:	84 60       	ori	r24, 0x04	; 4
    169c:	1b 96       	adiw	r26, 0x0b	; 11
    169e:	8c 93       	st	X, r24
    16a0:	1b 97       	sbiw	r26, 0x0b	; 11
    16a2:	3d c1       	rjmp	.+634    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_FALLINGEVENT:
						CLR_BIT(TIMS->TCCR1B,CS10);
    16a4:	a3 e4       	ldi	r26, 0x43	; 67
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e3 e4       	ldi	r30, 0x43	; 67
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	83 85       	ldd	r24, Z+11	; 0x0b
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	1b 96       	adiw	r26, 0x0b	; 11
    16b2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    16b4:	a3 e4       	ldi	r26, 0x43	; 67
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e3 e4       	ldi	r30, 0x43	; 67
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	83 85       	ldd	r24, Z+11	; 0x0b
    16be:	82 60       	ori	r24, 0x02	; 2
    16c0:	1b 96       	adiw	r26, 0x0b	; 11
    16c2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    16c4:	a3 e4       	ldi	r26, 0x43	; 67
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e3 e4       	ldi	r30, 0x43	; 67
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	83 85       	ldd	r24, Z+11	; 0x0b
    16ce:	84 60       	ori	r24, 0x04	; 4
    16d0:	1b 96       	adiw	r26, 0x0b	; 11
    16d2:	8c 93       	st	X, r24
    16d4:	1b 97       	sbiw	r26, 0x0b	; 11
    16d6:	23 c1       	rjmp	.+582    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_RISINGEVENT:
						SET_BIT(TIMS->TCCR1B,CS10);
    16d8:	a3 e4       	ldi	r26, 0x43	; 67
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e3 e4       	ldi	r30, 0x43	; 67
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	83 85       	ldd	r24, Z+11	; 0x0b
    16e2:	81 60       	ori	r24, 0x01	; 1
    16e4:	1b 96       	adiw	r26, 0x0b	; 11
    16e6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    16e8:	a3 e4       	ldi	r26, 0x43	; 67
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e3 e4       	ldi	r30, 0x43	; 67
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	83 85       	ldd	r24, Z+11	; 0x0b
    16f2:	82 60       	ori	r24, 0x02	; 2
    16f4:	1b 96       	adiw	r26, 0x0b	; 11
    16f6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    16f8:	a3 e4       	ldi	r26, 0x43	; 67
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e3 e4       	ldi	r30, 0x43	; 67
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	83 85       	ldd	r24, Z+11	; 0x0b
    1702:	84 60       	ori	r24, 0x04	; 4
    1704:	1b 96       	adiw	r26, 0x0b	; 11
    1706:	8c 93       	st	X, r24
    1708:	1b 97       	sbiw	r26, 0x0b	; 11
    170a:	09 c1       	rjmp	.+530    	; 0x191e <TIM_voidStart+0x696>
					default:
						break;
						}
				break;
			case (TIM2):
				switch(copy_TIMS_CLOCK){
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3c 83       	std	Y+4, r19	; 0x04
    1714:	2b 83       	std	Y+3, r18	; 0x03
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <TIM_voidStart+0x49a>
    1720:	7d c0       	rjmp	.+250    	; 0x181c <TIM_voidStart+0x594>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	24 30       	cpi	r18, 0x04	; 4
    1728:	31 05       	cpc	r19, r1
    172a:	8c f4       	brge	.+34     	; 0x174e <TIM_voidStart+0x4c6>
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <TIM_voidStart+0x4b0>
    1736:	3e c0       	rjmp	.+124    	; 0x17b4 <TIM_voidStart+0x52c>
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	0c f0       	brlt	.+2      	; 0x1744 <TIM_voidStart+0x4bc>
    1742:	52 c0       	rjmp	.+164    	; 0x17e8 <TIM_voidStart+0x560>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	d1 f0       	breq	.+52     	; 0x1780 <TIM_voidStart+0x4f8>
    174c:	e8 c0       	rjmp	.+464    	; 0x191e <TIM_voidStart+0x696>
    174e:	2b 81       	ldd	r18, Y+3	; 0x03
    1750:	3c 81       	ldd	r19, Y+4	; 0x04
    1752:	25 30       	cpi	r18, 0x05	; 5
    1754:	31 05       	cpc	r19, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <TIM_voidStart+0x4d2>
    1758:	95 c0       	rjmp	.+298    	; 0x1884 <TIM_voidStart+0x5fc>
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	85 30       	cpi	r24, 0x05	; 5
    1760:	91 05       	cpc	r25, r1
    1762:	0c f4       	brge	.+2      	; 0x1766 <TIM_voidStart+0x4de>
    1764:	75 c0       	rjmp	.+234    	; 0x1850 <TIM_voidStart+0x5c8>
    1766:	2b 81       	ldd	r18, Y+3	; 0x03
    1768:	3c 81       	ldd	r19, Y+4	; 0x04
    176a:	26 30       	cpi	r18, 0x06	; 6
    176c:	31 05       	cpc	r19, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <TIM_voidStart+0x4ea>
    1770:	a3 c0       	rjmp	.+326    	; 0x18b8 <TIM_voidStart+0x630>
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	87 30       	cpi	r24, 0x07	; 7
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <TIM_voidStart+0x4f6>
    177c:	b7 c0       	rjmp	.+366    	; 0x18ec <TIM_voidStart+0x664>
    177e:	cf c0       	rjmp	.+414    	; 0x191e <TIM_voidStart+0x696>
					case TIMS_STOP:
						CLR_BIT(TIMS->TCCR2,CS20);
    1780:	a3 e4       	ldi	r26, 0x43	; 67
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e3 e4       	ldi	r30, 0x43	; 67
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	8e 7f       	andi	r24, 0xFE	; 254
    178c:	12 96       	adiw	r26, 0x02	; 2
    178e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    1790:	a3 e4       	ldi	r26, 0x43	; 67
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e3 e4       	ldi	r30, 0x43	; 67
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	8d 7f       	andi	r24, 0xFD	; 253
    179c:	12 96       	adiw	r26, 0x02	; 2
    179e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    17a0:	a3 e4       	ldi	r26, 0x43	; 67
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e3 e4       	ldi	r30, 0x43	; 67
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	8b 7f       	andi	r24, 0xFB	; 251
    17ac:	12 96       	adiw	r26, 0x02	; 2
    17ae:	8c 93       	st	X, r24
    17b0:	12 97       	sbiw	r26, 0x02	; 2
    17b2:	b5 c0       	rjmp	.+362    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1:
						SET_BIT(TIMS->TCCR2,CS20);
    17b4:	a3 e4       	ldi	r26, 0x43	; 67
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e3 e4       	ldi	r30, 0x43	; 67
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	12 96       	adiw	r26, 0x02	; 2
    17c2:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    17c4:	a3 e4       	ldi	r26, 0x43	; 67
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e3 e4       	ldi	r30, 0x43	; 67
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	8d 7f       	andi	r24, 0xFD	; 253
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    17d4:	a3 e4       	ldi	r26, 0x43	; 67
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e3 e4       	ldi	r30, 0x43	; 67
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	8b 7f       	andi	r24, 0xFB	; 251
    17e0:	12 96       	adiw	r26, 0x02	; 2
    17e2:	8c 93       	st	X, r24
    17e4:	12 97       	sbiw	r26, 0x02	; 2
    17e6:	9b c0       	rjmp	.+310    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_8:
						CLR_BIT(TIMS->TCCR2,CS20);
    17e8:	a3 e4       	ldi	r26, 0x43	; 67
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e3 e4       	ldi	r30, 0x43	; 67
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	8e 7f       	andi	r24, 0xFE	; 254
    17f4:	12 96       	adiw	r26, 0x02	; 2
    17f6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    17f8:	a3 e4       	ldi	r26, 0x43	; 67
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e3 e4       	ldi	r30, 0x43	; 67
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	82 60       	ori	r24, 0x02	; 2
    1804:	12 96       	adiw	r26, 0x02	; 2
    1806:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    1808:	a3 e4       	ldi	r26, 0x43	; 67
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e3 e4       	ldi	r30, 0x43	; 67
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	8b 7f       	andi	r24, 0xFB	; 251
    1814:	12 96       	adiw	r26, 0x02	; 2
    1816:	8c 93       	st	X, r24
    1818:	12 97       	sbiw	r26, 0x02	; 2
    181a:	81 c0       	rjmp	.+258    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIM2_DIVISION_32:
						SET_BIT(TIMS->TCCR2,CS20);
    181c:	a3 e4       	ldi	r26, 0x43	; 67
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e3 e4       	ldi	r30, 0x43	; 67
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	81 60       	ori	r24, 0x01	; 1
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    182c:	a3 e4       	ldi	r26, 0x43	; 67
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e3 e4       	ldi	r30, 0x43	; 67
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	12 96       	adiw	r26, 0x02	; 2
    183a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    183c:	a3 e4       	ldi	r26, 0x43	; 67
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e3 e4       	ldi	r30, 0x43	; 67
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	8b 7f       	andi	r24, 0xFB	; 251
    1848:	12 96       	adiw	r26, 0x02	; 2
    184a:	8c 93       	st	X, r24
    184c:	12 97       	sbiw	r26, 0x02	; 2
    184e:	67 c0       	rjmp	.+206    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_64:
						CLR_BIT(TIMS->TCCR2,CS20);
    1850:	a3 e4       	ldi	r26, 0x43	; 67
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e3 e4       	ldi	r30, 0x43	; 67
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	8e 7f       	andi	r24, 0xFE	; 254
    185c:	12 96       	adiw	r26, 0x02	; 2
    185e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    1860:	a3 e4       	ldi	r26, 0x43	; 67
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e3 e4       	ldi	r30, 0x43	; 67
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	8d 7f       	andi	r24, 0xFD	; 253
    186c:	12 96       	adiw	r26, 0x02	; 2
    186e:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    1870:	a3 e4       	ldi	r26, 0x43	; 67
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e3 e4       	ldi	r30, 0x43	; 67
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	84 60       	ori	r24, 0x04	; 4
    187c:	12 96       	adiw	r26, 0x02	; 2
    187e:	8c 93       	st	X, r24
    1880:	12 97       	sbiw	r26, 0x02	; 2
    1882:	4d c0       	rjmp	.+154    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIM2_DIVISION_128:
						SET_BIT(TIMS->TCCR2,CS20);
    1884:	a3 e4       	ldi	r26, 0x43	; 67
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e3 e4       	ldi	r30, 0x43	; 67
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	81 60       	ori	r24, 0x01	; 1
    1890:	12 96       	adiw	r26, 0x02	; 2
    1892:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    1894:	a3 e4       	ldi	r26, 0x43	; 67
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e3 e4       	ldi	r30, 0x43	; 67
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	8d 7f       	andi	r24, 0xFD	; 253
    18a0:	12 96       	adiw	r26, 0x02	; 2
    18a2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    18a4:	a3 e4       	ldi	r26, 0x43	; 67
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e3 e4       	ldi	r30, 0x43	; 67
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	84 60       	ori	r24, 0x04	; 4
    18b0:	12 96       	adiw	r26, 0x02	; 2
    18b2:	8c 93       	st	X, r24
    18b4:	12 97       	sbiw	r26, 0x02	; 2
    18b6:	33 c0       	rjmp	.+102    	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_256:
						CLR_BIT(TIMS->TCCR2,CS20);
    18b8:	a3 e4       	ldi	r26, 0x43	; 67
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e3 e4       	ldi	r30, 0x43	; 67
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	8e 7f       	andi	r24, 0xFE	; 254
    18c4:	12 96       	adiw	r26, 0x02	; 2
    18c6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    18c8:	a3 e4       	ldi	r26, 0x43	; 67
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e3 e4       	ldi	r30, 0x43	; 67
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	82 60       	ori	r24, 0x02	; 2
    18d4:	12 96       	adiw	r26, 0x02	; 2
    18d6:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    18d8:	a3 e4       	ldi	r26, 0x43	; 67
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e3 e4       	ldi	r30, 0x43	; 67
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	84 60       	ori	r24, 0x04	; 4
    18e4:	12 96       	adiw	r26, 0x02	; 2
    18e6:	8c 93       	st	X, r24
    18e8:	12 97       	sbiw	r26, 0x02	; 2
    18ea:	19 c0       	rjmp	.+50     	; 0x191e <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1024:
						SET_BIT(TIMS->TCCR2,CS20);
    18ec:	a3 e4       	ldi	r26, 0x43	; 67
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e3 e4       	ldi	r30, 0x43	; 67
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	81 60       	ori	r24, 0x01	; 1
    18f8:	12 96       	adiw	r26, 0x02	; 2
    18fa:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    18fc:	a3 e4       	ldi	r26, 0x43	; 67
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e3 e4       	ldi	r30, 0x43	; 67
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	82 60       	ori	r24, 0x02	; 2
    1908:	12 96       	adiw	r26, 0x02	; 2
    190a:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    190c:	a3 e4       	ldi	r26, 0x43	; 67
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e3 e4       	ldi	r30, 0x43	; 67
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	84 60       	ori	r24, 0x04	; 4
    1918:	12 96       	adiw	r26, 0x02	; 2
    191a:	8c 93       	st	X, r24
    191c:	12 97       	sbiw	r26, 0x02	; 2
			default:
				break;

		}

}
    191e:	2a 96       	adiw	r28, 0x0a	; 10
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <TIM_voidStop>:
void TIM_voidStop(TIM_ID copy_TIM_ID){
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <TIM_voidStop+0x6>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_ID){
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3b 83       	std	Y+3, r19	; 0x03
    1946:	2a 83       	std	Y+2, r18	; 0x02
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	21 f1       	breq	.+72     	; 0x199a <TIM_voidStop+0x6a>
    1952:	2a 81       	ldd	r18, Y+2	; 0x02
    1954:	3b 81       	ldd	r19, Y+3	; 0x03
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	c9 f1       	breq	.+114    	; 0x19ce <TIM_voidStop+0x9e>
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	09 f0       	breq	.+2      	; 0x1966 <TIM_voidStop+0x36>
    1964:	4d c0       	rjmp	.+154    	; 0x1a00 <TIM_voidStop+0xd0>
			case (TIM0):
				CLR_BIT(TIMS->TCCR0,CS00);
    1966:	a3 e4       	ldi	r26, 0x43	; 67
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e3 e4       	ldi	r30, 0x43	; 67
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 89       	ldd	r24, Z+16	; 0x10
    1970:	8e 7f       	andi	r24, 0xFE	; 254
    1972:	50 96       	adiw	r26, 0x10	; 16
    1974:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR0,CS01);
    1976:	a3 e4       	ldi	r26, 0x43	; 67
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e3 e4       	ldi	r30, 0x43	; 67
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 89       	ldd	r24, Z+16	; 0x10
    1980:	8d 7f       	andi	r24, 0xFD	; 253
    1982:	50 96       	adiw	r26, 0x10	; 16
    1984:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR0,CS02);
    1986:	a3 e4       	ldi	r26, 0x43	; 67
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e3 e4       	ldi	r30, 0x43	; 67
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 89       	ldd	r24, Z+16	; 0x10
    1990:	8b 7f       	andi	r24, 0xFB	; 251
    1992:	50 96       	adiw	r26, 0x10	; 16
    1994:	8c 93       	st	X, r24
    1996:	50 97       	sbiw	r26, 0x10	; 16
    1998:	33 c0       	rjmp	.+102    	; 0x1a00 <TIM_voidStop+0xd0>
				break;
			case (TIM1):
				CLR_BIT(TIMS->TCCR1B,CS10);
    199a:	a3 e4       	ldi	r26, 0x43	; 67
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 e4       	ldi	r30, 0x43	; 67
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	83 85       	ldd	r24, Z+11	; 0x0b
    19a4:	8e 7f       	andi	r24, 0xFE	; 254
    19a6:	1b 96       	adiw	r26, 0x0b	; 11
    19a8:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR1B,CS11);
    19aa:	a3 e4       	ldi	r26, 0x43	; 67
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e3 e4       	ldi	r30, 0x43	; 67
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	83 85       	ldd	r24, Z+11	; 0x0b
    19b4:	8d 7f       	andi	r24, 0xFD	; 253
    19b6:	1b 96       	adiw	r26, 0x0b	; 11
    19b8:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR1B,CS12);
    19ba:	a3 e4       	ldi	r26, 0x43	; 67
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e3 e4       	ldi	r30, 0x43	; 67
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	83 85       	ldd	r24, Z+11	; 0x0b
    19c4:	8b 7f       	andi	r24, 0xFB	; 251
    19c6:	1b 96       	adiw	r26, 0x0b	; 11
    19c8:	8c 93       	st	X, r24
    19ca:	1b 97       	sbiw	r26, 0x0b	; 11
    19cc:	19 c0       	rjmp	.+50     	; 0x1a00 <TIM_voidStop+0xd0>
				break;
			case (TIM2):
				CLR_BIT(TIMS->TCCR2,CS20);
    19ce:	a3 e4       	ldi	r26, 0x43	; 67
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e3 e4       	ldi	r30, 0x43	; 67
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	12 96       	adiw	r26, 0x02	; 2
    19dc:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR2,CS21);
    19de:	a3 e4       	ldi	r26, 0x43	; 67
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e3 e4       	ldi	r30, 0x43	; 67
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR2,CS22);
    19ee:	a3 e4       	ldi	r26, 0x43	; 67
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e3 e4       	ldi	r30, 0x43	; 67
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	8b 7f       	andi	r24, 0xFB	; 251
    19fa:	12 96       	adiw	r26, 0x02	; 2
    19fc:	8c 93       	st	X, r24
    19fe:	12 97       	sbiw	r26, 0x02	; 2
				break;
			default:
				break;
		}
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <TIM_voidEnableIntterput>:
void TIM_voidEnableIntterput(TIM_INTERRUPT_ID copy_TIM_INTERRUPT_ID){
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <TIM_voidEnableIntterput+0x6>
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_INTERRUPT_ID){
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	3b 83       	std	Y+3, r19	; 0x03
    1a22:	2a 83       	std	Y+2, r18	; 0x02
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <TIM_voidEnableIntterput+0x24>
    1a2e:	4a c0       	rjmp	.+148    	; 0x1ac4 <TIM_voidEnableIntterput+0xb8>
    1a30:	2a 81       	ldd	r18, Y+2	; 0x02
    1a32:	3b 81       	ldd	r19, Y+3	; 0x03
    1a34:	24 30       	cpi	r18, 0x04	; 4
    1a36:	31 05       	cpc	r19, r1
    1a38:	7c f4       	brge	.+30     	; 0x1a58 <TIM_voidEnableIntterput+0x4c>
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	61 f1       	breq	.+88     	; 0x1a9c <TIM_voidEnableIntterput+0x90>
    1a44:	2a 81       	ldd	r18, Y+2	; 0x02
    1a46:	3b 81       	ldd	r19, Y+3	; 0x03
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	8c f5       	brge	.+98     	; 0x1ab0 <TIM_voidEnableIntterput+0xa4>
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	9b 81       	ldd	r25, Y+3	; 0x03
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	c9 f0       	breq	.+50     	; 0x1a88 <TIM_voidEnableIntterput+0x7c>
    1a56:	66 c0       	rjmp	.+204    	; 0x1b24 <TIM_voidEnableIntterput+0x118>
    1a58:	2a 81       	ldd	r18, Y+2	; 0x02
    1a5a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a5c:	25 30       	cpi	r18, 0x05	; 5
    1a5e:	31 05       	cpc	r19, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <TIM_voidEnableIntterput+0x58>
    1a62:	44 c0       	rjmp	.+136    	; 0x1aec <TIM_voidEnableIntterput+0xe0>
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	85 30       	cpi	r24, 0x05	; 5
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	ac f1       	brlt	.+106    	; 0x1ad8 <TIM_voidEnableIntterput+0xcc>
    1a6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a70:	3b 81       	ldd	r19, Y+3	; 0x03
    1a72:	26 30       	cpi	r18, 0x06	; 6
    1a74:	31 05       	cpc	r19, r1
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <TIM_voidEnableIntterput+0x6e>
    1a78:	43 c0       	rjmp	.+134    	; 0x1b00 <TIM_voidEnableIntterput+0xf4>
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7e:	87 30       	cpi	r24, 0x07	; 7
    1a80:	91 05       	cpc	r25, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <TIM_voidEnableIntterput+0x7a>
    1a84:	47 c0       	rjmp	.+142    	; 0x1b14 <TIM_voidEnableIntterput+0x108>
    1a86:	4e c0       	rjmp	.+156    	; 0x1b24 <TIM_voidEnableIntterput+0x118>
		case(TOI0):
			SET_BIT(TIMS->TIMSK,TOIE0);
    1a88:	a3 e4       	ldi	r26, 0x43	; 67
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e3 e4       	ldi	r30, 0x43	; 67
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	86 89       	ldd	r24, Z+22	; 0x16
    1a92:	81 60       	ori	r24, 0x01	; 1
    1a94:	56 96       	adiw	r26, 0x16	; 22
    1a96:	8c 93       	st	X, r24
    1a98:	56 97       	sbiw	r26, 0x16	; 22
    1a9a:	44 c0       	rjmp	.+136    	; 0x1b24 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI0):
			SET_BIT(TIMS->TIMSK,OCIE0);
    1a9c:	a3 e4       	ldi	r26, 0x43	; 67
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e3 e4       	ldi	r30, 0x43	; 67
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	86 89       	ldd	r24, Z+22	; 0x16
    1aa6:	82 60       	ori	r24, 0x02	; 2
    1aa8:	56 96       	adiw	r26, 0x16	; 22
    1aaa:	8c 93       	st	X, r24
    1aac:	56 97       	sbiw	r26, 0x16	; 22
    1aae:	3a c0       	rjmp	.+116    	; 0x1b24 <TIM_voidEnableIntterput+0x118>
			break;
		case(TOI1):
			SET_BIT(TIMS->TIMSK,TOIE1);
    1ab0:	a3 e4       	ldi	r26, 0x43	; 67
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e3 e4       	ldi	r30, 0x43	; 67
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	86 89       	ldd	r24, Z+22	; 0x16
    1aba:	84 60       	ori	r24, 0x04	; 4
    1abc:	56 96       	adiw	r26, 0x16	; 22
    1abe:	8c 93       	st	X, r24
    1ac0:	56 97       	sbiw	r26, 0x16	; 22
    1ac2:	30 c0       	rjmp	.+96     	; 0x1b24 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI1B):
			SET_BIT(TIMS->TIMSK,OCIE1B);
    1ac4:	a3 e4       	ldi	r26, 0x43	; 67
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e3 e4       	ldi	r30, 0x43	; 67
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	86 89       	ldd	r24, Z+22	; 0x16
    1ace:	88 60       	ori	r24, 0x08	; 8
    1ad0:	56 96       	adiw	r26, 0x16	; 22
    1ad2:	8c 93       	st	X, r24
    1ad4:	56 97       	sbiw	r26, 0x16	; 22
    1ad6:	26 c0       	rjmp	.+76     	; 0x1b24 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI1A):
			SET_BIT(TIMS->TIMSK,OCI1A);
    1ad8:	a3 e4       	ldi	r26, 0x43	; 67
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e3 e4       	ldi	r30, 0x43	; 67
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	86 89       	ldd	r24, Z+22	; 0x16
    1ae2:	80 61       	ori	r24, 0x10	; 16
    1ae4:	56 96       	adiw	r26, 0x16	; 22
    1ae6:	8c 93       	st	X, r24
    1ae8:	56 97       	sbiw	r26, 0x16	; 22
    1aea:	1c c0       	rjmp	.+56     	; 0x1b24 <TIM_voidEnableIntterput+0x118>
			break;
		case(TICI1):
			SET_BIT(TIMS->TIMSK,TICIE1);
    1aec:	a3 e4       	ldi	r26, 0x43	; 67
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e3 e4       	ldi	r30, 0x43	; 67
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	86 89       	ldd	r24, Z+22	; 0x16
    1af6:	80 62       	ori	r24, 0x20	; 32
    1af8:	56 96       	adiw	r26, 0x16	; 22
    1afa:	8c 93       	st	X, r24
    1afc:	56 97       	sbiw	r26, 0x16	; 22
    1afe:	12 c0       	rjmp	.+36     	; 0x1b24 <TIM_voidEnableIntterput+0x118>
			break;
		case(TOI2):
			SET_BIT(TIMS->TIMSK,TOIE2);
    1b00:	a3 e4       	ldi	r26, 0x43	; 67
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e3 e4       	ldi	r30, 0x43	; 67
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	86 89       	ldd	r24, Z+22	; 0x16
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	56 96       	adiw	r26, 0x16	; 22
    1b0e:	8c 93       	st	X, r24
    1b10:	56 97       	sbiw	r26, 0x16	; 22
    1b12:	08 c0       	rjmp	.+16     	; 0x1b24 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI2):
			SET_BIT(TIMS->TIMSK,OCIE2);
    1b14:	a3 e4       	ldi	r26, 0x43	; 67
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e3 e4       	ldi	r30, 0x43	; 67
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	86 89       	ldd	r24, Z+22	; 0x16
    1b1e:	80 68       	ori	r24, 0x80	; 128
    1b20:	56 96       	adiw	r26, 0x16	; 22
    1b22:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
	SET_BIT(TIMS->SREG,GIE);
    1b24:	a3 e4       	ldi	r26, 0x43	; 67
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e3 e4       	ldi	r30, 0x43	; 67
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b2e:	80 68       	ori	r24, 0x80	; 128
    1b30:	5c 96       	adiw	r26, 0x1c	; 28
    1b32:	8c 93       	st	X, r24
    1b34:	5c 97       	sbiw	r26, 0x1c	; 28
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <TIM_voidDisableIntterput>:
void TIM_voidDisableIntterput(TIM_INTERRUPT_ID copy_TIM_INTERRUPT_ID){
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <TIM_voidDisableIntterput+0x6>
    1b48:	0f 92       	push	r0
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_INTERRUPT_ID){
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3b 83       	std	Y+3, r19	; 0x03
    1b58:	2a 83       	std	Y+2, r18	; 0x02
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	91 05       	cpc	r25, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <TIM_voidDisableIntterput+0x24>
    1b64:	4a c0       	rjmp	.+148    	; 0x1bfa <TIM_voidDisableIntterput+0xb8>
    1b66:	2a 81       	ldd	r18, Y+2	; 0x02
    1b68:	3b 81       	ldd	r19, Y+3	; 0x03
    1b6a:	24 30       	cpi	r18, 0x04	; 4
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	7c f4       	brge	.+30     	; 0x1b8e <TIM_voidDisableIntterput+0x4c>
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	61 f1       	breq	.+88     	; 0x1bd2 <TIM_voidDisableIntterput+0x90>
    1b7a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b7c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b7e:	22 30       	cpi	r18, 0x02	; 2
    1b80:	31 05       	cpc	r19, r1
    1b82:	8c f5       	brge	.+98     	; 0x1be6 <TIM_voidDisableIntterput+0xa4>
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	c9 f0       	breq	.+50     	; 0x1bbe <TIM_voidDisableIntterput+0x7c>
    1b8c:	67 c0       	rjmp	.+206    	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
    1b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b90:	3b 81       	ldd	r19, Y+3	; 0x03
    1b92:	25 30       	cpi	r18, 0x05	; 5
    1b94:	31 05       	cpc	r19, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <TIM_voidDisableIntterput+0x58>
    1b98:	44 c0       	rjmp	.+136    	; 0x1c22 <TIM_voidDisableIntterput+0xe0>
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9e:	85 30       	cpi	r24, 0x05	; 5
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	ac f1       	brlt	.+106    	; 0x1c0e <TIM_voidDisableIntterput+0xcc>
    1ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba8:	26 30       	cpi	r18, 0x06	; 6
    1baa:	31 05       	cpc	r19, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <TIM_voidDisableIntterput+0x6e>
    1bae:	43 c0       	rjmp	.+134    	; 0x1c36 <TIM_voidDisableIntterput+0xf4>
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	87 30       	cpi	r24, 0x07	; 7
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <TIM_voidDisableIntterput+0x7a>
    1bba:	47 c0       	rjmp	.+142    	; 0x1c4a <TIM_voidDisableIntterput+0x108>
    1bbc:	4f c0       	rjmp	.+158    	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
		case(TOI0):
			CLR_BIT(TIMS->TIMSK,TOIE0);
    1bbe:	a3 e4       	ldi	r26, 0x43	; 67
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e3 e4       	ldi	r30, 0x43	; 67
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	86 89       	ldd	r24, Z+22	; 0x16
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	56 96       	adiw	r26, 0x16	; 22
    1bcc:	8c 93       	st	X, r24
    1bce:	56 97       	sbiw	r26, 0x16	; 22
    1bd0:	45 c0       	rjmp	.+138    	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI0):
			CLR_BIT(TIMS->TIMSK,OCIE0);
    1bd2:	a3 e4       	ldi	r26, 0x43	; 67
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e3 e4       	ldi	r30, 0x43	; 67
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	86 89       	ldd	r24, Z+22	; 0x16
    1bdc:	8d 7f       	andi	r24, 0xFD	; 253
    1bde:	56 96       	adiw	r26, 0x16	; 22
    1be0:	8c 93       	st	X, r24
    1be2:	56 97       	sbiw	r26, 0x16	; 22
    1be4:	3b c0       	rjmp	.+118    	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
			break;
		case(TOI1):
			CLR_BIT(TIMS->TIMSK,TOIE1);
    1be6:	a3 e4       	ldi	r26, 0x43	; 67
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e3 e4       	ldi	r30, 0x43	; 67
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	86 89       	ldd	r24, Z+22	; 0x16
    1bf0:	8b 7f       	andi	r24, 0xFB	; 251
    1bf2:	56 96       	adiw	r26, 0x16	; 22
    1bf4:	8c 93       	st	X, r24
    1bf6:	56 97       	sbiw	r26, 0x16	; 22
    1bf8:	31 c0       	rjmp	.+98     	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI1B):
			CLR_BIT(TIMS->TIMSK,OCIE1B);
    1bfa:	a3 e4       	ldi	r26, 0x43	; 67
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e3 e4       	ldi	r30, 0x43	; 67
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	86 89       	ldd	r24, Z+22	; 0x16
    1c04:	87 7f       	andi	r24, 0xF7	; 247
    1c06:	56 96       	adiw	r26, 0x16	; 22
    1c08:	8c 93       	st	X, r24
    1c0a:	56 97       	sbiw	r26, 0x16	; 22
    1c0c:	27 c0       	rjmp	.+78     	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI1A):
			CLR_BIT(TIMS->TIMSK,OCI1A);
    1c0e:	a3 e4       	ldi	r26, 0x43	; 67
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e3 e4       	ldi	r30, 0x43	; 67
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	86 89       	ldd	r24, Z+22	; 0x16
    1c18:	8f 7e       	andi	r24, 0xEF	; 239
    1c1a:	56 96       	adiw	r26, 0x16	; 22
    1c1c:	8c 93       	st	X, r24
    1c1e:	56 97       	sbiw	r26, 0x16	; 22
    1c20:	1d c0       	rjmp	.+58     	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
			break;
		case(TICI1):
			CLR_BIT(TIMS->TIMSK,TICIE1);
    1c22:	a3 e4       	ldi	r26, 0x43	; 67
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e3 e4       	ldi	r30, 0x43	; 67
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	86 89       	ldd	r24, Z+22	; 0x16
    1c2c:	8f 7d       	andi	r24, 0xDF	; 223
    1c2e:	56 96       	adiw	r26, 0x16	; 22
    1c30:	8c 93       	st	X, r24
    1c32:	56 97       	sbiw	r26, 0x16	; 22
    1c34:	13 c0       	rjmp	.+38     	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
			break;
		case(TOI2):
			CLR_BIT(TIMS->TIMSK,TOIE2);
    1c36:	a3 e4       	ldi	r26, 0x43	; 67
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e3 e4       	ldi	r30, 0x43	; 67
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	86 89       	ldd	r24, Z+22	; 0x16
    1c40:	8f 7b       	andi	r24, 0xBF	; 191
    1c42:	56 96       	adiw	r26, 0x16	; 22
    1c44:	8c 93       	st	X, r24
    1c46:	56 97       	sbiw	r26, 0x16	; 22
    1c48:	09 c0       	rjmp	.+18     	; 0x1c5c <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI2):
			CLR_BIT(TIMS->TIMSK,OCIE2);
    1c4a:	a3 e4       	ldi	r26, 0x43	; 67
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e3 e4       	ldi	r30, 0x43	; 67
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	86 89       	ldd	r24, Z+22	; 0x16
    1c54:	8f 77       	andi	r24, 0x7F	; 127
    1c56:	56 96       	adiw	r26, 0x16	; 22
    1c58:	8c 93       	st	X, r24
    1c5a:	56 97       	sbiw	r26, 0x16	; 22
			break;
		default:
			break;
		}
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <TIM_voidGetISR>:
void TIM_voidGetISR(TIM_INTERRUPT_ID copy_TIM_INTERRUPT_ID,void (*pf)(void)){
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <TIM_voidGetISR+0x6>
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <TIM_voidGetISR+0x8>
    1c70:	0f 92       	push	r0
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	7b 83       	std	Y+3, r23	; 0x03
    1c7a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIM_INTERRUPT_ID){
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	3d 83       	std	Y+5, r19	; 0x05
    1c84:	2c 83       	std	Y+4, r18	; 0x04
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <TIM_voidGetISR+0x2a>
    1c90:	3e c0       	rjmp	.+124    	; 0x1d0e <TIM_voidGetISR+0xa6>
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	24 30       	cpi	r18, 0x04	; 4
    1c98:	31 05       	cpc	r19, r1
    1c9a:	7c f4       	brge	.+30     	; 0x1cba <TIM_voidGetISR+0x52>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	31 f1       	breq	.+76     	; 0x1cf2 <TIM_voidGetISR+0x8a>
    1ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	44 f5       	brge	.+80     	; 0x1d00 <TIM_voidGetISR+0x98>
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	b1 f0       	breq	.+44     	; 0x1ce4 <TIM_voidGetISR+0x7c>
    1cb8:	4c c0       	rjmp	.+152    	; 0x1d52 <TIM_voidGetISR+0xea>
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbe:	25 30       	cpi	r18, 0x05	; 5
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	99 f1       	breq	.+102    	; 0x1d2a <TIM_voidGetISR+0xc2>
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	85 30       	cpi	r24, 0x05	; 5
    1cca:	91 05       	cpc	r25, r1
    1ccc:	3c f1       	brlt	.+78     	; 0x1d1c <TIM_voidGetISR+0xb4>
    1cce:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd2:	26 30       	cpi	r18, 0x06	; 6
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	81 f1       	breq	.+96     	; 0x1d38 <TIM_voidGetISR+0xd0>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	87 30       	cpi	r24, 0x07	; 7
    1cde:	91 05       	cpc	r25, r1
    1ce0:	91 f1       	breq	.+100    	; 0x1d46 <TIM_voidGetISR+0xde>
    1ce2:	37 c0       	rjmp	.+110    	; 0x1d52 <TIM_voidGetISR+0xea>
		case(TOI0):
			TIMER0_OVF_pf=pf;
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce8:	90 93 21 02 	sts	0x0221, r25
    1cec:	80 93 20 02 	sts	0x0220, r24
    1cf0:	30 c0       	rjmp	.+96     	; 0x1d52 <TIM_voidGetISR+0xea>
			break;
		case(OCI0):
			TIMER0_COMP_pf=pf;
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	90 93 1f 02 	sts	0x021F, r25
    1cfa:	80 93 1e 02 	sts	0x021E, r24
    1cfe:	29 c0       	rjmp	.+82     	; 0x1d52 <TIM_voidGetISR+0xea>
			break;
		case(TOI1):
			TIMER1_OVF_pf=pf;
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	90 93 1d 02 	sts	0x021D, r25
    1d08:	80 93 1c 02 	sts	0x021C, r24
    1d0c:	22 c0       	rjmp	.+68     	; 0x1d52 <TIM_voidGetISR+0xea>
			break;
		case(OCI1B):
			TIMER1_COMPB_pf=pf;
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	90 93 1b 02 	sts	0x021B, r25
    1d16:	80 93 1a 02 	sts	0x021A, r24
    1d1a:	1b c0       	rjmp	.+54     	; 0x1d52 <TIM_voidGetISR+0xea>
			break;
		case(OCI1A):
			TIMER1_COMPA_pf=pf;
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	90 93 19 02 	sts	0x0219, r25
    1d24:	80 93 18 02 	sts	0x0218, r24
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <TIM_voidGetISR+0xea>
			break;
		case(TICI1):
			TIMER1_CAPT_pf=pf;
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2e:	90 93 17 02 	sts	0x0217, r25
    1d32:	80 93 16 02 	sts	0x0216, r24
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <TIM_voidGetISR+0xea>
			break;
		case(TOI2):
			TIMER2_OVF_pf=pf;
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	90 93 15 02 	sts	0x0215, r25
    1d40:	80 93 14 02 	sts	0x0214, r24
    1d44:	06 c0       	rjmp	.+12     	; 0x1d52 <TIM_voidGetISR+0xea>
			break;
		case(OCI2):
			TIMER2_COMP_pf=pf;
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	90 93 13 02 	sts	0x0213, r25
    1d4e:	80 93 12 02 	sts	0x0212, r24
			break;
		default:
			break;
			}
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <TIM_u16GetTimerCount>:
u16  TIM_u16GetTimerCount(TIM_ID copy_TIM_ID){
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <TIM_u16GetTimerCount+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <TIM_u16GetTimerCount+0x8>
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_ID){
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	3d 83       	std	Y+5, r19	; 0x05
    1d7a:	2c 83       	std	Y+4, r18	; 0x04
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	91 05       	cpc	r25, r1
    1d84:	89 f0       	breq	.+34     	; 0x1da8 <TIM_u16GetTimerCount+0x46>
    1d86:	2c 81       	ldd	r18, Y+4	; 0x04
    1d88:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	99 f0       	breq	.+38     	; 0x1db6 <TIM_u16GetTimerCount+0x54>
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	9d 81       	ldd	r25, Y+5	; 0x05
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	b9 f4       	brne	.+46     	; 0x1dc6 <TIM_u16GetTimerCount+0x64>
		case (TIM0):
				return (u16) TIMS->TCNT0;
    1d98:	e3 e4       	ldi	r30, 0x43	; 67
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	87 85       	ldd	r24, Z+15	; 0x0f
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3b 83       	std	Y+3, r19	; 0x03
    1da4:	2a 83       	std	Y+2, r18	; 0x02
    1da6:	11 c0       	rjmp	.+34     	; 0x1dca <TIM_u16GetTimerCount+0x68>
			break;
		case (TIM1):
				return (u16) TIMS->TCNT1;
    1da8:	e3 e4       	ldi	r30, 0x43	; 67
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	81 85       	ldd	r24, Z+9	; 0x09
    1dae:	92 85       	ldd	r25, Z+10	; 0x0a
    1db0:	9b 83       	std	Y+3, r25	; 0x03
    1db2:	8a 83       	std	Y+2, r24	; 0x02
    1db4:	0a c0       	rjmp	.+20     	; 0x1dca <TIM_u16GetTimerCount+0x68>
			break;
		case (TIM2):
				return (u16) TIMS->TCNT2;
    1db6:	e3 e4       	ldi	r30, 0x43	; 67
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	81 81       	ldd	r24, Z+1	; 0x01
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3b 83       	std	Y+3, r19	; 0x03
    1dc2:	2a 83       	std	Y+2, r18	; 0x02
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <TIM_u16GetTimerCount+0x68>
			break;
		default:
				return (u16) 0;
    1dc6:	1b 82       	std	Y+3, r1	; 0x03
    1dc8:	1a 82       	std	Y+2, r1	; 0x02
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
			break;

	}
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <TIM_voidSetComperMatch>:
void TIM_voidSetComperMatch(TIMS_COMPERMATCH_T copy_TIMS_COMPERMATCH_T,u16 copy_u16ComperMatchValue){
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <TIM_voidSetComperMatch+0x6>
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <TIM_voidSetComperMatch+0x8>
    1de6:	0f 92       	push	r0
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	7b 83       	std	Y+3, r23	; 0x03
    1df0:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIMS_COMPERMATCH_T){
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	3d 83       	std	Y+5, r19	; 0x05
    1dfa:	2c 83       	std	Y+4, r18	; 0x04
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	91 05       	cpc	r25, r1
    1e04:	31 f1       	breq	.+76     	; 0x1e52 <TIM_voidSetComperMatch+0x74>
    1e06:	2c 81       	ldd	r18, Y+4	; 0x04
    1e08:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0a:	23 30       	cpi	r18, 0x03	; 3
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	54 f4       	brge	.+20     	; 0x1e24 <TIM_voidSetComperMatch+0x46>
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	89 f0       	breq	.+34     	; 0x1e3a <TIM_voidSetComperMatch+0x5c>
    1e18:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1c:	21 30       	cpi	r18, 0x01	; 1
    1e1e:	31 05       	cpc	r19, r1
    1e20:	89 f0       	breq	.+34     	; 0x1e44 <TIM_voidSetComperMatch+0x66>
    1e22:	29 c0       	rjmp	.+82     	; 0x1e76 <TIM_voidSetComperMatch+0x98>
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	01 f1       	breq	.+64     	; 0x1e6e <TIM_voidSetComperMatch+0x90>
    1e2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e30:	3d 81       	ldd	r19, Y+5	; 0x05
    1e32:	24 30       	cpi	r18, 0x04	; 4
    1e34:	31 05       	cpc	r19, r1
    1e36:	a1 f0       	breq	.+40     	; 0x1e60 <TIM_voidSetComperMatch+0x82>
    1e38:	1e c0       	rjmp	.+60     	; 0x1e76 <TIM_voidSetComperMatch+0x98>
	case(OC0):
		TIMS->OCR0 =	(u8)copy_u16ComperMatchValue;
    1e3a:	e3 e4       	ldi	r30, 0x43	; 67
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	81 8f       	std	Z+25, r24	; 0x19
    1e42:	19 c0       	rjmp	.+50     	; 0x1e76 <TIM_voidSetComperMatch+0x98>
	break;
	case(OC1B):
		TIMS->OCR1B =	(u16)copy_u16ComperMatchValue;
    1e44:	e3 e4       	ldi	r30, 0x43	; 67
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	96 83       	std	Z+6, r25	; 0x06
    1e4e:	85 83       	std	Z+5, r24	; 0x05
    1e50:	12 c0       	rjmp	.+36     	; 0x1e76 <TIM_voidSetComperMatch+0x98>
		break;
	case(OC1A):
		TIMS->OCR1A =	(u16)copy_u16ComperMatchValue;
    1e52:	e3 e4       	ldi	r30, 0x43	; 67
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	90 87       	std	Z+8, r25	; 0x08
    1e5c:	87 83       	std	Z+7, r24	; 0x07
    1e5e:	0b c0       	rjmp	.+22     	; 0x1e76 <TIM_voidSetComperMatch+0x98>
		break;
	case(ICR):
		TIMS->ICR1 =	(u16)copy_u16ComperMatchValue;
    1e60:	e3 e4       	ldi	r30, 0x43	; 67
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	94 83       	std	Z+4, r25	; 0x04
    1e6a:	83 83       	std	Z+3, r24	; 0x03
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <TIM_voidSetComperMatch+0x98>
		break;
	case(OC2):
		TIMS->OCR2 = 	(u8)copy_u16ComperMatchValue;
    1e6e:	e3 e4       	ldi	r30, 0x43	; 67
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <TIM_voidSetCountRegister>:
void TIM_voidSetCountRegister(TIM_ID copy_TIM_ID, u16 copy_u16CountValue){
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <TIM_voidSetCountRegister+0x6>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <TIM_voidSetCountRegister+0x8>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	7b 83       	std	Y+3, r23	; 0x03
    1e98:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIM_ID){
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3d 83       	std	Y+5, r19	; 0x05
    1ea2:	2c 83       	std	Y+4, r18	; 0x04
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	71 f0       	breq	.+28     	; 0x1eca <TIM_voidSetCountRegister+0x44>
    1eae:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	81 f0       	breq	.+32     	; 0x1ed8 <TIM_voidSetCountRegister+0x52>
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	81 f4       	brne	.+32     	; 0x1ee0 <TIM_voidSetCountRegister+0x5a>
		case (TIM0):
			TIMS->TCNT0=	(u8)copy_u16CountValue;
    1ec0:	e3 e4       	ldi	r30, 0x43	; 67
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	87 87       	std	Z+15, r24	; 0x0f
    1ec8:	0b c0       	rjmp	.+22     	; 0x1ee0 <TIM_voidSetCountRegister+0x5a>
			break;
		case (TIM1):
			TIMS->TCNT1=	(u16)copy_u16CountValue;
    1eca:	e3 e4       	ldi	r30, 0x43	; 67
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	92 87       	std	Z+10, r25	; 0x0a
    1ed4:	81 87       	std	Z+9, r24	; 0x09
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <TIM_voidSetCountRegister+0x5a>
			break;
		case (TIM2):
			TIMS->TCNT2=	(u8)copy_u16CountValue;
    1ed8:	e3 e4       	ldi	r30, 0x43	; 67
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	81 83       	std	Z+1, r24	; 0x01
			break;
		default:
			break;

		}
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <TIM_voidMakeActionAsynchronous>:
void TIM_voidMakeActionAsynchronous(TIM_ID copy_TIM_ID,u32 copy_Delay_ms,void (*pf)(void)){
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	63 97       	sbiw	r28, 0x13	; 19
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	8b 87       	std	Y+11, r24	; 0x0b
    1f06:	4c 87       	std	Y+12, r20	; 0x0c
    1f08:	5d 87       	std	Y+13, r21	; 0x0d
    1f0a:	6e 87       	std	Y+14, r22	; 0x0e
    1f0c:	7f 87       	std	Y+15, r23	; 0x0f
    1f0e:	39 8b       	std	Y+17, r19	; 0x11
    1f10:	28 8b       	std	Y+16, r18	; 0x10
	u32 TickTime=1024/TIM_CPU_F;
    1f12:	80 e8       	ldi	r24, 0x80	; 128
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	8f 83       	std	Y+7, r24	; 0x07
    1f1c:	98 87       	std	Y+8, r25	; 0x08
    1f1e:	a9 87       	std	Y+9, r26	; 0x09
    1f20:	ba 87       	std	Y+10, r27	; 0x0a
	u16 Drisredcounts=0;
    1f22:	1e 82       	std	Y+6, r1	; 0x06
    1f24:	1d 82       	std	Y+5, r1	; 0x05
	u32 OverFlowTime=0;
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	1a 82       	std	Y+2, r1	; 0x02
    1f2a:	1b 82       	std	Y+3, r1	; 0x03
    1f2c:	1c 82       	std	Y+4, r1	; 0x04
	switch(copy_TIM_ID){
    1f2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	3b 8b       	std	Y+19, r19	; 0x13
    1f36:	2a 8b       	std	Y+18, r18	; 0x12
    1f38:	8a 89       	ldd	r24, Y+18	; 0x12
    1f3a:	9b 89       	ldd	r25, Y+19	; 0x13
    1f3c:	81 30       	cpi	r24, 0x01	; 1
    1f3e:	91 05       	cpc	r25, r1
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <TIM_voidMakeActionAsynchronous+0x54>
    1f42:	82 c0       	rjmp	.+260    	; 0x2048 <TIM_voidMakeActionAsynchronous+0x158>
    1f44:	2a 89       	ldd	r18, Y+18	; 0x12
    1f46:	3b 89       	ldd	r19, Y+19	; 0x13
    1f48:	22 30       	cpi	r18, 0x02	; 2
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <TIM_voidMakeActionAsynchronous+0x60>
    1f4e:	fe c0       	rjmp	.+508    	; 0x214c <TIM_voidMakeActionAsynchronous+0x25c>
    1f50:	8a 89       	ldd	r24, Y+18	; 0x12
    1f52:	9b 89       	ldd	r25, Y+19	; 0x13
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <TIM_voidMakeActionAsynchronous+0x6a>
    1f58:	6f c1       	rjmp	.+734    	; 0x2238 <TIM_voidMakeActionAsynchronous+0x348>
			case (TIM0):
				OverFlowTime=TickTime*TIM0_OVERFLOW_COUNTS;
    1f5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5c:	98 85       	ldd	r25, Y+8	; 0x08
    1f5e:	a9 85       	ldd	r26, Y+9	; 0x09
    1f60:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f62:	ba 2f       	mov	r27, r26
    1f64:	a9 2f       	mov	r26, r25
    1f66:	98 2f       	mov	r25, r24
    1f68:	88 27       	eor	r24, r24
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	ab 83       	std	Y+3, r26	; 0x03
    1f70:	bc 83       	std	Y+4, r27	; 0x04
				TIM0_OverFlowTimes=(copy_Delay_ms*1000)/OverFlowTime;
    1f72:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f74:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f76:	ae 85       	ldd	r26, Y+14	; 0x0e
    1f78:	bf 85       	ldd	r27, Y+15	; 0x0f
    1f7a:	28 ee       	ldi	r18, 0xE8	; 232
    1f7c:	33 e0       	ldi	r19, 0x03	; 3
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__mulsi3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	29 81       	ldd	r18, Y+1	; 0x01
    1f90:	3a 81       	ldd	r19, Y+2	; 0x02
    1f92:	4b 81       	ldd	r20, Y+3	; 0x03
    1f94:	5c 81       	ldd	r21, Y+4	; 0x04
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    1f9e:	da 01       	movw	r26, r20
    1fa0:	c9 01       	movw	r24, r18
    1fa2:	80 93 2c 02 	sts	0x022C, r24
    1fa6:	90 93 2d 02 	sts	0x022D, r25
    1faa:	a0 93 2e 02 	sts	0x022E, r26
    1fae:	b0 93 2f 02 	sts	0x022F, r27
				Drisredcounts=(copy_Delay_ms*1000)%OverFlowTime;
    1fb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fb6:	ae 85       	ldd	r26, Y+14	; 0x0e
    1fb8:	bf 85       	ldd	r27, Y+15	; 0x0f
    1fba:	28 ee       	ldi	r18, 0xE8	; 232
    1fbc:	33 e0       	ldi	r19, 0x03	; 3
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__mulsi3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	29 81       	ldd	r18, Y+1	; 0x01
    1fd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1fd2:	4b 81       	ldd	r20, Y+3	; 0x03
    1fd4:	5c 81       	ldd	r21, Y+4	; 0x04
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
				TIM0_PreLoadCunts=TIM0_OVERFLOW_COUNTS-(Drisredcounts/TickTime);
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	cc 01       	movw	r24, r24
    1fec:	a0 e0       	ldi	r26, 0x00	; 0
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ff2:	38 85       	ldd	r19, Y+8	; 0x08
    1ff4:	49 85       	ldd	r20, Y+9	; 0x09
    1ff6:	5a 85       	ldd	r21, Y+10	; 0x0a
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    2000:	da 01       	movw	r26, r20
    2002:	c9 01       	movw	r24, r18
    2004:	81 95       	neg	r24
    2006:	80 93 28 02 	sts	0x0228, r24
				TIM_voidIni(TIM0);
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	0e 94 9d 08 	call	0x113a	; 0x113a <TIM_voidIni>
				TIM_voidSetCountRegister(TIM0,TIM0_PreLoadCunts);
    2010:	80 91 28 02 	lds	r24, 0x0228
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	b9 01       	movw	r22, r18
    201c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <TIM_voidSetCountRegister>
				TIM_voidEnableIntterput(TOI0);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <TIM_voidEnableIntterput>
				TIM0_ActionAsynchronou_ptr=pf;
    2026:	88 89       	ldd	r24, Y+16	; 0x10
    2028:	99 89       	ldd	r25, Y+17	; 0x11
    202a:	90 93 23 02 	sts	0x0223, r25
    202e:	80 93 22 02 	sts	0x0222, r24
				TIM_voidGetISR(TOI0,TIM0_ActionAsynchronou);
    2032:	23 ec       	ldi	r18, 0xC3	; 195
    2034:	31 e1       	ldi	r19, 0x11	; 17
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	b9 01       	movw	r22, r18
    203a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <TIM_voidGetISR>
				TIM_voidStart(TIM0,TIMS_DIVISION_1024);
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	67 e0       	ldi	r22, 0x07	; 7
    2042:	0e 94 44 09 	call	0x1288	; 0x1288 <TIM_voidStart>
    2046:	f8 c0       	rjmp	.+496    	; 0x2238 <TIM_voidMakeActionAsynchronous+0x348>
				break;
			case (TIM1):
				TickTime=8/TIM_CPU_F;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	8f 83       	std	Y+7, r24	; 0x07
    2052:	98 87       	std	Y+8, r25	; 0x08
    2054:	a9 87       	std	Y+9, r26	; 0x09
    2056:	ba 87       	std	Y+10, r27	; 0x0a
				OverFlowTime=TickTime*TIM1_OVERFLOW_COUNTS;
    2058:	8f 81       	ldd	r24, Y+7	; 0x07
    205a:	98 85       	ldd	r25, Y+8	; 0x08
    205c:	a9 85       	ldd	r26, Y+9	; 0x09
    205e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2060:	dc 01       	movw	r26, r24
    2062:	99 27       	eor	r25, r25
    2064:	88 27       	eor	r24, r24
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	ab 83       	std	Y+3, r26	; 0x03
    206c:	bc 83       	std	Y+4, r27	; 0x04
				TIM1_OverFlowTimes=(copy_Delay_ms*1000)/OverFlowTime;
    206e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2070:	9d 85       	ldd	r25, Y+13	; 0x0d
    2072:	ae 85       	ldd	r26, Y+14	; 0x0e
    2074:	bf 85       	ldd	r27, Y+15	; 0x0f
    2076:	28 ee       	ldi	r18, 0xE8	; 232
    2078:	33 e0       	ldi	r19, 0x03	; 3
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__mulsi3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	29 81       	ldd	r18, Y+1	; 0x01
    208c:	3a 81       	ldd	r19, Y+2	; 0x02
    208e:	4b 81       	ldd	r20, Y+3	; 0x03
    2090:	5c 81       	ldd	r21, Y+4	; 0x04
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    209a:	da 01       	movw	r26, r20
    209c:	c9 01       	movw	r24, r18
    209e:	80 93 30 02 	sts	0x0230, r24
    20a2:	90 93 31 02 	sts	0x0231, r25
    20a6:	a0 93 32 02 	sts	0x0232, r26
    20aa:	b0 93 33 02 	sts	0x0233, r27
				Drisredcounts=(copy_Delay_ms*1000)%OverFlowTime;
    20ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    20b2:	ae 85       	ldd	r26, Y+14	; 0x0e
    20b4:	bf 85       	ldd	r27, Y+15	; 0x0f
    20b6:	28 ee       	ldi	r18, 0xE8	; 232
    20b8:	33 e0       	ldi	r19, 0x03	; 3
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__mulsi3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	29 81       	ldd	r18, Y+1	; 0x01
    20cc:	3a 81       	ldd	r19, Y+2	; 0x02
    20ce:	4b 81       	ldd	r20, Y+3	; 0x03
    20d0:	5c 81       	ldd	r21, Y+4	; 0x04
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
				TIM1_PreLoadCunts=TIM1_OVERFLOW_COUNTS-(Drisredcounts/TickTime);
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	cc 01       	movw	r24, r24
    20e8:	a0 e0       	ldi	r26, 0x00	; 0
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	2f 81       	ldd	r18, Y+7	; 0x07
    20ee:	38 85       	ldd	r19, Y+8	; 0x08
    20f0:	49 85       	ldd	r20, Y+9	; 0x09
    20f2:	5a 85       	ldd	r21, Y+10	; 0x0a
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    20fc:	da 01       	movw	r26, r20
    20fe:	c9 01       	movw	r24, r18
    2100:	90 95       	com	r25
    2102:	81 95       	neg	r24
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	90 93 2a 02 	sts	0x022A, r25
    210a:	80 93 29 02 	sts	0x0229, r24
				TIM_voidIni(TIM1);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	0e 94 9d 08 	call	0x113a	; 0x113a <TIM_voidIni>
				TIM_voidSetCountRegister(TIM1,TIM1_PreLoadCunts);
    2114:	20 91 29 02 	lds	r18, 0x0229
    2118:	30 91 2a 02 	lds	r19, 0x022A
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	b9 01       	movw	r22, r18
    2120:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <TIM_voidSetCountRegister>
				TIM_voidEnableIntterput(TOI1);
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <TIM_voidEnableIntterput>
				TIM1_ActionAsynchronou_ptr=pf;
    212a:	88 89       	ldd	r24, Y+16	; 0x10
    212c:	99 89       	ldd	r25, Y+17	; 0x11
    212e:	90 93 25 02 	sts	0x0225, r25
    2132:	80 93 24 02 	sts	0x0224, r24
				TIM_voidGetISR(TOI1,TIM1_ActionAsynchronou);
    2136:	24 e1       	ldi	r18, 0x14	; 20
    2138:	32 e1       	ldi	r19, 0x12	; 18
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	b9 01       	movw	r22, r18
    213e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <TIM_voidGetISR>
				TIM_voidStart(TIM1,TIMS_DIVISION_8);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	62 e0       	ldi	r22, 0x02	; 2
    2146:	0e 94 44 09 	call	0x1288	; 0x1288 <TIM_voidStart>
    214a:	76 c0       	rjmp	.+236    	; 0x2238 <TIM_voidMakeActionAsynchronous+0x348>
				break;
			case (TIM2):
				OverFlowTime=TickTime*TIM2_OVERFLOW_COUNTS;
    214c:	8f 81       	ldd	r24, Y+7	; 0x07
    214e:	98 85       	ldd	r25, Y+8	; 0x08
    2150:	a9 85       	ldd	r26, Y+9	; 0x09
    2152:	ba 85       	ldd	r27, Y+10	; 0x0a
    2154:	ba 2f       	mov	r27, r26
    2156:	a9 2f       	mov	r26, r25
    2158:	98 2f       	mov	r25, r24
    215a:	88 27       	eor	r24, r24
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	ab 83       	std	Y+3, r26	; 0x03
    2162:	bc 83       	std	Y+4, r27	; 0x04
				TIM2_OverFlowTimes=(copy_Delay_ms*1000)/OverFlowTime;
    2164:	8c 85       	ldd	r24, Y+12	; 0x0c
    2166:	9d 85       	ldd	r25, Y+13	; 0x0d
    2168:	ae 85       	ldd	r26, Y+14	; 0x0e
    216a:	bf 85       	ldd	r27, Y+15	; 0x0f
    216c:	28 ee       	ldi	r18, 0xE8	; 232
    216e:	33 e0       	ldi	r19, 0x03	; 3
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__mulsi3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	29 81       	ldd	r18, Y+1	; 0x01
    2182:	3a 81       	ldd	r19, Y+2	; 0x02
    2184:	4b 81       	ldd	r20, Y+3	; 0x03
    2186:	5c 81       	ldd	r21, Y+4	; 0x04
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    2190:	da 01       	movw	r26, r20
    2192:	c9 01       	movw	r24, r18
    2194:	80 93 34 02 	sts	0x0234, r24
    2198:	90 93 35 02 	sts	0x0235, r25
    219c:	a0 93 36 02 	sts	0x0236, r26
    21a0:	b0 93 37 02 	sts	0x0237, r27
				Drisredcounts=(copy_Delay_ms*1000)%OverFlowTime;
    21a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    21a8:	ae 85       	ldd	r26, Y+14	; 0x0e
    21aa:	bf 85       	ldd	r27, Y+15	; 0x0f
    21ac:	28 ee       	ldi	r18, 0xE8	; 232
    21ae:	33 e0       	ldi	r19, 0x03	; 3
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__mulsi3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	29 81       	ldd	r18, Y+1	; 0x01
    21c2:	3a 81       	ldd	r19, Y+2	; 0x02
    21c4:	4b 81       	ldd	r20, Y+3	; 0x03
    21c6:	5c 81       	ldd	r21, Y+4	; 0x04
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
				TIM2_PreLoadCunts=TIM2_OVERFLOW_COUNTS-(Drisredcounts/TickTime);
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	cc 01       	movw	r24, r24
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	2f 81       	ldd	r18, Y+7	; 0x07
    21e4:	38 85       	ldd	r19, Y+8	; 0x08
    21e6:	49 85       	ldd	r20, Y+9	; 0x09
    21e8:	5a 85       	ldd	r21, Y+10	; 0x0a
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    21f2:	da 01       	movw	r26, r20
    21f4:	c9 01       	movw	r24, r18
    21f6:	81 95       	neg	r24
    21f8:	80 93 2b 02 	sts	0x022B, r24
				TIM_voidIni(TIM2);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	0e 94 9d 08 	call	0x113a	; 0x113a <TIM_voidIni>
				TIM_voidSetCountRegister(TIM2,TIM2_PreLoadCunts);
    2202:	80 91 2b 02 	lds	r24, 0x022B
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	b9 01       	movw	r22, r18
    220e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <TIM_voidSetCountRegister>
				TIM_voidEnableIntterput(TOI2);
    2212:	86 e0       	ldi	r24, 0x06	; 6
    2214:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <TIM_voidEnableIntterput>
				TIM2_ActionAsynchronou_ptr=pf;
    2218:	88 89       	ldd	r24, Y+16	; 0x10
    221a:	99 89       	ldd	r25, Y+17	; 0x11
    221c:	90 93 27 02 	sts	0x0227, r25
    2220:	80 93 26 02 	sts	0x0226, r24
				TIM_voidGetISR(TOI2,TIM2_ActionAsynchronou);
    2224:	25 e6       	ldi	r18, 0x65	; 101
    2226:	32 e1       	ldi	r19, 0x12	; 18
    2228:	86 e0       	ldi	r24, 0x06	; 6
    222a:	b9 01       	movw	r22, r18
    222c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <TIM_voidGetISR>
				TIM_voidStart(TIM2,TIMS_DIVISION_1024);
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	67 e0       	ldi	r22, 0x07	; 7
    2234:	0e 94 44 09 	call	0x1288	; 0x1288 <TIM_voidStart>
				break;
			default:
				break;

			}
}
    2238:	63 96       	adiw	r28, 0x13	; 19
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <TIM_voidSetPWMDC>:
void TIM_voidSetPWMDC(TIMS_COMPERMATCH_T copy_TIMS_COMPERMATCH_T,f32 copy_DC){
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	27 97       	sbiw	r28, 0x07	; 7
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	4a 83       	std	Y+2, r20	; 0x02
    2262:	5b 83       	std	Y+3, r21	; 0x03
    2264:	6c 83       	std	Y+4, r22	; 0x04
    2266:	7d 83       	std	Y+5, r23	; 0x05

	switch(copy_TIMS_COMPERMATCH_T){
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	3f 83       	std	Y+7, r19	; 0x07
    2270:	2e 83       	std	Y+6, r18	; 0x06
    2272:	8e 81       	ldd	r24, Y+6	; 0x06
    2274:	9f 81       	ldd	r25, Y+7	; 0x07
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	91 05       	cpc	r25, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <TIM_voidSetPWMDC+0x34>
    227c:	7b c0       	rjmp	.+246    	; 0x2374 <TIM_voidSetPWMDC+0x12a>
    227e:	2e 81       	ldd	r18, Y+6	; 0x06
    2280:	3f 81       	ldd	r19, Y+7	; 0x07
    2282:	22 30       	cpi	r18, 0x02	; 2
    2284:	31 05       	cpc	r19, r1
    2286:	2c f4       	brge	.+10     	; 0x2292 <TIM_voidSetPWMDC+0x48>
    2288:	8e 81       	ldd	r24, Y+6	; 0x06
    228a:	9f 81       	ldd	r25, Y+7	; 0x07
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f0       	breq	.+26     	; 0x22aa <TIM_voidSetPWMDC+0x60>
    2290:	71 c0       	rjmp	.+226    	; 0x2374 <TIM_voidSetPWMDC+0x12a>
    2292:	2e 81       	ldd	r18, Y+6	; 0x06
    2294:	3f 81       	ldd	r19, Y+7	; 0x07
    2296:	22 30       	cpi	r18, 0x02	; 2
    2298:	31 05       	cpc	r19, r1
    229a:	49 f1       	breq	.+82     	; 0x22ee <TIM_voidSetPWMDC+0xa4>
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	83 30       	cpi	r24, 0x03	; 3
    22a2:	91 05       	cpc	r25, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <TIM_voidSetPWMDC+0x5e>
    22a6:	45 c0       	rjmp	.+138    	; 0x2332 <TIM_voidSetPWMDC+0xe8>
    22a8:	65 c0       	rjmp	.+202    	; 0x2374 <TIM_voidSetPWMDC+0x12a>
			case (OC0):
			#if((OC0_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)||(OC0_MODE==OC_CLEAR_UP_SET_DOWN))
				TIM_voidSetComperMatch(OC0,((copy_DC*TIM0_OVERFLOW_COUNTS)/100));
    22aa:	6a 81       	ldd	r22, Y+2	; 0x02
    22ac:	7b 81       	ldd	r23, Y+3	; 0x03
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	9d 81       	ldd	r25, Y+5	; 0x05
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	53 e4       	ldi	r21, 0x43	; 67
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	48 ec       	ldi	r20, 0xC8	; 200
    22cc:	52 e4       	ldi	r21, 0x42	; 66
    22ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9c 01       	movw	r18, r24
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <TIM_voidSetComperMatch>
    22ec:	43 c0       	rjmp	.+134    	; 0x2374 <TIM_voidSetPWMDC+0x12a>
				TIM_voidSetComperMatch(OC0,(TIM0_OVERFLOW_COUNTS-((copy_DC*TIM0_OVERFLOW_COUNTS)/100)));
			#endif
				break;
			case (OC1A):
			#if((OC1A_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)||(OC1A_MODE==OC_CLEAR_UP_SET_DOWN))
				TIM_voidSetComperMatch(OC1A,((copy_DC*TIMS_TOP_TIM1)/100));
    22ee:	6a 81       	ldd	r22, Y+2	; 0x02
    22f0:	7b 81       	ldd	r23, Y+3	; 0x03
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	9d 81       	ldd	r25, Y+5	; 0x05
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e4       	ldi	r19, 0x40	; 64
    22fa:	4c e9       	ldi	r20, 0x9C	; 156
    22fc:	56 e4       	ldi	r21, 0x46	; 70
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	48 ec       	ldi	r20, 0xC8	; 200
    2310:	52 e4       	ldi	r21, 0x42	; 66
    2312:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9c 01       	movw	r18, r24
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	b9 01       	movw	r22, r18
    232c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <TIM_voidSetComperMatch>
    2330:	21 c0       	rjmp	.+66     	; 0x2374 <TIM_voidSetPWMDC+0x12a>
				TIM_voidSetComperMatch(OC1B,(TIMS_TOP_TIM1-((copy_DC*TIMS_TOP_TIM1)/100)));
			#endif
				break;
			case (OC2):
			#if((OC2_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)||(OC2_MODE==OC_CLEAR_UP_SET_DOWN))
				TIM_voidSetComperMatch(OC2,((copy_DC*TIM2_OVERFLOW_COUNTS)/100));
    2332:	6a 81       	ldd	r22, Y+2	; 0x02
    2334:	7b 81       	ldd	r23, Y+3	; 0x03
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	9d 81       	ldd	r25, Y+5	; 0x05
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	53 e4       	ldi	r21, 0x43	; 67
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	48 ec       	ldi	r20, 0xC8	; 200
    2354:	52 e4       	ldi	r21, 0x42	; 66
    2356:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9c 01       	movw	r18, r24
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	b9 01       	movw	r22, r18
    2370:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <TIM_voidSetComperMatch>
			default:
				break;

			}

}
    2374:	27 96       	adiw	r28, 0x07	; 7
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <TIM0_ActionAsynchronou>:
static void TIM0_ActionAsynchronou(void){
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
	u32 static counter=0;
	if (counter==TIM0_OverFlowTimes+1){
    238e:	80 91 2c 02 	lds	r24, 0x022C
    2392:	90 91 2d 02 	lds	r25, 0x022D
    2396:	a0 91 2e 02 	lds	r26, 0x022E
    239a:	b0 91 2f 02 	lds	r27, 0x022F
    239e:	9c 01       	movw	r18, r24
    23a0:	ad 01       	movw	r20, r26
    23a2:	2f 5f       	subi	r18, 0xFF	; 255
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	4f 4f       	sbci	r20, 0xFF	; 255
    23a8:	5f 4f       	sbci	r21, 0xFF	; 255
    23aa:	80 91 38 02 	lds	r24, 0x0238
    23ae:	90 91 39 02 	lds	r25, 0x0239
    23b2:	a0 91 3a 02 	lds	r26, 0x023A
    23b6:	b0 91 3b 02 	lds	r27, 0x023B
    23ba:	28 17       	cp	r18, r24
    23bc:	39 07       	cpc	r19, r25
    23be:	4a 07       	cpc	r20, r26
    23c0:	5b 07       	cpc	r21, r27
    23c2:	e1 f4       	brne	.+56     	; 0x23fc <TIM0_ActionAsynchronou+0x76>
		if(TIM0_ActionAsynchronou_ptr!=NULL){
    23c4:	80 91 22 02 	lds	r24, 0x0222
    23c8:	90 91 23 02 	lds	r25, 0x0223
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f0       	breq	.+26     	; 0x23ea <TIM0_ActionAsynchronou+0x64>
			TIM_voidSetCountRegister(TIM0,TIM0_PreLoadCunts);
    23d0:	80 91 28 02 	lds	r24, 0x0228
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	b9 01       	movw	r22, r18
    23dc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <TIM_voidSetCountRegister>
			TIM0_ActionAsynchronou_ptr();
    23e0:	e0 91 22 02 	lds	r30, 0x0222
    23e4:	f0 91 23 02 	lds	r31, 0x0223
    23e8:	09 95       	icall
		}
		counter=0;
    23ea:	10 92 38 02 	sts	0x0238, r1
    23ee:	10 92 39 02 	sts	0x0239, r1
    23f2:	10 92 3a 02 	sts	0x023A, r1
    23f6:	10 92 3b 02 	sts	0x023B, r1
    23fa:	13 c0       	rjmp	.+38     	; 0x2422 <TIM0_ActionAsynchronou+0x9c>
	}
	else{
	counter++;
    23fc:	80 91 38 02 	lds	r24, 0x0238
    2400:	90 91 39 02 	lds	r25, 0x0239
    2404:	a0 91 3a 02 	lds	r26, 0x023A
    2408:	b0 91 3b 02 	lds	r27, 0x023B
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	a1 1d       	adc	r26, r1
    2410:	b1 1d       	adc	r27, r1
    2412:	80 93 38 02 	sts	0x0238, r24
    2416:	90 93 39 02 	sts	0x0239, r25
    241a:	a0 93 3a 02 	sts	0x023A, r26
    241e:	b0 93 3b 02 	sts	0x023B, r27
	}
}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <TIM1_ActionAsynchronou>:
static void TIM1_ActionAsynchronou(void){
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	u32 static counter=0;
	if (counter==TIM1_OverFlowTimes+1){
    2430:	80 91 30 02 	lds	r24, 0x0230
    2434:	90 91 31 02 	lds	r25, 0x0231
    2438:	a0 91 32 02 	lds	r26, 0x0232
    243c:	b0 91 33 02 	lds	r27, 0x0233
    2440:	9c 01       	movw	r18, r24
    2442:	ad 01       	movw	r20, r26
    2444:	2f 5f       	subi	r18, 0xFF	; 255
    2446:	3f 4f       	sbci	r19, 0xFF	; 255
    2448:	4f 4f       	sbci	r20, 0xFF	; 255
    244a:	5f 4f       	sbci	r21, 0xFF	; 255
    244c:	80 91 3c 02 	lds	r24, 0x023C
    2450:	90 91 3d 02 	lds	r25, 0x023D
    2454:	a0 91 3e 02 	lds	r26, 0x023E
    2458:	b0 91 3f 02 	lds	r27, 0x023F
    245c:	28 17       	cp	r18, r24
    245e:	39 07       	cpc	r19, r25
    2460:	4a 07       	cpc	r20, r26
    2462:	5b 07       	cpc	r21, r27
    2464:	e1 f4       	brne	.+56     	; 0x249e <TIM1_ActionAsynchronou+0x76>
		if(TIM1_ActionAsynchronou_ptr!=NULL){
    2466:	80 91 24 02 	lds	r24, 0x0224
    246a:	90 91 25 02 	lds	r25, 0x0225
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f0       	breq	.+26     	; 0x248c <TIM1_ActionAsynchronou+0x64>
			TIM_voidSetCountRegister(TIM1,TIM1_PreLoadCunts);
    2472:	20 91 29 02 	lds	r18, 0x0229
    2476:	30 91 2a 02 	lds	r19, 0x022A
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	b9 01       	movw	r22, r18
    247e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <TIM_voidSetCountRegister>
			TIM1_ActionAsynchronou_ptr();
    2482:	e0 91 24 02 	lds	r30, 0x0224
    2486:	f0 91 25 02 	lds	r31, 0x0225
    248a:	09 95       	icall

		}
		counter=0;
    248c:	10 92 3c 02 	sts	0x023C, r1
    2490:	10 92 3d 02 	sts	0x023D, r1
    2494:	10 92 3e 02 	sts	0x023E, r1
    2498:	10 92 3f 02 	sts	0x023F, r1
    249c:	13 c0       	rjmp	.+38     	; 0x24c4 <TIM1_ActionAsynchronou+0x9c>
	}
	else{
		counter++;
    249e:	80 91 3c 02 	lds	r24, 0x023C
    24a2:	90 91 3d 02 	lds	r25, 0x023D
    24a6:	a0 91 3e 02 	lds	r26, 0x023E
    24aa:	b0 91 3f 02 	lds	r27, 0x023F
    24ae:	01 96       	adiw	r24, 0x01	; 1
    24b0:	a1 1d       	adc	r26, r1
    24b2:	b1 1d       	adc	r27, r1
    24b4:	80 93 3c 02 	sts	0x023C, r24
    24b8:	90 93 3d 02 	sts	0x023D, r25
    24bc:	a0 93 3e 02 	sts	0x023E, r26
    24c0:	b0 93 3f 02 	sts	0x023F, r27
		}
}
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <TIM2_ActionAsynchronou>:
static void TIM2_ActionAsynchronou(void){
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
	u32 static counter=0;
	if (counter==TIM2_OverFlowTimes+1){
    24d2:	80 91 34 02 	lds	r24, 0x0234
    24d6:	90 91 35 02 	lds	r25, 0x0235
    24da:	a0 91 36 02 	lds	r26, 0x0236
    24de:	b0 91 37 02 	lds	r27, 0x0237
    24e2:	9c 01       	movw	r18, r24
    24e4:	ad 01       	movw	r20, r26
    24e6:	2f 5f       	subi	r18, 0xFF	; 255
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	4f 4f       	sbci	r20, 0xFF	; 255
    24ec:	5f 4f       	sbci	r21, 0xFF	; 255
    24ee:	80 91 40 02 	lds	r24, 0x0240
    24f2:	90 91 41 02 	lds	r25, 0x0241
    24f6:	a0 91 42 02 	lds	r26, 0x0242
    24fa:	b0 91 43 02 	lds	r27, 0x0243
    24fe:	28 17       	cp	r18, r24
    2500:	39 07       	cpc	r19, r25
    2502:	4a 07       	cpc	r20, r26
    2504:	5b 07       	cpc	r21, r27
    2506:	e1 f4       	brne	.+56     	; 0x2540 <TIM2_ActionAsynchronou+0x76>
		if(TIM2_ActionAsynchronou_ptr!=NULL){
    2508:	80 91 26 02 	lds	r24, 0x0226
    250c:	90 91 27 02 	lds	r25, 0x0227
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f0       	breq	.+26     	; 0x252e <TIM2_ActionAsynchronou+0x64>
			TIM_voidSetCountRegister(TIM2,TIM2_PreLoadCunts);
    2514:	80 91 2b 02 	lds	r24, 0x022B
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	b9 01       	movw	r22, r18
    2520:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <TIM_voidSetCountRegister>
			TIM2_ActionAsynchronou_ptr();
    2524:	e0 91 26 02 	lds	r30, 0x0226
    2528:	f0 91 27 02 	lds	r31, 0x0227
    252c:	09 95       	icall
		}
	counter=0;
    252e:	10 92 40 02 	sts	0x0240, r1
    2532:	10 92 41 02 	sts	0x0241, r1
    2536:	10 92 42 02 	sts	0x0242, r1
    253a:	10 92 43 02 	sts	0x0243, r1
    253e:	13 c0       	rjmp	.+38     	; 0x2566 <TIM2_ActionAsynchronou+0x9c>
	}
	else{
		counter++;
    2540:	80 91 40 02 	lds	r24, 0x0240
    2544:	90 91 41 02 	lds	r25, 0x0241
    2548:	a0 91 42 02 	lds	r26, 0x0242
    254c:	b0 91 43 02 	lds	r27, 0x0243
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	a1 1d       	adc	r26, r1
    2554:	b1 1d       	adc	r27, r1
    2556:	80 93 40 02 	sts	0x0240, r24
    255a:	90 93 41 02 	sts	0x0241, r25
    255e:	a0 93 42 02 	sts	0x0242, r26
    2562:	b0 93 43 02 	sts	0x0243, r27
		}
}
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void){
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
if(TIMER2_COMP_pf!=NULL){
    2596:	80 91 12 02 	lds	r24, 0x0212
    259a:	90 91 13 02 	lds	r25, 0x0213
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	29 f0       	breq	.+10     	; 0x25ac <__vector_4+0x40>
	TIMER2_COMP_pf();
    25a2:	e0 91 12 02 	lds	r30, 0x0212
    25a6:	f0 91 13 02 	lds	r31, 0x0213
    25aa:	09 95       	icall
}
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	7f 91       	pop	r23
    25be:	6f 91       	pop	r22
    25c0:	5f 91       	pop	r21
    25c2:	4f 91       	pop	r20
    25c4:	3f 91       	pop	r19
    25c6:	2f 91       	pop	r18
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f 90       	pop	r0
    25ce:	1f 90       	pop	r1
    25d0:	18 95       	reti

000025d2 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void){
    25d2:	1f 92       	push	r1
    25d4:	0f 92       	push	r0
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	0f 92       	push	r0
    25da:	11 24       	eor	r1, r1
    25dc:	2f 93       	push	r18
    25de:	3f 93       	push	r19
    25e0:	4f 93       	push	r20
    25e2:	5f 93       	push	r21
    25e4:	6f 93       	push	r22
    25e6:	7f 93       	push	r23
    25e8:	8f 93       	push	r24
    25ea:	9f 93       	push	r25
    25ec:	af 93       	push	r26
    25ee:	bf 93       	push	r27
    25f0:	ef 93       	push	r30
    25f2:	ff 93       	push	r31
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_OVF_pf!=NULL){
    25fc:	80 91 14 02 	lds	r24, 0x0214
    2600:	90 91 15 02 	lds	r25, 0x0215
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	29 f0       	breq	.+10     	; 0x2612 <__vector_5+0x40>
		TIMER2_OVF_pf();
    2608:	e0 91 14 02 	lds	r30, 0x0214
    260c:	f0 91 15 02 	lds	r31, 0x0215
    2610:	09 95       	icall
	}
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	ff 91       	pop	r31
    2618:	ef 91       	pop	r30
    261a:	bf 91       	pop	r27
    261c:	af 91       	pop	r26
    261e:	9f 91       	pop	r25
    2620:	8f 91       	pop	r24
    2622:	7f 91       	pop	r23
    2624:	6f 91       	pop	r22
    2626:	5f 91       	pop	r21
    2628:	4f 91       	pop	r20
    262a:	3f 91       	pop	r19
    262c:	2f 91       	pop	r18
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <__vector_6>:
void __vector_6(void) __attribute__((signal));
void __vector_6(void){
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	2f 93       	push	r18
    2644:	3f 93       	push	r19
    2646:	4f 93       	push	r20
    2648:	5f 93       	push	r21
    264a:	6f 93       	push	r22
    264c:	7f 93       	push	r23
    264e:	8f 93       	push	r24
    2650:	9f 93       	push	r25
    2652:	af 93       	push	r26
    2654:	bf 93       	push	r27
    2656:	ef 93       	push	r30
    2658:	ff 93       	push	r31
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_CAPT_pf!=NULL){
    2662:	80 91 16 02 	lds	r24, 0x0216
    2666:	90 91 17 02 	lds	r25, 0x0217
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	29 f0       	breq	.+10     	; 0x2678 <__vector_6+0x40>
		TIMER1_CAPT_pf();
    266e:	e0 91 16 02 	lds	r30, 0x0216
    2672:	f0 91 17 02 	lds	r31, 0x0217
    2676:	09 95       	icall
	}
}
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	ff 91       	pop	r31
    267e:	ef 91       	pop	r30
    2680:	bf 91       	pop	r27
    2682:	af 91       	pop	r26
    2684:	9f 91       	pop	r25
    2686:	8f 91       	pop	r24
    2688:	7f 91       	pop	r23
    268a:	6f 91       	pop	r22
    268c:	5f 91       	pop	r21
    268e:	4f 91       	pop	r20
    2690:	3f 91       	pop	r19
    2692:	2f 91       	pop	r18
    2694:	0f 90       	pop	r0
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	0f 90       	pop	r0
    269a:	1f 90       	pop	r1
    269c:	18 95       	reti

0000269e <__vector_7>:
void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    269e:	1f 92       	push	r1
    26a0:	0f 92       	push	r0
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	0f 92       	push	r0
    26a6:	11 24       	eor	r1, r1
    26a8:	2f 93       	push	r18
    26aa:	3f 93       	push	r19
    26ac:	4f 93       	push	r20
    26ae:	5f 93       	push	r21
    26b0:	6f 93       	push	r22
    26b2:	7f 93       	push	r23
    26b4:	8f 93       	push	r24
    26b6:	9f 93       	push	r25
    26b8:	af 93       	push	r26
    26ba:	bf 93       	push	r27
    26bc:	ef 93       	push	r30
    26be:	ff 93       	push	r31
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_COMPA_pf!=NULL){
    26c8:	80 91 18 02 	lds	r24, 0x0218
    26cc:	90 91 19 02 	lds	r25, 0x0219
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	29 f0       	breq	.+10     	; 0x26de <__vector_7+0x40>
		TIMER1_COMPA_pf();
    26d4:	e0 91 18 02 	lds	r30, 0x0218
    26d8:	f0 91 19 02 	lds	r31, 0x0219
    26dc:	09 95       	icall
	}
}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	ff 91       	pop	r31
    26e4:	ef 91       	pop	r30
    26e6:	bf 91       	pop	r27
    26e8:	af 91       	pop	r26
    26ea:	9f 91       	pop	r25
    26ec:	8f 91       	pop	r24
    26ee:	7f 91       	pop	r23
    26f0:	6f 91       	pop	r22
    26f2:	5f 91       	pop	r21
    26f4:	4f 91       	pop	r20
    26f6:	3f 91       	pop	r19
    26f8:	2f 91       	pop	r18
    26fa:	0f 90       	pop	r0
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	0f 90       	pop	r0
    2700:	1f 90       	pop	r1
    2702:	18 95       	reti

00002704 <__vector_8>:
void __vector_8(void) __attribute__((signal));
void __vector_8(void){
    2704:	1f 92       	push	r1
    2706:	0f 92       	push	r0
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	0f 92       	push	r0
    270c:	11 24       	eor	r1, r1
    270e:	2f 93       	push	r18
    2710:	3f 93       	push	r19
    2712:	4f 93       	push	r20
    2714:	5f 93       	push	r21
    2716:	6f 93       	push	r22
    2718:	7f 93       	push	r23
    271a:	8f 93       	push	r24
    271c:	9f 93       	push	r25
    271e:	af 93       	push	r26
    2720:	bf 93       	push	r27
    2722:	ef 93       	push	r30
    2724:	ff 93       	push	r31
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_COMPB_pf!=NULL){
    272e:	80 91 1a 02 	lds	r24, 0x021A
    2732:	90 91 1b 02 	lds	r25, 0x021B
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	29 f0       	breq	.+10     	; 0x2744 <__vector_8+0x40>
		TIMER1_COMPB_pf();
    273a:	e0 91 1a 02 	lds	r30, 0x021A
    273e:	f0 91 1b 02 	lds	r31, 0x021B
    2742:	09 95       	icall
	}
}
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	ff 91       	pop	r31
    274a:	ef 91       	pop	r30
    274c:	bf 91       	pop	r27
    274e:	af 91       	pop	r26
    2750:	9f 91       	pop	r25
    2752:	8f 91       	pop	r24
    2754:	7f 91       	pop	r23
    2756:	6f 91       	pop	r22
    2758:	5f 91       	pop	r21
    275a:	4f 91       	pop	r20
    275c:	3f 91       	pop	r19
    275e:	2f 91       	pop	r18
    2760:	0f 90       	pop	r0
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	0f 90       	pop	r0
    2766:	1f 90       	pop	r1
    2768:	18 95       	reti

0000276a <__vector_9>:
void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    276a:	1f 92       	push	r1
    276c:	0f 92       	push	r0
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	0f 92       	push	r0
    2772:	11 24       	eor	r1, r1
    2774:	2f 93       	push	r18
    2776:	3f 93       	push	r19
    2778:	4f 93       	push	r20
    277a:	5f 93       	push	r21
    277c:	6f 93       	push	r22
    277e:	7f 93       	push	r23
    2780:	8f 93       	push	r24
    2782:	9f 93       	push	r25
    2784:	af 93       	push	r26
    2786:	bf 93       	push	r27
    2788:	ef 93       	push	r30
    278a:	ff 93       	push	r31
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_OVF_pf!=NULL){
    2794:	80 91 1c 02 	lds	r24, 0x021C
    2798:	90 91 1d 02 	lds	r25, 0x021D
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	29 f0       	breq	.+10     	; 0x27aa <__vector_9+0x40>
		TIMER1_OVF_pf();
    27a0:	e0 91 1c 02 	lds	r30, 0x021C
    27a4:	f0 91 1d 02 	lds	r31, 0x021D
    27a8:	09 95       	icall
	}
}
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	ff 91       	pop	r31
    27b0:	ef 91       	pop	r30
    27b2:	bf 91       	pop	r27
    27b4:	af 91       	pop	r26
    27b6:	9f 91       	pop	r25
    27b8:	8f 91       	pop	r24
    27ba:	7f 91       	pop	r23
    27bc:	6f 91       	pop	r22
    27be:	5f 91       	pop	r21
    27c0:	4f 91       	pop	r20
    27c2:	3f 91       	pop	r19
    27c4:	2f 91       	pop	r18
    27c6:	0f 90       	pop	r0
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	0f 90       	pop	r0
    27cc:	1f 90       	pop	r1
    27ce:	18 95       	reti

000027d0 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    27d0:	1f 92       	push	r1
    27d2:	0f 92       	push	r0
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	0f 92       	push	r0
    27d8:	11 24       	eor	r1, r1
    27da:	2f 93       	push	r18
    27dc:	3f 93       	push	r19
    27de:	4f 93       	push	r20
    27e0:	5f 93       	push	r21
    27e2:	6f 93       	push	r22
    27e4:	7f 93       	push	r23
    27e6:	8f 93       	push	r24
    27e8:	9f 93       	push	r25
    27ea:	af 93       	push	r26
    27ec:	bf 93       	push	r27
    27ee:	ef 93       	push	r30
    27f0:	ff 93       	push	r31
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_COMP_pf!=NULL){
    27fa:	80 91 1e 02 	lds	r24, 0x021E
    27fe:	90 91 1f 02 	lds	r25, 0x021F
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	29 f0       	breq	.+10     	; 0x2810 <__vector_10+0x40>
		TIMER0_COMP_pf();
    2806:	e0 91 1e 02 	lds	r30, 0x021E
    280a:	f0 91 1f 02 	lds	r31, 0x021F
    280e:	09 95       	icall
	}
}
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	ff 91       	pop	r31
    2816:	ef 91       	pop	r30
    2818:	bf 91       	pop	r27
    281a:	af 91       	pop	r26
    281c:	9f 91       	pop	r25
    281e:	8f 91       	pop	r24
    2820:	7f 91       	pop	r23
    2822:	6f 91       	pop	r22
    2824:	5f 91       	pop	r21
    2826:	4f 91       	pop	r20
    2828:	3f 91       	pop	r19
    282a:	2f 91       	pop	r18
    282c:	0f 90       	pop	r0
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	0f 90       	pop	r0
    2832:	1f 90       	pop	r1
    2834:	18 95       	reti

00002836 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    2836:	1f 92       	push	r1
    2838:	0f 92       	push	r0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	0f 92       	push	r0
    283e:	11 24       	eor	r1, r1
    2840:	2f 93       	push	r18
    2842:	3f 93       	push	r19
    2844:	4f 93       	push	r20
    2846:	5f 93       	push	r21
    2848:	6f 93       	push	r22
    284a:	7f 93       	push	r23
    284c:	8f 93       	push	r24
    284e:	9f 93       	push	r25
    2850:	af 93       	push	r26
    2852:	bf 93       	push	r27
    2854:	ef 93       	push	r30
    2856:	ff 93       	push	r31
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVF_pf!=NULL){
    2860:	80 91 20 02 	lds	r24, 0x0220
    2864:	90 91 21 02 	lds	r25, 0x0221
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	29 f0       	breq	.+10     	; 0x2876 <__vector_11+0x40>
		TIMER0_OVF_pf();
    286c:	e0 91 20 02 	lds	r30, 0x0220
    2870:	f0 91 21 02 	lds	r31, 0x0221
    2874:	09 95       	icall
	}
}
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	ff 91       	pop	r31
    287c:	ef 91       	pop	r30
    287e:	bf 91       	pop	r27
    2880:	af 91       	pop	r26
    2882:	9f 91       	pop	r25
    2884:	8f 91       	pop	r24
    2886:	7f 91       	pop	r23
    2888:	6f 91       	pop	r22
    288a:	5f 91       	pop	r21
    288c:	4f 91       	pop	r20
    288e:	3f 91       	pop	r19
    2890:	2f 91       	pop	r18
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	0f 90       	pop	r0
    2898:	1f 90       	pop	r1
    289a:	18 95       	reti

0000289c <DIO_voidIniPins>:

#include	"../../00-LIB/LSTD_types.h"
#include	"DIO_interface.h"

void 	DIO_voidIniPins			(DIO_T * DIOx,u8 copy_u8PinsID,u8 copy_u8State){
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <DIO_voidIniPins+0x6>
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <DIO_voidIniPins+0x8>
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	9a 83       	std	Y+2, r25	; 0x02
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	6b 83       	std	Y+3, r22	; 0x03
    28ae:	4c 83       	std	Y+4, r20	; 0x04
	DIOx->DDR	&= ~(copy_u8PinsID);
    28b0:	e9 81       	ldd	r30, Y+1	; 0x01
    28b2:	fa 81       	ldd	r31, Y+2	; 0x02
    28b4:	81 81       	ldd	r24, Z+1	; 0x01
    28b6:	98 2f       	mov	r25, r24
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	80 95       	com	r24
    28bc:	89 23       	and	r24, r25
    28be:	e9 81       	ldd	r30, Y+1	; 0x01
    28c0:	fa 81       	ldd	r31, Y+2	; 0x02
    28c2:	81 83       	std	Z+1, r24	; 0x01
	DIOx->DDR	|=	(copy_u8PinsID & copy_u8State);
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	21 81       	ldd	r18, Z+1	; 0x01
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	8c 81       	ldd	r24, Y+4	; 0x04
    28ce:	89 23       	and	r24, r25
    28d0:	82 2b       	or	r24, r18
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	81 83       	std	Z+1, r24	; 0x01
}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <DIO_voidSetPinsValue>:
void 	DIO_voidSetPinsValue	(DIO_T * DIOx,u8 copy_u8PinsID,u8 copy_u8Value){
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <DIO_voidSetPinsValue+0x6>
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <DIO_voidSetPinsValue+0x8>
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	6b 83       	std	Y+3, r22	; 0x03
    28f8:	4c 83       	std	Y+4, r20	; 0x04
	DIOx->PORT	&= ~(copy_u8PinsID);
    28fa:	e9 81       	ldd	r30, Y+1	; 0x01
    28fc:	fa 81       	ldd	r31, Y+2	; 0x02
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	98 2f       	mov	r25, r24
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	80 95       	com	r24
    2906:	89 23       	and	r24, r25
    2908:	e9 81       	ldd	r30, Y+1	; 0x01
    290a:	fa 81       	ldd	r31, Y+2	; 0x02
    290c:	82 83       	std	Z+2, r24	; 0x02
	DIOx->PORT	|=	(copy_u8PinsID & copy_u8Value);
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	22 81       	ldd	r18, Z+2	; 0x02
    2914:	9b 81       	ldd	r25, Y+3	; 0x03
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
    2918:	89 23       	and	r24, r25
    291a:	82 2b       	or	r24, r18
    291c:	e9 81       	ldd	r30, Y+1	; 0x01
    291e:	fa 81       	ldd	r31, Y+2	; 0x02
    2920:	82 83       	std	Z+2, r24	; 0x02
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <DIO_u8GetPinsValue>:
u8 		DIO_u8GetPinsValue		(DIO_T * DIOx,u8 copy_u8PinsID){
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <DIO_u8GetPinsValue+0x6>
    2936:	0f 92       	push	r0
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	6b 83       	std	Y+3, r22	; 0x03
	return (DIOx->PIN	& copy_u8PinsID);
    2942:	e9 81       	ldd	r30, Y+1	; 0x01
    2944:	fa 81       	ldd	r31, Y+2	; 0x02
    2946:	90 81       	ld	r25, Z
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	89 23       	and	r24, r25
}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <DIO_voidTogglePins>:
void 	DIO_voidTogglePins		(DIO_T * DIOx,u8 copy_u8PinsID){
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	00 d0       	rcall	.+0      	; 0x295e <DIO_voidTogglePins+0x6>
    295e:	0f 92       	push	r0
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	6b 83       	std	Y+3, r22	; 0x03
	DIOx->PORT ^= copy_u8PinsID;
    296a:	e9 81       	ldd	r30, Y+1	; 0x01
    296c:	fa 81       	ldd	r31, Y+2	; 0x02
    296e:	92 81       	ldd	r25, Z+2	; 0x02
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	89 27       	eor	r24, r25
    2974:	e9 81       	ldd	r30, Y+1	; 0x01
    2976:	fa 81       	ldd	r31, Y+2	; 0x02
    2978:	82 83       	std	Z+2, r24	; 0x02
}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <DIO_voidSetPortValue>:
void 	DIO_voidSetPortValue	(DIO_T * DIOx,u8 copy_u8PortValue){
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	00 d0       	rcall	.+0      	; 0x298c <DIO_voidSetPortValue+0x6>
    298c:	0f 92       	push	r0
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	6b 83       	std	Y+3, r22	; 0x03
	DIOx->PORT=copy_u8PortValue;
    2998:	e9 81       	ldd	r30, Y+1	; 0x01
    299a:	fa 81       	ldd	r31, Y+2	; 0x02
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	82 83       	std	Z+2, r24	; 0x02
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <Servo_voidini>:
#include "../../03-MCAL/TIM/TIM_interface.h"
#include <avr/io.h>
#include "servo.h"


void Servo_voidini(void){
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
	TIM_voidIni(TIM1);
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	0e 94 9d 08 	call	0x113a	; 0x113a <TIM_voidIni>
	TIM_voidSetComperMatch(ICR,20000);
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	60 e2       	ldi	r22, 0x20	; 32
    29be:	7e e4       	ldi	r23, 0x4E	; 78
    29c0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <TIM_voidSetComperMatch>
	TIM_voidStart(TIM1,TIMS_DIVISION_8);
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	62 e0       	ldi	r22, 0x02	; 2
    29c8:	0e 94 44 09 	call	0x1288	; 0x1288 <TIM_voidStart>
	DDRD|=0x20;
    29cc:	a1 e3       	ldi	r26, 0x31	; 49
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e1 e3       	ldi	r30, 0x31	; 49
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	80 62       	ori	r24, 0x20	; 32
    29d8:	8c 93       	st	X, r24

}
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <Servo_voidMoveToLoction>:
void Servo_voidMoveToLoction(u8 copy_u8Loction){
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <Servo_voidMoveToLoction+0x6>
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <Servo_voidMoveToLoction+0x8>
    29e8:	0f 92       	push	r0
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	8d 83       	std	Y+5, r24	; 0x05
	f32 local_f32DC= (((f32)copy_u8Loction/180)*7.5)+5;
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e0       	ldi	r26, 0x00	; 0
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	44 e3       	ldi	r20, 0x34	; 52
    2a10:	53 e4       	ldi	r21, 0x43	; 67
    2a12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 ef       	ldi	r20, 0xF0	; 240
    2a24:	50 e4       	ldi	r21, 0x40	; 64
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 ea       	ldi	r20, 0xA0	; 160
    2a38:	50 e4       	ldi	r21, 0x40	; 64
    2a3a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	ab 83       	std	Y+3, r26	; 0x03
    2a48:	bc 83       	std	Y+4, r27	; 0x04
	if(copy_u8Loction>=0 &&copy_u8Loction<=180){
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	85 3b       	cpi	r24, 0xB5	; 181
    2a4e:	48 f4       	brcc	.+18     	; 0x2a62 <Servo_voidMoveToLoction+0x82>
		TIM_voidSetPWMDC(OC1A,local_f32DC);
    2a50:	29 81       	ldd	r18, Y+1	; 0x01
    2a52:	3a 81       	ldd	r19, Y+2	; 0x02
    2a54:	4b 81       	ldd	r20, Y+3	; 0x03
    2a56:	5c 81       	ldd	r21, Y+4	; 0x04
    2a58:	82 e0       	ldi	r24, 0x02	; 2
    2a5a:	ba 01       	movw	r22, r20
    2a5c:	a9 01       	movw	r20, r18
    2a5e:	0e 94 25 11 	call	0x224a	; 0x224a <TIM_voidSetPWMDC>
	}

}
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <LCD_voidSendData>:
#include <avr/delay.h>

#include "LCD.h"


void LCD_voidSendData(u8 copy_u8Data){
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	6d 97       	sbiw	r28, 0x1d	; 29
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	8d 8f       	std	Y+29, r24	; 0x1d
	//send data make RS_PIN=1
	SET_BIT(LCD_Control_Port,LCD_RS_PIN);
    2a88:	a8 e3       	ldi	r26, 0x38	; 56
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e8 e3       	ldi	r30, 0x38	; 56
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	80 62       	ori	r24, 0x20	; 32
    2a94:	8c 93       	st	X, r24
	//write RW=0
	CLR_BIT(LCD_Control_Port,LCD_RW_PIN);
    2a96:	a8 e3       	ldi	r26, 0x38	; 56
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e8 e3       	ldi	r30, 0x38	; 56
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 7b       	andi	r24, 0xBF	; 191
    2aa2:	8c 93       	st	X, r24
	//enable => high
	SET_BIT(LCD_Control_Port,LCD_E_PIN);
    2aa4:	a8 e3       	ldi	r26, 0x38	; 56
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e8 e3       	ldi	r30, 0x38	; 56
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	80 68       	ori	r24, 0x80	; 128
    2ab0:	8c 93       	st	X, r24
	LCD_Data_Port=copy_u8Data;
    2ab2:	eb e3       	ldi	r30, 0x3B	; 59
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ab8:	80 83       	st	Z, r24
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e8       	ldi	r26, 0x80	; 128
    2ac0:	bf e3       	ldi	r27, 0x3F	; 63
    2ac2:	89 8f       	std	Y+25, r24	; 0x19
    2ac4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ac8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	69 8d       	ldd	r22, Y+25	; 0x19
    2acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	4a ef       	ldi	r20, 0xFA	; 250
    2ad8:	54 e4       	ldi	r21, 0x44	; 68
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8d 8b       	std	Y+21, r24	; 0x15
    2ae4:	9e 8b       	std	Y+22, r25	; 0x16
    2ae6:	af 8b       	std	Y+23, r26	; 0x17
    2ae8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aea:	6d 89       	ldd	r22, Y+21	; 0x15
    2aec:	7e 89       	ldd	r23, Y+22	; 0x16
    2aee:	8f 89       	ldd	r24, Y+23	; 0x17
    2af0:	98 8d       	ldd	r25, Y+24	; 0x18
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	2c f4       	brge	.+10     	; 0x2b0c <LCD_voidSendData+0x9a>
		__ticks = 1;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9c 8b       	std	Y+20, r25	; 0x14
    2b08:	8b 8b       	std	Y+19, r24	; 0x13
    2b0a:	3f c0       	rjmp	.+126    	; 0x2b8a <LCD_voidSendData+0x118>
	else if (__tmp > 65535)
    2b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b10:	8f 89       	ldd	r24, Y+23	; 0x17
    2b12:	98 8d       	ldd	r25, Y+24	; 0x18
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	3f ef       	ldi	r19, 0xFF	; 255
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	57 e4       	ldi	r21, 0x47	; 71
    2b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	4c f5       	brge	.+82     	; 0x2b76 <LCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b24:	69 8d       	ldd	r22, Y+25	; 0x19
    2b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e2       	ldi	r20, 0x20	; 32
    2b32:	51 e4       	ldi	r21, 0x41	; 65
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9c 8b       	std	Y+20, r25	; 0x14
    2b4a:	8b 8b       	std	Y+19, r24	; 0x13
    2b4c:	0f c0       	rjmp	.+30     	; 0x2b6c <LCD_voidSendData+0xfa>
    2b4e:	88 ec       	ldi	r24, 0xC8	; 200
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9a 8b       	std	Y+18, r25	; 0x12
    2b54:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b56:	89 89       	ldd	r24, Y+17	; 0x11
    2b58:	9a 89       	ldd	r25, Y+18	; 0x12
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_voidSendData+0xe8>
    2b5e:	9a 8b       	std	Y+18, r25	; 0x12
    2b60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b62:	8b 89       	ldd	r24, Y+19	; 0x13
    2b64:	9c 89       	ldd	r25, Y+20	; 0x14
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	9c 8b       	std	Y+20, r25	; 0x14
    2b6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	69 f7       	brne	.-38     	; 0x2b4e <LCD_voidSendData+0xdc>
    2b74:	14 c0       	rjmp	.+40     	; 0x2b9e <LCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b76:	6d 89       	ldd	r22, Y+21	; 0x15
    2b78:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9c 8b       	std	Y+20, r25	; 0x14
    2b88:	8b 8b       	std	Y+19, r24	; 0x13
    2b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8e:	98 8b       	std	Y+16, r25	; 0x10
    2b90:	8f 87       	std	Y+15, r24	; 0x0f
    2b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b94:	98 89       	ldd	r25, Y+16	; 0x10
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_voidSendData+0x124>
    2b9a:	98 8b       	std	Y+16, r25	; 0x10
    2b9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	//enable => LOW (Caputre Data)
	CLR_BIT(LCD_Control_Port,LCD_E_PIN);
    2b9e:	a8 e3       	ldi	r26, 0x38	; 56
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e8 e3       	ldi	r30, 0x38	; 56
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8f 77       	andi	r24, 0x7F	; 127
    2baa:	8c 93       	st	X, r24
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e8       	ldi	r26, 0x80	; 128
    2bb2:	bf e3       	ldi	r27, 0x3F	; 63
    2bb4:	8b 87       	std	Y+11, r24	; 0x0b
    2bb6:	9c 87       	std	Y+12, r25	; 0x0c
    2bb8:	ad 87       	std	Y+13, r26	; 0x0d
    2bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a ef       	ldi	r20, 0xFA	; 250
    2bca:	54 e4       	ldi	r21, 0x44	; 68
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8f 83       	std	Y+7, r24	; 0x07
    2bd6:	98 87       	std	Y+8, r25	; 0x08
    2bd8:	a9 87       	std	Y+9, r26	; 0x09
    2bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <LCD_voidSendData+0x18c>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <LCD_voidSendData+0x20a>
	else if (__tmp > 65535)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <LCD_voidSendData+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <LCD_voidSendData+0x1ec>
    2c40:	88 ec       	ldi	r24, 0xC8	; 200
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_voidSendData+0x1da>
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <LCD_voidSendData+0x1ce>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <LCD_voidSendData+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_voidSendData+0x216>
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
	//delay for multiple call
	_delay_ms(1);
}
    2c90:	6d 96       	adiw	r28, 0x1d	; 29
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 copy_u8Command){
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	6d 97       	sbiw	r28, 0x1d	; 29
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	8d 8f       	std	Y+29, r24	; 0x1d
	//send Command make RS_PIN=0
	CLR_BIT(LCD_Control_Port,LCD_RS_PIN);
    2cb8:	a8 e3       	ldi	r26, 0x38	; 56
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e8 e3       	ldi	r30, 0x38	; 56
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	8f 7d       	andi	r24, 0xDF	; 223
    2cc4:	8c 93       	st	X, r24
	//write RW=0
	CLR_BIT(LCD_Control_Port,LCD_RW_PIN);
    2cc6:	a8 e3       	ldi	r26, 0x38	; 56
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e8 e3       	ldi	r30, 0x38	; 56
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	8f 7b       	andi	r24, 0xBF	; 191
    2cd2:	8c 93       	st	X, r24
	//enable => high
	SET_BIT(LCD_Control_Port,LCD_E_PIN);
    2cd4:	a8 e3       	ldi	r26, 0x38	; 56
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e8 e3       	ldi	r30, 0x38	; 56
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	80 68       	ori	r24, 0x80	; 128
    2ce0:	8c 93       	st	X, r24
	LCD_Data_Port=copy_u8Command;
    2ce2:	eb e3       	ldi	r30, 0x3B	; 59
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce8:	80 83       	st	Z, r24
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	a0 e0       	ldi	r26, 0x00	; 0
    2cf0:	b0 e4       	ldi	r27, 0x40	; 64
    2cf2:	89 8f       	std	Y+25, r24	; 0x19
    2cf4:	9a 8f       	std	Y+26, r25	; 0x1a
    2cf6:	ab 8f       	std	Y+27, r26	; 0x1b
    2cf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfa:	69 8d       	ldd	r22, Y+25	; 0x19
    2cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	4a ef       	ldi	r20, 0xFA	; 250
    2d08:	54 e4       	ldi	r21, 0x44	; 68
    2d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8d 8b       	std	Y+21, r24	; 0x15
    2d14:	9e 8b       	std	Y+22, r25	; 0x16
    2d16:	af 8b       	std	Y+23, r26	; 0x17
    2d18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d20:	98 8d       	ldd	r25, Y+24	; 0x18
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e8       	ldi	r20, 0x80	; 128
    2d28:	5f e3       	ldi	r21, 0x3F	; 63
    2d2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d2e:	88 23       	and	r24, r24
    2d30:	2c f4       	brge	.+10     	; 0x2d3c <LCD_voidSendCommand+0x9a>
		__ticks = 1;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9c 8b       	std	Y+20, r25	; 0x14
    2d38:	8b 8b       	std	Y+19, r24	; 0x13
    2d3a:	3f c0       	rjmp	.+126    	; 0x2dba <LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    2d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d40:	8f 89       	ldd	r24, Y+23	; 0x17
    2d42:	98 8d       	ldd	r25, Y+24	; 0x18
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	4c f5       	brge	.+82     	; 0x2da6 <LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	69 8d       	ldd	r22, Y+25	; 0x19
    2d56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <LCD_voidSendCommand+0xfa>
    2d7e:	88 ec       	ldi	r24, 0xC8	; 200
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9a 8b       	std	Y+18, r25	; 0x12
    2d84:	89 8b       	std	Y+17, r24	; 0x11
    2d86:	89 89       	ldd	r24, Y+17	; 0x11
    2d88:	9a 89       	ldd	r25, Y+18	; 0x12
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <LCD_voidSendCommand+0xe8>
    2d8e:	9a 8b       	std	Y+18, r25	; 0x12
    2d90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d92:	8b 89       	ldd	r24, Y+19	; 0x13
    2d94:	9c 89       	ldd	r25, Y+20	; 0x14
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	9c 8b       	std	Y+20, r25	; 0x14
    2d9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	69 f7       	brne	.-38     	; 0x2d7e <LCD_voidSendCommand+0xdc>
    2da4:	14 c0       	rjmp	.+40     	; 0x2dce <LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	6d 89       	ldd	r22, Y+21	; 0x15
    2da8:	7e 89       	ldd	r23, Y+22	; 0x16
    2daa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dac:	98 8d       	ldd	r25, Y+24	; 0x18
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9c 8b       	std	Y+20, r25	; 0x14
    2db8:	8b 8b       	std	Y+19, r24	; 0x13
    2dba:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dbe:	98 8b       	std	Y+16, r25	; 0x10
    2dc0:	8f 87       	std	Y+15, r24	; 0x0f
    2dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc4:	98 89       	ldd	r25, Y+16	; 0x10
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <LCD_voidSendCommand+0x124>
    2dca:	98 8b       	std	Y+16, r25	; 0x10
    2dcc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//enable => LOW (Caputre Data)
	CLR_BIT(LCD_Control_Port,LCD_E_PIN);
    2dce:	a8 e3       	ldi	r26, 0x38	; 56
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	e8 e3       	ldi	r30, 0x38	; 56
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8f 77       	andi	r24, 0x7F	; 127
    2dda:	8c 93       	st	X, r24
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	a0 e2       	ldi	r26, 0x20	; 32
    2de2:	b1 e4       	ldi	r27, 0x41	; 65
    2de4:	8b 87       	std	Y+11, r24	; 0x0b
    2de6:	9c 87       	std	Y+12, r25	; 0x0c
    2de8:	ad 87       	std	Y+13, r26	; 0x0d
    2dea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	4a ef       	ldi	r20, 0xFA	; 250
    2dfa:	54 e4       	ldi	r21, 0x44	; 68
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	8f 83       	std	Y+7, r24	; 0x07
    2e06:	98 87       	std	Y+8, r25	; 0x08
    2e08:	a9 87       	std	Y+9, r26	; 0x09
    2e0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5f e3       	ldi	r21, 0x3F	; 63
    2e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e20:	88 23       	and	r24, r24
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <LCD_voidSendCommand+0x18c>
		__ticks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
    2e2c:	3f c0       	rjmp	.+126    	; 0x2eac <LCD_voidSendCommand+0x20a>
	else if (__tmp > 65535)
    2e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e30:	78 85       	ldd	r23, Y+8	; 0x08
    2e32:	89 85       	ldd	r24, Y+9	; 0x09
    2e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	57 e4       	ldi	r21, 0x47	; 71
    2e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	4c f5       	brge	.+82     	; 0x2e98 <LCD_voidSendCommand+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	51 e4       	ldi	r21, 0x41	; 65
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e 83       	std	Y+6, r25	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <LCD_voidSendCommand+0x1ec>
    2e70:	88 ec       	ldi	r24, 0xC8	; 200
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9c 83       	std	Y+4, r25	; 0x04
    2e76:	8b 83       	std	Y+3, r24	; 0x03
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <LCD_voidSendCommand+0x1da>
    2e80:	9c 83       	std	Y+4, r25	; 0x04
    2e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	9e 83       	std	Y+6, r25	; 0x06
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <LCD_voidSendCommand+0x1ce>
    2e96:	14 c0       	rjmp	.+40     	; 0x2ec0 <LCD_voidSendCommand+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9a:	78 85       	ldd	r23, Y+8	; 0x08
    2e9c:	89 85       	ldd	r24, Y+9	; 0x09
    2e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <LCD_voidSendCommand+0x216>
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	89 83       	std	Y+1, r24	; 0x01
	//delay for multiple call
	_delay_ms(10);
}
    2ec0:	6d 96       	adiw	r28, 0x1d	; 29
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <LCD_voidini>:

void LCD_voidini(void){
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	c6 54       	subi	r28, 0x46	; 70
    2ee0:	d0 40       	sbci	r29, 0x00	; 0
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
	LCD_Data_DDR=0xFF;
    2eec:	ea e3       	ldi	r30, 0x3A	; 58
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	8f ef       	ldi	r24, 0xFF	; 255
    2ef2:	80 83       	st	Z, r24
	SET_BIT(LCD_Control_DDR,LCD_RS_PIN);
    2ef4:	a7 e3       	ldi	r26, 0x37	; 55
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e7 e3       	ldi	r30, 0x37	; 55
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	80 62       	ori	r24, 0x20	; 32
    2f00:	8c 93       	st	X, r24
	SET_BIT(LCD_Control_DDR,LCD_RW_PIN);
    2f02:	a7 e3       	ldi	r26, 0x37	; 55
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e7 e3       	ldi	r30, 0x37	; 55
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 64       	ori	r24, 0x40	; 64
    2f0e:	8c 93       	st	X, r24
	SET_BIT(LCD_Control_DDR,LCD_E_PIN);
    2f10:	a7 e3       	ldi	r26, 0x37	; 55
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e7 e3       	ldi	r30, 0x37	; 55
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	80 68       	ori	r24, 0x80	; 128
    2f1c:	8c 93       	st	X, r24
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 5b       	subi	r30, 0xBD	; 189
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 ef       	ldi	r26, 0xF0	; 240
    2f2a:	b1 e4       	ldi	r27, 0x41	; 65
    2f2c:	80 83       	st	Z, r24
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	a2 83       	std	Z+2, r26	; 0x02
    2f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	8e 01       	movw	r16, r28
    2f36:	01 5c       	subi	r16, 0xC1	; 193
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ed 5b       	subi	r30, 0xBD	; 189
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a ef       	ldi	r20, 0xFA	; 250
    2f4e:	54 e4       	ldi	r21, 0x44	; 68
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	f8 01       	movw	r30, r16
    2f5a:	80 83       	st	Z, r24
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	a2 83       	std	Z+2, r26	; 0x02
    2f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f62:	fe 01       	movw	r30, r28
    2f64:	ff 96       	adiw	r30, 0x3f	; 63
    2f66:	60 81       	ld	r22, Z
    2f68:	71 81       	ldd	r23, Z+1	; 0x01
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	93 81       	ldd	r25, Z+3	; 0x03
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e8       	ldi	r20, 0x80	; 128
    2f74:	5f e3       	ldi	r21, 0x3F	; 63
    2f76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f7a:	88 23       	and	r24, r24
    2f7c:	2c f4       	brge	.+10     	; 0x2f88 <LCD_voidini+0xb6>
		__ticks = 1;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9e af       	std	Y+62, r25	; 0x3e
    2f84:	8d af       	std	Y+61, r24	; 0x3d
    2f86:	46 c0       	rjmp	.+140    	; 0x3014 <LCD_voidini+0x142>
	else if (__tmp > 65535)
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ff 96       	adiw	r30, 0x3f	; 63
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	64 f5       	brge	.+88     	; 0x2ffc <LCD_voidini+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ed 5b       	subi	r30, 0xBD	; 189
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	60 81       	ld	r22, Z
    2fac:	71 81       	ldd	r23, Z+1	; 0x01
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	9e af       	std	Y+62, r25	; 0x3e
    2fd0:	8d af       	std	Y+61, r24	; 0x3d
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <LCD_voidini+0x120>
    2fd4:	88 ec       	ldi	r24, 0xC8	; 200
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	9c af       	std	Y+60, r25	; 0x3c
    2fda:	8b af       	std	Y+59, r24	; 0x3b
    2fdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fde:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_voidini+0x10e>
    2fe4:	9c af       	std	Y+60, r25	; 0x3c
    2fe6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9e af       	std	Y+62, r25	; 0x3e
    2ff0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	69 f7       	brne	.-38     	; 0x2fd4 <LCD_voidini+0x102>
    2ffa:	16 c0       	rjmp	.+44     	; 0x3028 <LCD_voidini+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ff 96       	adiw	r30, 0x3f	; 63
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9e af       	std	Y+62, r25	; 0x3e
    3012:	8d af       	std	Y+61, r24	; 0x3d
    3014:	8d ad       	ldd	r24, Y+61	; 0x3d
    3016:	9e ad       	ldd	r25, Y+62	; 0x3e
    3018:	9a af       	std	Y+58, r25	; 0x3a
    301a:	89 af       	std	Y+57, r24	; 0x39
    301c:	89 ad       	ldd	r24, Y+57	; 0x39
    301e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_voidini+0x14e>
    3024:	9a af       	std	Y+58, r25	; 0x3a
    3026:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	LCD_voidSendCommand(LCD_FunictionSet8bit);
    3028:	88 e3       	ldi	r24, 0x38	; 56
    302a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidSendCommand>
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a0 e0       	ldi	r26, 0x00	; 0
    3034:	b0 e4       	ldi	r27, 0x40	; 64
    3036:	8d ab       	std	Y+53, r24	; 0x35
    3038:	9e ab       	std	Y+54, r25	; 0x36
    303a:	af ab       	std	Y+55, r26	; 0x37
    303c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303e:	6d a9       	ldd	r22, Y+53	; 0x35
    3040:	7e a9       	ldd	r23, Y+54	; 0x36
    3042:	8f a9       	ldd	r24, Y+55	; 0x37
    3044:	98 ad       	ldd	r25, Y+56	; 0x38
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4a ef       	ldi	r20, 0xFA	; 250
    304c:	54 e4       	ldi	r21, 0x44	; 68
    304e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	89 ab       	std	Y+49, r24	; 0x31
    3058:	9a ab       	std	Y+50, r25	; 0x32
    305a:	ab ab       	std	Y+51, r26	; 0x33
    305c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    305e:	69 a9       	ldd	r22, Y+49	; 0x31
    3060:	7a a9       	ldd	r23, Y+50	; 0x32
    3062:	8b a9       	ldd	r24, Y+51	; 0x33
    3064:	9c a9       	ldd	r25, Y+52	; 0x34
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e8       	ldi	r20, 0x80	; 128
    306c:	5f e3       	ldi	r21, 0x3F	; 63
    306e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3072:	88 23       	and	r24, r24
    3074:	2c f4       	brge	.+10     	; 0x3080 <LCD_voidini+0x1ae>
		__ticks = 1;
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	98 ab       	std	Y+48, r25	; 0x30
    307c:	8f a7       	std	Y+47, r24	; 0x2f
    307e:	3f c0       	rjmp	.+126    	; 0x30fe <LCD_voidini+0x22c>
	else if (__tmp > 65535)
    3080:	69 a9       	ldd	r22, Y+49	; 0x31
    3082:	7a a9       	ldd	r23, Y+50	; 0x32
    3084:	8b a9       	ldd	r24, Y+51	; 0x33
    3086:	9c a9       	ldd	r25, Y+52	; 0x34
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	3f ef       	ldi	r19, 0xFF	; 255
    308c:	4f e7       	ldi	r20, 0x7F	; 127
    308e:	57 e4       	ldi	r21, 0x47	; 71
    3090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3094:	18 16       	cp	r1, r24
    3096:	4c f5       	brge	.+82     	; 0x30ea <LCD_voidini+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3098:	6d a9       	ldd	r22, Y+53	; 0x35
    309a:	7e a9       	ldd	r23, Y+54	; 0x36
    309c:	8f a9       	ldd	r24, Y+55	; 0x37
    309e:	98 ad       	ldd	r25, Y+56	; 0x38
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e2       	ldi	r20, 0x20	; 32
    30a6:	51 e4       	ldi	r21, 0x41	; 65
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	98 ab       	std	Y+48, r25	; 0x30
    30be:	8f a7       	std	Y+47, r24	; 0x2f
    30c0:	0f c0       	rjmp	.+30     	; 0x30e0 <LCD_voidini+0x20e>
    30c2:	88 ec       	ldi	r24, 0xC8	; 200
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	9e a7       	std	Y+46, r25	; 0x2e
    30c8:	8d a7       	std	Y+45, r24	; 0x2d
    30ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    30cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	f1 f7       	brne	.-4      	; 0x30ce <LCD_voidini+0x1fc>
    30d2:	9e a7       	std	Y+46, r25	; 0x2e
    30d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d8:	98 a9       	ldd	r25, Y+48	; 0x30
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	98 ab       	std	Y+48, r25	; 0x30
    30de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e2:	98 a9       	ldd	r25, Y+48	; 0x30
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	69 f7       	brne	.-38     	; 0x30c2 <LCD_voidini+0x1f0>
    30e8:	14 c0       	rjmp	.+40     	; 0x3112 <LCD_voidini+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ea:	69 a9       	ldd	r22, Y+49	; 0x31
    30ec:	7a a9       	ldd	r23, Y+50	; 0x32
    30ee:	8b a9       	ldd	r24, Y+51	; 0x33
    30f0:	9c a9       	ldd	r25, Y+52	; 0x34
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	98 ab       	std	Y+48, r25	; 0x30
    30fc:	8f a7       	std	Y+47, r24	; 0x2f
    30fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3100:	98 a9       	ldd	r25, Y+48	; 0x30
    3102:	9c a7       	std	Y+44, r25	; 0x2c
    3104:	8b a7       	std	Y+43, r24	; 0x2b
    3106:	8b a5       	ldd	r24, Y+43	; 0x2b
    3108:	9c a5       	ldd	r25, Y+44	; 0x2c
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <LCD_voidini+0x238>
    310e:	9c a7       	std	Y+44, r25	; 0x2c
    3110:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_voidSendCommand(Display_ON_Control);
    3112:	8c e0       	ldi	r24, 0x0C	; 12
    3114:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidSendCommand>
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a0 e0       	ldi	r26, 0x00	; 0
    311e:	b0 e4       	ldi	r27, 0x40	; 64
    3120:	8f a3       	std	Y+39, r24	; 0x27
    3122:	98 a7       	std	Y+40, r25	; 0x28
    3124:	a9 a7       	std	Y+41, r26	; 0x29
    3126:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3128:	6f a1       	ldd	r22, Y+39	; 0x27
    312a:	78 a5       	ldd	r23, Y+40	; 0x28
    312c:	89 a5       	ldd	r24, Y+41	; 0x29
    312e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	4a ef       	ldi	r20, 0xFA	; 250
    3136:	54 e4       	ldi	r21, 0x44	; 68
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	8b a3       	std	Y+35, r24	; 0x23
    3142:	9c a3       	std	Y+36, r25	; 0x24
    3144:	ad a3       	std	Y+37, r26	; 0x25
    3146:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3148:	6b a1       	ldd	r22, Y+35	; 0x23
    314a:	7c a1       	ldd	r23, Y+36	; 0x24
    314c:	8d a1       	ldd	r24, Y+37	; 0x25
    314e:	9e a1       	ldd	r25, Y+38	; 0x26
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e8       	ldi	r20, 0x80	; 128
    3156:	5f e3       	ldi	r21, 0x3F	; 63
    3158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    315c:	88 23       	and	r24, r24
    315e:	2c f4       	brge	.+10     	; 0x316a <LCD_voidini+0x298>
		__ticks = 1;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9a a3       	std	Y+34, r25	; 0x22
    3166:	89 a3       	std	Y+33, r24	; 0x21
    3168:	3f c0       	rjmp	.+126    	; 0x31e8 <LCD_voidini+0x316>
	else if (__tmp > 65535)
    316a:	6b a1       	ldd	r22, Y+35	; 0x23
    316c:	7c a1       	ldd	r23, Y+36	; 0x24
    316e:	8d a1       	ldd	r24, Y+37	; 0x25
    3170:	9e a1       	ldd	r25, Y+38	; 0x26
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	3f ef       	ldi	r19, 0xFF	; 255
    3176:	4f e7       	ldi	r20, 0x7F	; 127
    3178:	57 e4       	ldi	r21, 0x47	; 71
    317a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    317e:	18 16       	cp	r1, r24
    3180:	4c f5       	brge	.+82     	; 0x31d4 <LCD_voidini+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3182:	6f a1       	ldd	r22, Y+39	; 0x27
    3184:	78 a5       	ldd	r23, Y+40	; 0x28
    3186:	89 a5       	ldd	r24, Y+41	; 0x29
    3188:	9a a5       	ldd	r25, Y+42	; 0x2a
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e2       	ldi	r20, 0x20	; 32
    3190:	51 e4       	ldi	r21, 0x41	; 65
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	bc 01       	movw	r22, r24
    319c:	cd 01       	movw	r24, r26
    319e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9a a3       	std	Y+34, r25	; 0x22
    31a8:	89 a3       	std	Y+33, r24	; 0x21
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <LCD_voidini+0x2f8>
    31ac:	88 ec       	ldi	r24, 0xC8	; 200
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	98 a3       	std	Y+32, r25	; 0x20
    31b2:	8f 8f       	std	Y+31, r24	; 0x1f
    31b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b6:	98 a1       	ldd	r25, Y+32	; 0x20
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <LCD_voidini+0x2e6>
    31bc:	98 a3       	std	Y+32, r25	; 0x20
    31be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c0:	89 a1       	ldd	r24, Y+33	; 0x21
    31c2:	9a a1       	ldd	r25, Y+34	; 0x22
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	9a a3       	std	Y+34, r25	; 0x22
    31c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ca:	89 a1       	ldd	r24, Y+33	; 0x21
    31cc:	9a a1       	ldd	r25, Y+34	; 0x22
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	69 f7       	brne	.-38     	; 0x31ac <LCD_voidini+0x2da>
    31d2:	14 c0       	rjmp	.+40     	; 0x31fc <LCD_voidini+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d4:	6b a1       	ldd	r22, Y+35	; 0x23
    31d6:	7c a1       	ldd	r23, Y+36	; 0x24
    31d8:	8d a1       	ldd	r24, Y+37	; 0x25
    31da:	9e a1       	ldd	r25, Y+38	; 0x26
    31dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	9a a3       	std	Y+34, r25	; 0x22
    31e6:	89 a3       	std	Y+33, r24	; 0x21
    31e8:	89 a1       	ldd	r24, Y+33	; 0x21
    31ea:	9a a1       	ldd	r25, Y+34	; 0x22
    31ec:	9e 8f       	std	Y+30, r25	; 0x1e
    31ee:	8d 8f       	std	Y+29, r24	; 0x1d
    31f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <LCD_voidini+0x322>
    31f8:	9e 8f       	std	Y+30, r25	; 0x1e
    31fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_voidSendCommand(Clear_display);
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidSendCommand>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e4       	ldi	r27, 0x40	; 64
    320a:	89 8f       	std	Y+25, r24	; 0x19
    320c:	9a 8f       	std	Y+26, r25	; 0x1a
    320e:	ab 8f       	std	Y+27, r26	; 0x1b
    3210:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	69 8d       	ldd	r22, Y+25	; 0x19
    3214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a ef       	ldi	r20, 0xFA	; 250
    3220:	54 e4       	ldi	r21, 0x44	; 68
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	8d 8b       	std	Y+21, r24	; 0x15
    322c:	9e 8b       	std	Y+22, r25	; 0x16
    322e:	af 8b       	std	Y+23, r26	; 0x17
    3230:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3232:	6d 89       	ldd	r22, Y+21	; 0x15
    3234:	7e 89       	ldd	r23, Y+22	; 0x16
    3236:	8f 89       	ldd	r24, Y+23	; 0x17
    3238:	98 8d       	ldd	r25, Y+24	; 0x18
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <LCD_voidini+0x382>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9c 8b       	std	Y+20, r25	; 0x14
    3250:	8b 8b       	std	Y+19, r24	; 0x13
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <LCD_voidini+0x400>
	else if (__tmp > 65535)
    3254:	6d 89       	ldd	r22, Y+21	; 0x15
    3256:	7e 89       	ldd	r23, Y+22	; 0x16
    3258:	8f 89       	ldd	r24, Y+23	; 0x17
    325a:	98 8d       	ldd	r25, Y+24	; 0x18
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <LCD_voidini+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	69 8d       	ldd	r22, Y+25	; 0x19
    326e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <LCD_voidini+0x3e2>
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9a 8b       	std	Y+18, r25	; 0x12
    329c:	89 8b       	std	Y+17, r24	; 0x11
    329e:	89 89       	ldd	r24, Y+17	; 0x11
    32a0:	9a 89       	ldd	r25, Y+18	; 0x12
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <LCD_voidini+0x3d0>
    32a6:	9a 8b       	std	Y+18, r25	; 0x12
    32a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8b 89       	ldd	r24, Y+19	; 0x13
    32ac:	9c 89       	ldd	r25, Y+20	; 0x14
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	9c 8b       	std	Y+20, r25	; 0x14
    32b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8b 89       	ldd	r24, Y+19	; 0x13
    32b6:	9c 89       	ldd	r25, Y+20	; 0x14
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <LCD_voidini+0x3c4>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <LCD_voidini+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	6d 89       	ldd	r22, Y+21	; 0x15
    32c0:	7e 89       	ldd	r23, Y+22	; 0x16
    32c2:	8f 89       	ldd	r24, Y+23	; 0x17
    32c4:	98 8d       	ldd	r25, Y+24	; 0x18
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9c 8b       	std	Y+20, r25	; 0x14
    32d0:	8b 8b       	std	Y+19, r24	; 0x13
    32d2:	8b 89       	ldd	r24, Y+19	; 0x13
    32d4:	9c 89       	ldd	r25, Y+20	; 0x14
    32d6:	98 8b       	std	Y+16, r25	; 0x10
    32d8:	8f 87       	std	Y+15, r24	; 0x0f
    32da:	8f 85       	ldd	r24, Y+15	; 0x0f
    32dc:	98 89       	ldd	r25, Y+16	; 0x10
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_voidini+0x40c>
    32e2:	98 8b       	std	Y+16, r25	; 0x10
    32e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCommand(Entery_mode_set);
    32e6:	86 e0       	ldi	r24, 0x06	; 6
    32e8:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidSendCommand>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e0       	ldi	r26, 0x00	; 0
    32f2:	b0 e4       	ldi	r27, 0x40	; 64
    32f4:	8b 87       	std	Y+11, r24	; 0x0b
    32f6:	9c 87       	std	Y+12, r25	; 0x0c
    32f8:	ad 87       	std	Y+13, r26	; 0x0d
    32fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3300:	8d 85       	ldd	r24, Y+13	; 0x0d
    3302:	9e 85       	ldd	r25, Y+14	; 0x0e
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a ef       	ldi	r20, 0xFA	; 250
    330a:	54 e4       	ldi	r21, 0x44	; 68
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	8f 83       	std	Y+7, r24	; 0x07
    3316:	98 87       	std	Y+8, r25	; 0x08
    3318:	a9 87       	std	Y+9, r26	; 0x09
    331a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    331c:	6f 81       	ldd	r22, Y+7	; 0x07
    331e:	78 85       	ldd	r23, Y+8	; 0x08
    3320:	89 85       	ldd	r24, Y+9	; 0x09
    3322:	9a 85       	ldd	r25, Y+10	; 0x0a
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	2c f4       	brge	.+10     	; 0x333e <LCD_voidini+0x46c>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9e 83       	std	Y+6, r25	; 0x06
    333a:	8d 83       	std	Y+5, r24	; 0x05
    333c:	3f c0       	rjmp	.+126    	; 0x33bc <LCD_voidini+0x4ea>
	else if (__tmp > 65535)
    333e:	6f 81       	ldd	r22, Y+7	; 0x07
    3340:	78 85       	ldd	r23, Y+8	; 0x08
    3342:	89 85       	ldd	r24, Y+9	; 0x09
    3344:	9a 85       	ldd	r25, Y+10	; 0x0a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	3f ef       	ldi	r19, 0xFF	; 255
    334a:	4f e7       	ldi	r20, 0x7F	; 127
    334c:	57 e4       	ldi	r21, 0x47	; 71
    334e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3352:	18 16       	cp	r1, r24
    3354:	4c f5       	brge	.+82     	; 0x33a8 <LCD_voidini+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	6b 85       	ldd	r22, Y+11	; 0x0b
    3358:	7c 85       	ldd	r23, Y+12	; 0x0c
    335a:	8d 85       	ldd	r24, Y+13	; 0x0d
    335c:	9e 85       	ldd	r25, Y+14	; 0x0e
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	51 e4       	ldi	r21, 0x41	; 65
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
    337e:	0f c0       	rjmp	.+30     	; 0x339e <LCD_voidini+0x4cc>
    3380:	88 ec       	ldi	r24, 0xC8	; 200
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	9c 83       	std	Y+4, r25	; 0x04
    3386:	8b 83       	std	Y+3, r24	; 0x03
    3388:	8b 81       	ldd	r24, Y+3	; 0x03
    338a:	9c 81       	ldd	r25, Y+4	; 0x04
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <LCD_voidini+0x4ba>
    3390:	9c 83       	std	Y+4, r25	; 0x04
    3392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3394:	8d 81       	ldd	r24, Y+5	; 0x05
    3396:	9e 81       	ldd	r25, Y+6	; 0x06
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	9e 83       	std	Y+6, r25	; 0x06
    339c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339e:	8d 81       	ldd	r24, Y+5	; 0x05
    33a0:	9e 81       	ldd	r25, Y+6	; 0x06
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	69 f7       	brne	.-38     	; 0x3380 <LCD_voidini+0x4ae>
    33a6:	14 c0       	rjmp	.+40     	; 0x33d0 <LCD_voidini+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a8:	6f 81       	ldd	r22, Y+7	; 0x07
    33aa:	78 85       	ldd	r23, Y+8	; 0x08
    33ac:	89 85       	ldd	r24, Y+9	; 0x09
    33ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9e 83       	std	Y+6, r25	; 0x06
    33ba:	8d 83       	std	Y+5, r24	; 0x05
    33bc:	8d 81       	ldd	r24, Y+5	; 0x05
    33be:	9e 81       	ldd	r25, Y+6	; 0x06
    33c0:	9a 83       	std	Y+2, r25	; 0x02
    33c2:	89 83       	std	Y+1, r24	; 0x01
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	9a 81       	ldd	r25, Y+2	; 0x02
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <LCD_voidini+0x4f6>
    33cc:	9a 83       	std	Y+2, r25	; 0x02
    33ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    33d0:	ca 5b       	subi	r28, 0xBA	; 186
    33d2:	df 4f       	sbci	r29, 0xFF	; 255
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	cf 91       	pop	r28
    33e0:	df 91       	pop	r29
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	08 95       	ret

000033e8 <LCD_voidSetCursorLocation>:
void LCD_voidSetCursorLocation(u8 copy_u8Row,u8 copy_u8Column){
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <LCD_voidSetCursorLocation+0x6>
    33ee:	00 d0       	rcall	.+0      	; 0x33f0 <LCD_voidSetCursorLocation+0x8>
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8Column>=0) &&(copy_u8Column<16)){
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	80 31       	cpi	r24, 0x10	; 16
    33fc:	c0 f4       	brcc	.+48     	; 0x342e <LCD_voidSetCursorLocation+0x46>
	switch(copy_u8Row){
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	28 2f       	mov	r18, r24
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	3c 83       	std	Y+4, r19	; 0x04
    3406:	2b 83       	std	Y+3, r18	; 0x03
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	31 f0       	breq	.+12     	; 0x341c <LCD_voidSetCursorLocation+0x34>
    3410:	2b 81       	ldd	r18, Y+3	; 0x03
    3412:	3c 81       	ldd	r19, Y+4	; 0x04
    3414:	21 30       	cpi	r18, 0x01	; 1
    3416:	31 05       	cpc	r19, r1
    3418:	31 f0       	breq	.+12     	; 0x3426 <LCD_voidSetCursorLocation+0x3e>
    341a:	09 c0       	rjmp	.+18     	; 0x342e <LCD_voidSetCursorLocation+0x46>
	case 0:
		LCD_voidSendCommand(DDR_ADDRESS+0+copy_u8Column);
    341c:	8a 81       	ldd	r24, Y+2	; 0x02
    341e:	80 58       	subi	r24, 0x80	; 128
    3420:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidSendCommand>
    3424:	04 c0       	rjmp	.+8      	; 0x342e <LCD_voidSetCursorLocation+0x46>
	break;
	case 1:
		LCD_voidSendCommand(DDR_ADDRESS+0x40+copy_u8Column);
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	80 54       	subi	r24, 0x40	; 64
    342a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidSendCommand>
	}
	}
	else{
		// unvaild column
	}
}
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <LCD_voidClearDisplay>:
void LCD_voidClearDisplay(void){
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(Clear_display);
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidSendCommand>
}
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <LCD_voidwriteString>:
void LCD_voidSaveCustomchar(u8 *ptr_u8toCustomchar,u8 copy_u8SaveLocation);

void LCD_voidwriteString(u8 *ptr_u8toString){
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	00 d0       	rcall	.+0      	; 0x3456 <LCD_voidwriteString+0x6>
    3456:	0f 92       	push	r0
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	9b 83       	std	Y+3, r25	; 0x03
    345e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8counter=0;
    3460:	19 82       	std	Y+1, r1	; 0x01
	for(local_u8counter=0;ptr_u8toString[local_u8counter]!='\0';local_u8counter++){
    3462:	19 82       	std	Y+1, r1	; 0x01
    3464:	0e c0       	rjmp	.+28     	; 0x3482 <LCD_voidwriteString+0x32>
		LCD_voidSendData(ptr_u8toString[local_u8counter]);
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	28 2f       	mov	r18, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	9b 81       	ldd	r25, Y+3	; 0x03
    3470:	fc 01       	movw	r30, r24
    3472:	e2 0f       	add	r30, r18
    3474:	f3 1f       	adc	r31, r19
    3476:	80 81       	ld	r24, Z
    3478:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_voidSendData>
}
void LCD_voidSaveCustomchar(u8 *ptr_u8toCustomchar,u8 copy_u8SaveLocation);

void LCD_voidwriteString(u8 *ptr_u8toString){
	u8 local_u8counter=0;
	for(local_u8counter=0;ptr_u8toString[local_u8counter]!='\0';local_u8counter++){
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	8f 5f       	subi	r24, 0xFF	; 255
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	9b 81       	ldd	r25, Y+3	; 0x03
    348c:	fc 01       	movw	r30, r24
    348e:	e2 0f       	add	r30, r18
    3490:	f3 1f       	adc	r31, r19
    3492:	80 81       	ld	r24, Z
    3494:	88 23       	and	r24, r24
    3496:	39 f7       	brne	.-50     	; 0x3466 <LCD_voidwriteString+0x16>
		LCD_voidSendData(ptr_u8toString[local_u8counter]);
	}
}
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 copy_u32DataValue) {
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	60 97       	sbiw	r28, 0x10	; 16
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	6d 87       	std	Y+13, r22	; 0x0d
    34be:	7e 87       	std	Y+14, r23	; 0x0e
    34c0:	8f 87       	std	Y+15, r24	; 0x0f
    34c2:	98 8b       	std	Y+16, r25	; 0x10
    if (copy_u32DataValue == 0) {
    34c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c8:	af 85       	ldd	r26, Y+15	; 0x0f
    34ca:	b8 89       	ldd	r27, Y+16	; 0x10
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	a1 05       	cpc	r26, r1
    34d0:	b1 05       	cpc	r27, r1
    34d2:	21 f4       	brne	.+8      	; 0x34dc <LCD_voidWriteNumber+0x38>
        LCD_voidSendData('0');
    34d4:	80 e3       	ldi	r24, 0x30	; 48
    34d6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_voidSendData>
    34da:	56 c0       	rjmp	.+172    	; 0x3588 <LCD_voidWriteNumber+0xe4>
    } else {
        u8 buffer[11]={0};
    34dc:	8b e0       	ldi	r24, 0x0B	; 11
    34de:	fe 01       	movw	r30, r28
    34e0:	32 96       	adiw	r30, 0x02	; 2
    34e2:	df 01       	movw	r26, r30
    34e4:	98 2f       	mov	r25, r24
    34e6:	1d 92       	st	X+, r1
    34e8:	9a 95       	dec	r25
    34ea:	e9 f7       	brne	.-6      	; 0x34e6 <LCD_voidWriteNumber+0x42>
        s8 i = 0;
    34ec:	19 82       	std	Y+1, r1	; 0x01
    34ee:	30 c0       	rjmp	.+96     	; 0x3550 <LCD_voidWriteNumber+0xac>

        while (copy_u32DataValue > 0) {
            buffer[i++] = (copy_u32DataValue % 10) + '0';
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	08 2f       	mov	r16, r24
    34f4:	11 27       	eor	r17, r17
    34f6:	07 fd       	sbrc	r16, 7
    34f8:	10 95       	com	r17
    34fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    34fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34fe:	af 85       	ldd	r26, Y+15	; 0x0f
    3500:	b8 89       	ldd	r27, Y+16	; 0x10
    3502:	2a e0       	ldi	r18, 0x0A	; 10
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	28 2f       	mov	r18, r24
    3518:	20 5d       	subi	r18, 0xD0	; 208
    351a:	ce 01       	movw	r24, r28
    351c:	02 96       	adiw	r24, 0x02	; 2
    351e:	fc 01       	movw	r30, r24
    3520:	e0 0f       	add	r30, r16
    3522:	f1 1f       	adc	r31, r17
    3524:	20 83       	st	Z, r18
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	8f 5f       	subi	r24, 0xFF	; 255
    352a:	89 83       	std	Y+1, r24	; 0x01
            copy_u32DataValue /= 10;
    352c:	8d 85       	ldd	r24, Y+13	; 0x0d
    352e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3530:	af 85       	ldd	r26, Y+15	; 0x0f
    3532:	b8 89       	ldd	r27, Y+16	; 0x10
    3534:	2a e0       	ldi	r18, 0x0A	; 10
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e0       	ldi	r20, 0x00	; 0
    353a:	50 e0       	ldi	r21, 0x00	; 0
    353c:	bc 01       	movw	r22, r24
    353e:	cd 01       	movw	r24, r26
    3540:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    3544:	da 01       	movw	r26, r20
    3546:	c9 01       	movw	r24, r18
    3548:	8d 87       	std	Y+13, r24	; 0x0d
    354a:	9e 87       	std	Y+14, r25	; 0x0e
    354c:	af 87       	std	Y+15, r26	; 0x0f
    354e:	b8 8b       	std	Y+16, r27	; 0x10
        LCD_voidSendData('0');
    } else {
        u8 buffer[11]={0};
        s8 i = 0;

        while (copy_u32DataValue > 0) {
    3550:	8d 85       	ldd	r24, Y+13	; 0x0d
    3552:	9e 85       	ldd	r25, Y+14	; 0x0e
    3554:	af 85       	ldd	r26, Y+15	; 0x0f
    3556:	b8 89       	ldd	r27, Y+16	; 0x10
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	a1 05       	cpc	r26, r1
    355c:	b1 05       	cpc	r27, r1
    355e:	41 f6       	brne	.-112    	; 0x34f0 <LCD_voidWriteNumber+0x4c>
    3560:	10 c0       	rjmp	.+32     	; 0x3582 <LCD_voidWriteNumber+0xde>
            buffer[i++] = (copy_u32DataValue % 10) + '0';
            copy_u32DataValue /= 10;
        }

        while (i > 0) {
            LCD_voidSendData(buffer[--i]);
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	81 50       	subi	r24, 0x01	; 1
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	28 2f       	mov	r18, r24
    356c:	33 27       	eor	r19, r19
    356e:	27 fd       	sbrc	r18, 7
    3570:	30 95       	com	r19
    3572:	ce 01       	movw	r24, r28
    3574:	02 96       	adiw	r24, 0x02	; 2
    3576:	fc 01       	movw	r30, r24
    3578:	e2 0f       	add	r30, r18
    357a:	f3 1f       	adc	r31, r19
    357c:	80 81       	ld	r24, Z
    357e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_voidSendData>
        while (copy_u32DataValue > 0) {
            buffer[i++] = (copy_u32DataValue % 10) + '0';
            copy_u32DataValue /= 10;
        }

        while (i > 0) {
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	18 16       	cp	r1, r24
    3586:	6c f3       	brlt	.-38     	; 0x3562 <LCD_voidWriteNumber+0xbe>
            LCD_voidSendData(buffer[--i]);
        }
    }
}
    3588:	60 96       	adiw	r28, 0x10	; 16
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	1f 91       	pop	r17
    359a:	0f 91       	pop	r16
    359c:	08 95       	ret

0000359e <LCD_voidWriteFloatNumber>:
void LCD_voidWriteFloatNumber(f32 copy_f32DataValue,u8 copy_u8decimalPlaces) {
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	ed 97       	sbiw	r28, 0x3d	; 61
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	69 af       	std	Y+57, r22	; 0x39
    35b8:	7a af       	std	Y+58, r23	; 0x3a
    35ba:	8b af       	std	Y+59, r24	; 0x3b
    35bc:	9c af       	std	Y+60, r25	; 0x3c
    35be:	4d af       	std	Y+61, r20	; 0x3d
    // Buffer to hold the integer part and fractional part strings
	u8 buffer[32];
    u32 integerPart = (u32)copy_f32DataValue;
    35c0:	69 ad       	ldd	r22, Y+57	; 0x39
    35c2:	7a ad       	ldd	r23, Y+58	; 0x3a
    35c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    35c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	8a 87       	std	Y+10, r24	; 0x0a
    35d2:	9b 87       	std	Y+11, r25	; 0x0b
    35d4:	ac 87       	std	Y+12, r26	; 0x0c
    35d6:	bd 87       	std	Y+13, r27	; 0x0d
    f32 fractionalPart = copy_f32DataValue - integerPart;
    35d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    35da:	7b 85       	ldd	r23, Y+11	; 0x0b
    35dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    35de:	9d 85       	ldd	r25, Y+13	; 0x0d
    35e0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    35e4:	9b 01       	movw	r18, r22
    35e6:	ac 01       	movw	r20, r24
    35e8:	69 ad       	ldd	r22, Y+57	; 0x39
    35ea:	7a ad       	ldd	r23, Y+58	; 0x3a
    35ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    35ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    35f0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	8e 83       	std	Y+6, r24	; 0x06
    35fa:	9f 83       	std	Y+7, r25	; 0x07
    35fc:	a8 87       	std	Y+8, r26	; 0x08
    35fe:	b9 87       	std	Y+9, r27	; 0x09
    u8 i = 0;
    3600:	1d 82       	std	Y+5, r1	; 0x05

    // Handle the integer part
    if (integerPart == 0) {
    3602:	8a 85       	ldd	r24, Y+10	; 0x0a
    3604:	9b 85       	ldd	r25, Y+11	; 0x0b
    3606:	ac 85       	ldd	r26, Y+12	; 0x0c
    3608:	bd 85       	ldd	r27, Y+13	; 0x0d
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	a1 05       	cpc	r26, r1
    360e:	b1 05       	cpc	r27, r1
    3610:	71 f4       	brne	.+28     	; 0x362e <LCD_voidWriteFloatNumber+0x90>
        buffer[i++] = '0';
    3612:	8d 81       	ldd	r24, Y+5	; 0x05
    3614:	28 2f       	mov	r18, r24
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	ce 01       	movw	r24, r28
    361a:	0e 96       	adiw	r24, 0x0e	; 14
    361c:	fc 01       	movw	r30, r24
    361e:	e2 0f       	add	r30, r18
    3620:	f3 1f       	adc	r31, r19
    3622:	80 e3       	ldi	r24, 0x30	; 48
    3624:	80 83       	st	Z, r24
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	8f 5f       	subi	r24, 0xFF	; 255
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	54 c0       	rjmp	.+168    	; 0x36d6 <LCD_voidWriteFloatNumber+0x138>
    } else {
    	u8 intBuffer[11];
    	u8 intIndex = 0;
    362e:	1c 82       	std	Y+4, r1	; 0x04
    3630:	2e c0       	rjmp	.+92     	; 0x368e <LCD_voidWriteFloatNumber+0xf0>
            buffer[i++] = '-';
            integerPart = -integerPart;
        }

        while (integerPart > 0) {
            intBuffer[intIndex++] = (integerPart % 10) + '0';
    3632:	8c 81       	ldd	r24, Y+4	; 0x04
    3634:	08 2f       	mov	r16, r24
    3636:	10 e0       	ldi	r17, 0x00	; 0
    3638:	8a 85       	ldd	r24, Y+10	; 0x0a
    363a:	9b 85       	ldd	r25, Y+11	; 0x0b
    363c:	ac 85       	ldd	r26, Y+12	; 0x0c
    363e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3640:	2a e0       	ldi	r18, 0x0A	; 10
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	50 e0       	ldi	r21, 0x00	; 0
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	28 2f       	mov	r18, r24
    3656:	20 5d       	subi	r18, 0xD0	; 208
    3658:	ce 01       	movw	r24, r28
    365a:	8e 96       	adiw	r24, 0x2e	; 46
    365c:	fc 01       	movw	r30, r24
    365e:	e0 0f       	add	r30, r16
    3660:	f1 1f       	adc	r31, r17
    3662:	20 83       	st	Z, r18
    3664:	8c 81       	ldd	r24, Y+4	; 0x04
    3666:	8f 5f       	subi	r24, 0xFF	; 255
    3668:	8c 83       	std	Y+4, r24	; 0x04
            integerPart /= 10;
    366a:	8a 85       	ldd	r24, Y+10	; 0x0a
    366c:	9b 85       	ldd	r25, Y+11	; 0x0b
    366e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3670:	bd 85       	ldd	r27, Y+13	; 0x0d
    3672:	2a e0       	ldi	r18, 0x0A	; 10
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	50 e0       	ldi	r21, 0x00	; 0
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__udivmodsi4>
    3682:	da 01       	movw	r26, r20
    3684:	c9 01       	movw	r24, r18
    3686:	8a 87       	std	Y+10, r24	; 0x0a
    3688:	9b 87       	std	Y+11, r25	; 0x0b
    368a:	ac 87       	std	Y+12, r26	; 0x0c
    368c:	bd 87       	std	Y+13, r27	; 0x0d
        if (integerPart < 0) {
            buffer[i++] = '-';
            integerPart = -integerPart;
        }

        while (integerPart > 0) {
    368e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3690:	9b 85       	ldd	r25, Y+11	; 0x0b
    3692:	ac 85       	ldd	r26, Y+12	; 0x0c
    3694:	bd 85       	ldd	r27, Y+13	; 0x0d
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	a1 05       	cpc	r26, r1
    369a:	b1 05       	cpc	r27, r1
    369c:	51 f6       	brne	.-108    	; 0x3632 <LCD_voidWriteFloatNumber+0x94>
    369e:	18 c0       	rjmp	.+48     	; 0x36d0 <LCD_voidWriteFloatNumber+0x132>
            intBuffer[intIndex++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        while (intIndex > 0) {
            buffer[i++] = intBuffer[--intIndex];
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	48 2f       	mov	r20, r24
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	8c 81       	ldd	r24, Y+4	; 0x04
    36a8:	81 50       	subi	r24, 0x01	; 1
    36aa:	8c 83       	std	Y+4, r24	; 0x04
    36ac:	8c 81       	ldd	r24, Y+4	; 0x04
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	ce 01       	movw	r24, r28
    36b4:	8e 96       	adiw	r24, 0x2e	; 46
    36b6:	fc 01       	movw	r30, r24
    36b8:	e2 0f       	add	r30, r18
    36ba:	f3 1f       	adc	r31, r19
    36bc:	20 81       	ld	r18, Z
    36be:	ce 01       	movw	r24, r28
    36c0:	0e 96       	adiw	r24, 0x0e	; 14
    36c2:	fc 01       	movw	r30, r24
    36c4:	e4 0f       	add	r30, r20
    36c6:	f5 1f       	adc	r31, r21
    36c8:	20 83       	st	Z, r18
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	8d 83       	std	Y+5, r24	; 0x05
        while (integerPart > 0) {
            intBuffer[intIndex++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        while (intIndex > 0) {
    36d0:	8c 81       	ldd	r24, Y+4	; 0x04
    36d2:	88 23       	and	r24, r24
    36d4:	29 f7       	brne	.-54     	; 0x36a0 <LCD_voidWriteFloatNumber+0x102>
            buffer[i++] = intBuffer[--intIndex];
        }
    }

    // Add the decimal point
    buffer[i++] = '.';
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	28 2f       	mov	r18, r24
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	ce 01       	movw	r24, r28
    36de:	0e 96       	adiw	r24, 0x0e	; 14
    36e0:	fc 01       	movw	r30, r24
    36e2:	e2 0f       	add	r30, r18
    36e4:	f3 1f       	adc	r31, r19
    36e6:	8e e2       	ldi	r24, 0x2E	; 46
    36e8:	80 83       	st	Z, r24
    36ea:	8d 81       	ldd	r24, Y+5	; 0x05
    36ec:	8f 5f       	subi	r24, 0xFF	; 255
    36ee:	8d 83       	std	Y+5, r24	; 0x05

    // Handle the fractional part
    for (u8 j = 0; j < copy_u8decimalPlaces; j++) {
    36f0:	1b 82       	std	Y+3, r1	; 0x03
    36f2:	44 c0       	rjmp	.+136    	; 0x377c <LCD_voidWriteFloatNumber+0x1de>
        fractionalPart *= 10;
    36f4:	6e 81       	ldd	r22, Y+6	; 0x06
    36f6:	7f 81       	ldd	r23, Y+7	; 0x07
    36f8:	88 85       	ldd	r24, Y+8	; 0x08
    36fa:	99 85       	ldd	r25, Y+9	; 0x09
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e2       	ldi	r20, 0x20	; 32
    3702:	51 e4       	ldi	r21, 0x41	; 65
    3704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	8e 83       	std	Y+6, r24	; 0x06
    370e:	9f 83       	std	Y+7, r25	; 0x07
    3710:	a8 87       	std	Y+8, r26	; 0x08
    3712:	b9 87       	std	Y+9, r27	; 0x09
        u8 digit = (u8)fractionalPart;
    3714:	6e 81       	ldd	r22, Y+6	; 0x06
    3716:	7f 81       	ldd	r23, Y+7	; 0x07
    3718:	88 85       	ldd	r24, Y+8	; 0x08
    371a:	99 85       	ldd	r25, Y+9	; 0x09
    371c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	8a 83       	std	Y+2, r24	; 0x02
        buffer[i++] = digit + '0';
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	28 2f       	mov	r18, r24
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	48 2f       	mov	r20, r24
    3730:	40 5d       	subi	r20, 0xD0	; 208
    3732:	ce 01       	movw	r24, r28
    3734:	0e 96       	adiw	r24, 0x0e	; 14
    3736:	fc 01       	movw	r30, r24
    3738:	e2 0f       	add	r30, r18
    373a:	f3 1f       	adc	r31, r19
    373c:	40 83       	st	Z, r20
    373e:	8d 81       	ldd	r24, Y+5	; 0x05
    3740:	8f 5f       	subi	r24, 0xFF	; 255
    3742:	8d 83       	std	Y+5, r24	; 0x05
        fractionalPart -= digit;
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	88 2f       	mov	r24, r24
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	aa 27       	eor	r26, r26
    374c:	97 fd       	sbrc	r25, 7
    374e:	a0 95       	com	r26
    3750:	ba 2f       	mov	r27, r26
    3752:	bc 01       	movw	r22, r24
    3754:	cd 01       	movw	r24, r26
    3756:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    375a:	9b 01       	movw	r18, r22
    375c:	ac 01       	movw	r20, r24
    375e:	6e 81       	ldd	r22, Y+6	; 0x06
    3760:	7f 81       	ldd	r23, Y+7	; 0x07
    3762:	88 85       	ldd	r24, Y+8	; 0x08
    3764:	99 85       	ldd	r25, Y+9	; 0x09
    3766:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	8e 83       	std	Y+6, r24	; 0x06
    3770:	9f 83       	std	Y+7, r25	; 0x07
    3772:	a8 87       	std	Y+8, r26	; 0x08
    3774:	b9 87       	std	Y+9, r27	; 0x09

    // Add the decimal point
    buffer[i++] = '.';

    // Handle the fractional part
    for (u8 j = 0; j < copy_u8decimalPlaces; j++) {
    3776:	8b 81       	ldd	r24, Y+3	; 0x03
    3778:	8f 5f       	subi	r24, 0xFF	; 255
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	9b 81       	ldd	r25, Y+3	; 0x03
    377e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3780:	98 17       	cp	r25, r24
    3782:	08 f4       	brcc	.+2      	; 0x3786 <LCD_voidWriteFloatNumber+0x1e8>
    3784:	b7 cf       	rjmp	.-146    	; 0x36f4 <LCD_voidWriteFloatNumber+0x156>
        buffer[i++] = digit + '0';
        fractionalPart -= digit;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    3786:	8d 81       	ldd	r24, Y+5	; 0x05
    3788:	28 2f       	mov	r18, r24
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	ce 01       	movw	r24, r28
    378e:	0e 96       	adiw	r24, 0x0e	; 14
    3790:	fc 01       	movw	r30, r24
    3792:	e2 0f       	add	r30, r18
    3794:	f3 1f       	adc	r31, r19
    3796:	10 82       	st	Z, r1

    // Send each character to the LCD
    for (u8 k = 0; buffer[k] != '\0'; k++) {
    3798:	19 82       	std	Y+1, r1	; 0x01
    379a:	0e c0       	rjmp	.+28     	; 0x37b8 <LCD_voidWriteFloatNumber+0x21a>
        LCD_voidSendData(buffer[k]);
    379c:	89 81       	ldd	r24, Y+1	; 0x01
    379e:	28 2f       	mov	r18, r24
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	ce 01       	movw	r24, r28
    37a4:	0e 96       	adiw	r24, 0x0e	; 14
    37a6:	fc 01       	movw	r30, r24
    37a8:	e2 0f       	add	r30, r18
    37aa:	f3 1f       	adc	r31, r19
    37ac:	80 81       	ld	r24, Z
    37ae:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_voidSendData>

    // Null-terminate the string
    buffer[i] = '\0';

    // Send each character to the LCD
    for (u8 k = 0; buffer[k] != '\0'; k++) {
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	8f 5f       	subi	r24, 0xFF	; 255
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	28 2f       	mov	r18, r24
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	ce 01       	movw	r24, r28
    37c0:	0e 96       	adiw	r24, 0x0e	; 14
    37c2:	fc 01       	movw	r30, r24
    37c4:	e2 0f       	add	r30, r18
    37c6:	f3 1f       	adc	r31, r19
    37c8:	80 81       	ld	r24, Z
    37ca:	88 23       	and	r24, r24
    37cc:	39 f7       	brne	.-50     	; 0x379c <LCD_voidWriteFloatNumber+0x1fe>
        LCD_voidSendData(buffer[k]);
    }
}
    37ce:	ed 96       	adiw	r28, 0x3d	; 61
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	1f 91       	pop	r17
    37e0:	0f 91       	pop	r16
    37e2:	08 95       	ret

000037e4 <KEYPAD_voidini>:
		{'4','5','6', '*'},
		{'1','2','3', '-'},
		{'N','0','=', '+'}
};

void 	KEYPAD_voidini	(void){
    37e4:	df 93       	push	r29
    37e6:	cf 93       	push	r28
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW0);
    37ec:	a4 e3       	ldi	r26, 0x34	; 52
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	e4 e3       	ldi	r30, 0x34	; 52
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	81 60       	ori	r24, 0x01	; 1
    37f8:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW1);
    37fa:	a4 e3       	ldi	r26, 0x34	; 52
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	e4 e3       	ldi	r30, 0x34	; 52
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	82 60       	ori	r24, 0x02	; 2
    3806:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW2);
    3808:	a4 e3       	ldi	r26, 0x34	; 52
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e4 e3       	ldi	r30, 0x34	; 52
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	84 60       	ori	r24, 0x04	; 4
    3814:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW3);
    3816:	a4 e3       	ldi	r26, 0x34	; 52
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	e4 e3       	ldi	r30, 0x34	; 52
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	80 81       	ld	r24, Z
    3820:	88 60       	ori	r24, 0x08	; 8
    3822:	8c 93       	st	X, r24
	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM0);
    3824:	a4 e3       	ldi	r26, 0x34	; 52
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e4 e3       	ldi	r30, 0x34	; 52
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	8f 7e       	andi	r24, 0xEF	; 239
    3830:	8c 93       	st	X, r24
	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM1);
    3832:	a4 e3       	ldi	r26, 0x34	; 52
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e4 e3       	ldi	r30, 0x34	; 52
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	8f 7d       	andi	r24, 0xDF	; 223
    383e:	8c 93       	st	X, r24
	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM2);
    3840:	a4 e3       	ldi	r26, 0x34	; 52
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	e4 e3       	ldi	r30, 0x34	; 52
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	8f 7b       	andi	r24, 0xBF	; 191
    384c:	8c 93       	st	X, r24
	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM3);
    384e:	a4 e3       	ldi	r26, 0x34	; 52
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	e4 e3       	ldi	r30, 0x34	; 52
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	8f 77       	andi	r24, 0x7F	; 127
    385a:	8c 93       	st	X, r24
	KEYPAD_PORT=0xFF;
    385c:	e5 e3       	ldi	r30, 0x35	; 53
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	8f ef       	ldi	r24, 0xFF	; 255
    3862:	80 83       	st	Z, r24

}
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	08 95       	ret

0000386a <KEYPAD_u8Scan>:
u8 		KEYPAD_u8Scan	(void){
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	61 97       	sbiw	r28, 0x11	; 17
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	de bf       	out	0x3e, r29	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowsCounter=0;
    387e:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColumnCounter=0;
    3880:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8PressedKey='\0';
    3882:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    3884:	19 8a       	std	Y+17, r1	; 0x11
    3886:	dd c0       	rjmp	.+442    	; 0x3a42 <KEYPAD_u8Scan+0x1d8>
		CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
    3888:	a5 e3       	ldi	r26, 0x35	; 53
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	e5 e3       	ldi	r30, 0x35	; 53
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	48 2f       	mov	r20, r24
    3894:	89 89       	ldd	r24, Y+17	; 0x11
    3896:	88 2f       	mov	r24, r24
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	fc 01       	movw	r30, r24
    389c:	ed 50       	subi	r30, 0x0D	; 13
    389e:	fe 4f       	sbci	r31, 0xFE	; 254
    38a0:	80 81       	ld	r24, Z
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	02 2e       	mov	r0, r18
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <KEYPAD_u8Scan+0x48>
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	0a 94       	dec	r0
    38b4:	e2 f7       	brpl	.-8      	; 0x38ae <KEYPAD_u8Scan+0x44>
    38b6:	80 95       	com	r24
    38b8:	84 23       	and	r24, r20
    38ba:	8c 93       	st	X, r24
		for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    38bc:	18 8a       	std	Y+16, r1	; 0x10
    38be:	a1 c0       	rjmp	.+322    	; 0x3a02 <KEYPAD_u8Scan+0x198>
				if(GET_BIT(KEYPAD_PIN,COLUMS[Local_u8ColumnCounter])==0){
    38c0:	e3 e3       	ldi	r30, 0x33	; 51
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	88 89       	ldd	r24, Y+16	; 0x10
    38cc:	88 2f       	mov	r24, r24
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	fc 01       	movw	r30, r24
    38d2:	e9 50       	subi	r30, 0x09	; 9
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	80 81       	ld	r24, Z
    38d8:	88 2f       	mov	r24, r24
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	a9 01       	movw	r20, r18
    38de:	02 c0       	rjmp	.+4      	; 0x38e4 <KEYPAD_u8Scan+0x7a>
    38e0:	55 95       	asr	r21
    38e2:	47 95       	ror	r20
    38e4:	8a 95       	dec	r24
    38e6:	e2 f7       	brpl	.-8      	; 0x38e0 <KEYPAD_u8Scan+0x76>
    38e8:	ca 01       	movw	r24, r20
    38ea:	81 70       	andi	r24, 0x01	; 1
    38ec:	90 70       	andi	r25, 0x00	; 0
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	09 f0       	breq	.+2      	; 0x38f4 <KEYPAD_u8Scan+0x8a>
    38f2:	84 c0       	rjmp	.+264    	; 0x39fc <KEYPAD_u8Scan+0x192>
					Local_u8PressedKey=KEYS[Local_u8RowsCounter][Local_u8ColumnCounter];
    38f4:	89 89       	ldd	r24, Y+17	; 0x11
    38f6:	48 2f       	mov	r20, r24
    38f8:	50 e0       	ldi	r21, 0x00	; 0
    38fa:	88 89       	ldd	r24, Y+16	; 0x10
    38fc:	28 2f       	mov	r18, r24
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	ca 01       	movw	r24, r20
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	82 0f       	add	r24, r18
    390c:	93 1f       	adc	r25, r19
    390e:	fc 01       	movw	r30, r24
    3910:	e5 50       	subi	r30, 0x05	; 5
    3912:	fe 4f       	sbci	r31, 0xFE	; 254
    3914:	80 81       	ld	r24, Z
    3916:	8f 87       	std	Y+15, r24	; 0x0f
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	a0 e2       	ldi	r26, 0x20	; 32
    391e:	b1 e4       	ldi	r27, 0x41	; 65
    3920:	8b 87       	std	Y+11, r24	; 0x0b
    3922:	9c 87       	std	Y+12, r25	; 0x0c
    3924:	ad 87       	std	Y+13, r26	; 0x0d
    3926:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3928:	6b 85       	ldd	r22, Y+11	; 0x0b
    392a:	7c 85       	ldd	r23, Y+12	; 0x0c
    392c:	8d 85       	ldd	r24, Y+13	; 0x0d
    392e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	4a ef       	ldi	r20, 0xFA	; 250
    3936:	54 e4       	ldi	r21, 0x44	; 68
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	8f 83       	std	Y+7, r24	; 0x07
    3942:	98 87       	std	Y+8, r25	; 0x08
    3944:	a9 87       	std	Y+9, r26	; 0x09
    3946:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3948:	6f 81       	ldd	r22, Y+7	; 0x07
    394a:	78 85       	ldd	r23, Y+8	; 0x08
    394c:	89 85       	ldd	r24, Y+9	; 0x09
    394e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	5f e3       	ldi	r21, 0x3F	; 63
    3958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395c:	88 23       	and	r24, r24
    395e:	2c f4       	brge	.+10     	; 0x396a <KEYPAD_u8Scan+0x100>
		__ticks = 1;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	8d 83       	std	Y+5, r24	; 0x05
    3968:	3f c0       	rjmp	.+126    	; 0x39e8 <KEYPAD_u8Scan+0x17e>
	else if (__tmp > 65535)
    396a:	6f 81       	ldd	r22, Y+7	; 0x07
    396c:	78 85       	ldd	r23, Y+8	; 0x08
    396e:	89 85       	ldd	r24, Y+9	; 0x09
    3970:	9a 85       	ldd	r25, Y+10	; 0x0a
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	3f ef       	ldi	r19, 0xFF	; 255
    3976:	4f e7       	ldi	r20, 0x7F	; 127
    3978:	57 e4       	ldi	r21, 0x47	; 71
    397a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397e:	18 16       	cp	r1, r24
    3980:	4c f5       	brge	.+82     	; 0x39d4 <KEYPAD_u8Scan+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3982:	6b 85       	ldd	r22, Y+11	; 0x0b
    3984:	7c 85       	ldd	r23, Y+12	; 0x0c
    3986:	8d 85       	ldd	r24, Y+13	; 0x0d
    3988:	9e 85       	ldd	r25, Y+14	; 0x0e
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e2       	ldi	r20, 0x20	; 32
    3990:	51 e4       	ldi	r21, 0x41	; 65
    3992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	9e 83       	std	Y+6, r25	; 0x06
    39a8:	8d 83       	std	Y+5, r24	; 0x05
    39aa:	0f c0       	rjmp	.+30     	; 0x39ca <KEYPAD_u8Scan+0x160>
    39ac:	88 ec       	ldi	r24, 0xC8	; 200
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	9c 83       	std	Y+4, r25	; 0x04
    39b2:	8b 83       	std	Y+3, r24	; 0x03
    39b4:	8b 81       	ldd	r24, Y+3	; 0x03
    39b6:	9c 81       	ldd	r25, Y+4	; 0x04
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <KEYPAD_u8Scan+0x14e>
    39bc:	9c 83       	std	Y+4, r25	; 0x04
    39be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c0:	8d 81       	ldd	r24, Y+5	; 0x05
    39c2:	9e 81       	ldd	r25, Y+6	; 0x06
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ca:	8d 81       	ldd	r24, Y+5	; 0x05
    39cc:	9e 81       	ldd	r25, Y+6	; 0x06
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	69 f7       	brne	.-38     	; 0x39ac <KEYPAD_u8Scan+0x142>
    39d2:	14 c0       	rjmp	.+40     	; 0x39fc <KEYPAD_u8Scan+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d4:	6f 81       	ldd	r22, Y+7	; 0x07
    39d6:	78 85       	ldd	r23, Y+8	; 0x08
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	9a 85       	ldd	r25, Y+10	; 0x0a
    39dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	9e 83       	std	Y+6, r25	; 0x06
    39e6:	8d 83       	std	Y+5, r24	; 0x05
    39e8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ea:	9e 81       	ldd	r25, Y+6	; 0x06
    39ec:	9a 83       	std	Y+2, r25	; 0x02
    39ee:	89 83       	std	Y+1, r24	; 0x01
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	9a 81       	ldd	r25, Y+2	; 0x02
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	f1 f7       	brne	.-4      	; 0x39f4 <KEYPAD_u8Scan+0x18a>
    39f8:	9a 83       	std	Y+2, r25	; 0x02
    39fa:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
		CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
		for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    39fc:	88 89       	ldd	r24, Y+16	; 0x10
    39fe:	8f 5f       	subi	r24, 0xFF	; 255
    3a00:	88 8b       	std	Y+16, r24	; 0x10
    3a02:	88 89       	ldd	r24, Y+16	; 0x10
    3a04:	84 30       	cpi	r24, 0x04	; 4
    3a06:	08 f4       	brcc	.+2      	; 0x3a0a <KEYPAD_u8Scan+0x1a0>
    3a08:	5b cf       	rjmp	.-330    	; 0x38c0 <KEYPAD_u8Scan+0x56>
				}
				else{

				}
		}
		SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW
    3a0a:	a5 e3       	ldi	r26, 0x35	; 53
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	e5 e3       	ldi	r30, 0x35	; 53
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	48 2f       	mov	r20, r24
    3a16:	89 89       	ldd	r24, Y+17	; 0x11
    3a18:	88 2f       	mov	r24, r24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	ed 50       	subi	r30, 0x0D	; 13
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	80 81       	ld	r24, Z
    3a24:	28 2f       	mov	r18, r24
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	02 2e       	mov	r0, r18
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <KEYPAD_u8Scan+0x1ca>
    3a30:	88 0f       	add	r24, r24
    3a32:	99 1f       	adc	r25, r25
    3a34:	0a 94       	dec	r0
    3a36:	e2 f7       	brpl	.-8      	; 0x3a30 <KEYPAD_u8Scan+0x1c6>
    3a38:	84 2b       	or	r24, r20
    3a3a:	8c 93       	st	X, r24
}
u8 		KEYPAD_u8Scan	(void){
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    3a3c:	89 89       	ldd	r24, Y+17	; 0x11
    3a3e:	8f 5f       	subi	r24, 0xFF	; 255
    3a40:	89 8b       	std	Y+17, r24	; 0x11
    3a42:	89 89       	ldd	r24, Y+17	; 0x11
    3a44:	84 30       	cpi	r24, 0x04	; 4
    3a46:	08 f4       	brcc	.+2      	; 0x3a4a <KEYPAD_u8Scan+0x1e0>
    3a48:	1f cf       	rjmp	.-450    	; 0x3888 <KEYPAD_u8Scan+0x1e>

				}
		}
		SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW
	}
	return Local_u8PressedKey;
    3a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3a4c:	61 96       	adiw	r28, 0x11	; 17
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	08 95       	ret

00003a5e <KEYPAD_u8ScanWithStop>:

u8 		KEYPAD_u8ScanWithStop	(void){
    3a5e:	df 93       	push	r29
    3a60:	cf 93       	push	r28
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	61 97       	sbiw	r28, 0x11	; 17
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowsCounter=0;
    3a72:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColumnCounter=0;
    3a74:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8PressedKey='\0';
    3a76:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    3a78:	19 8a       	std	Y+17, r1	; 0x11
    3a7a:	f6 c0       	rjmp	.+492    	; 0x3c68 <KEYPAD_u8ScanWithStop+0x20a>
		CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
    3a7c:	a5 e3       	ldi	r26, 0x35	; 53
    3a7e:	b0 e0       	ldi	r27, 0x00	; 0
    3a80:	e5 e3       	ldi	r30, 0x35	; 53
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	80 81       	ld	r24, Z
    3a86:	48 2f       	mov	r20, r24
    3a88:	89 89       	ldd	r24, Y+17	; 0x11
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	fc 01       	movw	r30, r24
    3a90:	ed 50       	subi	r30, 0x0D	; 13
    3a92:	fe 4f       	sbci	r31, 0xFE	; 254
    3a94:	80 81       	ld	r24, Z
    3a96:	28 2f       	mov	r18, r24
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	02 2e       	mov	r0, r18
    3aa0:	02 c0       	rjmp	.+4      	; 0x3aa6 <KEYPAD_u8ScanWithStop+0x48>
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	0a 94       	dec	r0
    3aa8:	e2 f7       	brpl	.-8      	; 0x3aa2 <KEYPAD_u8ScanWithStop+0x44>
    3aaa:	80 95       	com	r24
    3aac:	84 23       	and	r24, r20
    3aae:	8c 93       	st	X, r24
		for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    3ab0:	18 8a       	std	Y+16, r1	; 0x10
    3ab2:	ba c0       	rjmp	.+372    	; 0x3c28 <KEYPAD_u8ScanWithStop+0x1ca>
				if(GET_BIT(KEYPAD_PIN,COLUMS[Local_u8ColumnCounter])==0){
    3ab4:	e3 e3       	ldi	r30, 0x33	; 51
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	28 2f       	mov	r18, r24
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	88 89       	ldd	r24, Y+16	; 0x10
    3ac0:	88 2f       	mov	r24, r24
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	e9 50       	subi	r30, 0x09	; 9
    3ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aca:	80 81       	ld	r24, Z
    3acc:	88 2f       	mov	r24, r24
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	a9 01       	movw	r20, r18
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <KEYPAD_u8ScanWithStop+0x7a>
    3ad4:	55 95       	asr	r21
    3ad6:	47 95       	ror	r20
    3ad8:	8a 95       	dec	r24
    3ada:	e2 f7       	brpl	.-8      	; 0x3ad4 <KEYPAD_u8ScanWithStop+0x76>
    3adc:	ca 01       	movw	r24, r20
    3ade:	81 70       	andi	r24, 0x01	; 1
    3ae0:	90 70       	andi	r25, 0x00	; 0
    3ae2:	00 97       	sbiw	r24, 0x00	; 0
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <KEYPAD_u8ScanWithStop+0x8a>
    3ae6:	9d c0       	rjmp	.+314    	; 0x3c22 <KEYPAD_u8ScanWithStop+0x1c4>
					Local_u8PressedKey=KEYS[Local_u8RowsCounter][Local_u8ColumnCounter];
    3ae8:	89 89       	ldd	r24, Y+17	; 0x11
    3aea:	48 2f       	mov	r20, r24
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	88 89       	ldd	r24, Y+16	; 0x10
    3af0:	28 2f       	mov	r18, r24
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	ca 01       	movw	r24, r20
    3af6:	88 0f       	add	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	88 0f       	add	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	82 0f       	add	r24, r18
    3b00:	93 1f       	adc	r25, r19
    3b02:	fc 01       	movw	r30, r24
    3b04:	e5 50       	subi	r30, 0x05	; 5
    3b06:	fe 4f       	sbci	r31, 0xFE	; 254
    3b08:	80 81       	ld	r24, Z
    3b0a:	8f 87       	std	Y+15, r24	; 0x0f
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	a0 e2       	ldi	r26, 0x20	; 32
    3b12:	b1 e4       	ldi	r27, 0x41	; 65
    3b14:	8b 87       	std	Y+11, r24	; 0x0b
    3b16:	9c 87       	std	Y+12, r25	; 0x0c
    3b18:	ad 87       	std	Y+13, r26	; 0x0d
    3b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	4a ef       	ldi	r20, 0xFA	; 250
    3b2a:	54 e4       	ldi	r21, 0x44	; 68
    3b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8f 83       	std	Y+7, r24	; 0x07
    3b36:	98 87       	std	Y+8, r25	; 0x08
    3b38:	a9 87       	std	Y+9, r26	; 0x09
    3b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3e:	78 85       	ldd	r23, Y+8	; 0x08
    3b40:	89 85       	ldd	r24, Y+9	; 0x09
    3b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e8       	ldi	r20, 0x80	; 128
    3b4a:	5f e3       	ldi	r21, 0x3F	; 63
    3b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b50:	88 23       	and	r24, r24
    3b52:	2c f4       	brge	.+10     	; 0x3b5e <KEYPAD_u8ScanWithStop+0x100>
		__ticks = 1;
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
    3b5c:	3f c0       	rjmp	.+126    	; 0x3bdc <KEYPAD_u8ScanWithStop+0x17e>
	else if (__tmp > 65535)
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	3f ef       	ldi	r19, 0xFF	; 255
    3b6a:	4f e7       	ldi	r20, 0x7F	; 127
    3b6c:	57 e4       	ldi	r21, 0x47	; 71
    3b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b72:	18 16       	cp	r1, r24
    3b74:	4c f5       	brge	.+82     	; 0x3bc8 <KEYPAD_u8ScanWithStop+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	40 e2       	ldi	r20, 0x20	; 32
    3b84:	51 e4       	ldi	r21, 0x41	; 65
    3b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	9e 83       	std	Y+6, r25	; 0x06
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
    3b9e:	0f c0       	rjmp	.+30     	; 0x3bbe <KEYPAD_u8ScanWithStop+0x160>
    3ba0:	88 ec       	ldi	r24, 0xC8	; 200
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9c 83       	std	Y+4, r25	; 0x04
    3ba6:	8b 83       	std	Y+3, r24	; 0x03
    3ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    3baa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <KEYPAD_u8ScanWithStop+0x14e>
    3bb0:	9c 83       	std	Y+4, r25	; 0x04
    3bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	9e 83       	std	Y+6, r25	; 0x06
    3bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	69 f7       	brne	.-38     	; 0x3ba0 <KEYPAD_u8ScanWithStop+0x142>
    3bc6:	14 c0       	rjmp	.+40     	; 0x3bf0 <KEYPAD_u8ScanWithStop+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bca:	78 85       	ldd	r23, Y+8	; 0x08
    3bcc:	89 85       	ldd	r24, Y+9	; 0x09
    3bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	9e 83       	std	Y+6, r25	; 0x06
    3bda:	8d 83       	std	Y+5, r24	; 0x05
    3bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bde:	9e 81       	ldd	r25, Y+6	; 0x06
    3be0:	9a 83       	std	Y+2, r25	; 0x02
    3be2:	89 83       	std	Y+1, r24	; 0x01
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	9a 81       	ldd	r25, Y+2	; 0x02
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <KEYPAD_u8ScanWithStop+0x18a>
    3bec:	9a 83       	std	Y+2, r25	; 0x02
    3bee:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(10);//debouncing
					while(GET_BIT(KEYPAD_PIN,COLUMS[Local_u8ColumnCounter])==0);
    3bf0:	e3 e3       	ldi	r30, 0x33	; 51
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
    3bf6:	28 2f       	mov	r18, r24
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	88 89       	ldd	r24, Y+16	; 0x10
    3bfc:	88 2f       	mov	r24, r24
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	fc 01       	movw	r30, r24
    3c02:	e9 50       	subi	r30, 0x09	; 9
    3c04:	fe 4f       	sbci	r31, 0xFE	; 254
    3c06:	80 81       	ld	r24, Z
    3c08:	88 2f       	mov	r24, r24
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	a9 01       	movw	r20, r18
    3c0e:	02 c0       	rjmp	.+4      	; 0x3c14 <KEYPAD_u8ScanWithStop+0x1b6>
    3c10:	55 95       	asr	r21
    3c12:	47 95       	ror	r20
    3c14:	8a 95       	dec	r24
    3c16:	e2 f7       	brpl	.-8      	; 0x3c10 <KEYPAD_u8ScanWithStop+0x1b2>
    3c18:	ca 01       	movw	r24, r20
    3c1a:	81 70       	andi	r24, 0x01	; 1
    3c1c:	90 70       	andi	r25, 0x00	; 0
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	39 f3       	breq	.-50     	; 0x3bf0 <KEYPAD_u8ScanWithStop+0x192>
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
		CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
		for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    3c22:	88 89       	ldd	r24, Y+16	; 0x10
    3c24:	8f 5f       	subi	r24, 0xFF	; 255
    3c26:	88 8b       	std	Y+16, r24	; 0x10
    3c28:	88 89       	ldd	r24, Y+16	; 0x10
    3c2a:	84 30       	cpi	r24, 0x04	; 4
    3c2c:	08 f4       	brcc	.+2      	; 0x3c30 <KEYPAD_u8ScanWithStop+0x1d2>
    3c2e:	42 cf       	rjmp	.-380    	; 0x3ab4 <KEYPAD_u8ScanWithStop+0x56>
				}
				else{

				}
		}
		SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW
    3c30:	a5 e3       	ldi	r26, 0x35	; 53
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	e5 e3       	ldi	r30, 0x35	; 53
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	48 2f       	mov	r20, r24
    3c3c:	89 89       	ldd	r24, Y+17	; 0x11
    3c3e:	88 2f       	mov	r24, r24
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	fc 01       	movw	r30, r24
    3c44:	ed 50       	subi	r30, 0x0D	; 13
    3c46:	fe 4f       	sbci	r31, 0xFE	; 254
    3c48:	80 81       	ld	r24, Z
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	02 2e       	mov	r0, r18
    3c54:	02 c0       	rjmp	.+4      	; 0x3c5a <KEYPAD_u8ScanWithStop+0x1fc>
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	0a 94       	dec	r0
    3c5c:	e2 f7       	brpl	.-8      	; 0x3c56 <KEYPAD_u8ScanWithStop+0x1f8>
    3c5e:	84 2b       	or	r24, r20
    3c60:	8c 93       	st	X, r24

u8 		KEYPAD_u8ScanWithStop	(void){
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    3c62:	89 89       	ldd	r24, Y+17	; 0x11
    3c64:	8f 5f       	subi	r24, 0xFF	; 255
    3c66:	89 8b       	std	Y+17, r24	; 0x11
    3c68:	89 89       	ldd	r24, Y+17	; 0x11
    3c6a:	84 30       	cpi	r24, 0x04	; 4
    3c6c:	08 f4       	brcc	.+2      	; 0x3c70 <KEYPAD_u8ScanWithStop+0x212>
    3c6e:	06 cf       	rjmp	.-500    	; 0x3a7c <KEYPAD_u8ScanWithStop+0x1e>

				}
		}
		SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW
	}
	return Local_u8PressedKey;
    3c70:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3c72:	61 96       	adiw	r28, 0x11	; 17
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	cd bf       	out	0x3d, r28	; 61
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	08 95       	ret

00003c84 <send_char>:
#include "02-HAL/servo/servo.h"
#include "03-MCAL/DIO/DIO_interface.h"
#include "03-MCAL/UART/UART_interface.h"
#include "Main_Interface_1.h"

void send_char(u8 Tx_data){
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	0f 92       	push	r0
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	89 83       	std	Y+1, r24	; 0x01

	UART_voidSendData_Asynch(Tx_data);
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_voidSendData_Asynch>
	disable_tx();
    3c96:	0e 94 81 08 	call	0x1102	; 0x1102 <disable_tx>
}
    3c9a:	0f 90       	pop	r0
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <main>:

void do_option(u8 option);
u8 entered_mode = 0;
u8 takepasword = 1;

int main(void) {
    3ca2:	0f 93       	push	r16
    3ca4:	1f 93       	push	r17
    3ca6:	df 93       	push	r29
    3ca8:	cf 93       	push	r28
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	cd 54       	subi	r28, 0x4D	; 77
    3cb0:	d0 40       	sbci	r29, 0x00	; 0
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
		Servo_voidini();
    3cbc:	0e 94 d6 14 	call	0x29ac	; 0x29ac <Servo_voidini>
		UART_voidInit();
    3cc0:	0e 94 91 07 	call	0xf22	; 0xf22 <UART_voidInit>
		UARTTX_vidSetISR(send_char);
    3cc4:	82 e4       	ldi	r24, 0x42	; 66
    3cc6:	9e e1       	ldi	r25, 0x1E	; 30
    3cc8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <UARTTX_vidSetISR>
		Global_Interrupt_Enable();
    3ccc:	0e 94 75 07 	call	0xeea	; 0xeea <Global_Interrupt_Enable>

    KEYPAD_voidini();
    3cd0:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <KEYPAD_voidini>
    LCD_voidini();
    3cd4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_voidini>


    DIO_voidIniPins(DIOB, DIO_PIN2, DIO_OUTPUT);
    3cd8:	86 e3       	ldi	r24, 0x36	; 54
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	64 e0       	ldi	r22, 0x04	; 4
    3cde:	4f ef       	ldi	r20, 0xFF	; 255
    3ce0:	0e 94 4e 14 	call	0x289c	; 0x289c <DIO_voidIniPins>

    u8 pass_char = '\0';
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e3 5b       	subi	r30, 0xB3	; 179
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	10 82       	st	Z, r1
    u32 password = 0;
    3cec:	fe 01       	movw	r30, r28
    3cee:	e7 5b       	subi	r30, 0xB7	; 183
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	10 82       	st	Z, r1
    3cf4:	11 82       	std	Z+1, r1	; 0x01
    3cf6:	12 82       	std	Z+2, r1	; 0x02
    3cf8:	13 82       	std	Z+3, r1	; 0x03
    u8 first_time = 0;
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e8 5b       	subi	r30, 0xB8	; 184
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	10 82       	st	Z, r1

    u8 option = '\0';
    3d02:	fe 01       	movw	r30, r28
    3d04:	e9 5b       	subi	r30, 0xB9	; 185
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	10 82       	st	Z, r1

    LCD_voidwriteString((u8 *)"Enter The pass : ");
    3d0a:	80 e6       	ldi	r24, 0x60	; 96
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
    LCD_voidSetCursorLocation(1, 0);
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	60 e0       	ldi	r22, 0x00	; 0
    3d16:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <LCD_voidSetCursorLocation>
    3d1a:	61 c2       	rjmp	.+1218   	; 0x41de <main+0x53c>

    // Password entry loop
    while (takepasword == 1) {
        pass_char = KEYPAD_u8Scan();
    3d1c:	0e 94 35 1c 	call	0x386a	; 0x386a <KEYPAD_u8Scan>
    3d20:	fe 01       	movw	r30, r28
    3d22:	e3 5b       	subi	r30, 0xB3	; 179
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 83       	st	Z, r24
    3d28:	fe 01       	movw	r30, r28
    3d2a:	ed 5b       	subi	r30, 0xBD	; 189
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	a0 ea       	ldi	r26, 0xA0	; 160
    3d34:	b1 e4       	ldi	r27, 0x41	; 65
    3d36:	80 83       	st	Z, r24
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	a2 83       	std	Z+2, r26	; 0x02
    3d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3e:	8e 01       	movw	r16, r28
    3d40:	01 5c       	subi	r16, 0xC1	; 193
    3d42:	1f 4f       	sbci	r17, 0xFF	; 255
    3d44:	fe 01       	movw	r30, r28
    3d46:	ed 5b       	subi	r30, 0xBD	; 189
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	60 81       	ld	r22, Z
    3d4c:	71 81       	ldd	r23, Z+1	; 0x01
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	93 81       	ldd	r25, Z+3	; 0x03
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	4a ef       	ldi	r20, 0xFA	; 250
    3d58:	54 e4       	ldi	r21, 0x44	; 68
    3d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	f8 01       	movw	r30, r16
    3d64:	80 83       	st	Z, r24
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	a2 83       	std	Z+2, r26	; 0x02
    3d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	ff 96       	adiw	r30, 0x3f	; 63
    3d70:	60 81       	ld	r22, Z
    3d72:	71 81       	ldd	r23, Z+1	; 0x01
    3d74:	82 81       	ldd	r24, Z+2	; 0x02
    3d76:	93 81       	ldd	r25, Z+3	; 0x03
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	40 e8       	ldi	r20, 0x80	; 128
    3d7e:	5f e3       	ldi	r21, 0x3F	; 63
    3d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d84:	88 23       	and	r24, r24
    3d86:	2c f4       	brge	.+10     	; 0x3d92 <main+0xf0>
		__ticks = 1;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	9e af       	std	Y+62, r25	; 0x3e
    3d8e:	8d af       	std	Y+61, r24	; 0x3d
    3d90:	46 c0       	rjmp	.+140    	; 0x3e1e <main+0x17c>
	else if (__tmp > 65535)
    3d92:	fe 01       	movw	r30, r28
    3d94:	ff 96       	adiw	r30, 0x3f	; 63
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	3f ef       	ldi	r19, 0xFF	; 255
    3da2:	4f e7       	ldi	r20, 0x7F	; 127
    3da4:	57 e4       	ldi	r21, 0x47	; 71
    3da6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3daa:	18 16       	cp	r1, r24
    3dac:	64 f5       	brge	.+88     	; 0x3e06 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dae:	fe 01       	movw	r30, r28
    3db0:	ed 5b       	subi	r30, 0xBD	; 189
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	40 e2       	ldi	r20, 0x20	; 32
    3dc2:	51 e4       	ldi	r21, 0x41	; 65
    3dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	bc 01       	movw	r22, r24
    3dce:	cd 01       	movw	r24, r26
    3dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	9e af       	std	Y+62, r25	; 0x3e
    3dda:	8d af       	std	Y+61, r24	; 0x3d
    3ddc:	0f c0       	rjmp	.+30     	; 0x3dfc <main+0x15a>
    3dde:	88 ec       	ldi	r24, 0xC8	; 200
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	9c af       	std	Y+60, r25	; 0x3c
    3de4:	8b af       	std	Y+59, r24	; 0x3b
    3de6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3de8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dea:	01 97       	sbiw	r24, 0x01	; 1
    3dec:	f1 f7       	brne	.-4      	; 0x3dea <main+0x148>
    3dee:	9c af       	std	Y+60, r25	; 0x3c
    3df0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3df4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	9e af       	std	Y+62, r25	; 0x3e
    3dfa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	69 f7       	brne	.-38     	; 0x3dde <main+0x13c>
    3e04:	16 c0       	rjmp	.+44     	; 0x3e32 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e06:	fe 01       	movw	r30, r28
    3e08:	ff 96       	adiw	r30, 0x3f	; 63
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	9e af       	std	Y+62, r25	; 0x3e
    3e1c:	8d af       	std	Y+61, r24	; 0x3d
    3e1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e20:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e22:	9a af       	std	Y+58, r25	; 0x3a
    3e24:	89 af       	std	Y+57, r24	; 0x39
    3e26:	89 ad       	ldd	r24, Y+57	; 0x39
    3e28:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <main+0x188>
    3e2e:	9a af       	std	Y+58, r25	; 0x3a
    3e30:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(20);
        if (pass_char != '\0') {
    3e32:	fe 01       	movw	r30, r28
    3e34:	e3 5b       	subi	r30, 0xB3	; 179
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	80 81       	ld	r24, Z
    3e3a:	88 23       	and	r24, r24
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <main+0x19e>
    3e3e:	a8 c0       	rjmp	.+336    	; 0x3f90 <main+0x2ee>
            LCD_voidSendData(pass_char);
    3e40:	fe 01       	movw	r30, r28
    3e42:	e3 5b       	subi	r30, 0xB3	; 179
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	80 81       	ld	r24, Z
    3e48:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_voidSendData>
            password = password * 10 + (pass_char - '0');
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e7 5b       	subi	r30, 0xB7	; 183
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 81       	ld	r24, Z
    3e54:	91 81       	ldd	r25, Z+1	; 0x01
    3e56:	a2 81       	ldd	r26, Z+2	; 0x02
    3e58:	b3 81       	ldd	r27, Z+3	; 0x03
    3e5a:	2a e0       	ldi	r18, 0x0A	; 10
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	40 e0       	ldi	r20, 0x00	; 0
    3e60:	50 e0       	ldi	r21, 0x00	; 0
    3e62:	bc 01       	movw	r22, r24
    3e64:	cd 01       	movw	r24, r26
    3e66:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__mulsi3>
    3e6a:	9b 01       	movw	r18, r22
    3e6c:	ac 01       	movw	r20, r24
    3e6e:	fe 01       	movw	r30, r28
    3e70:	e3 5b       	subi	r30, 0xB3	; 179
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	80 81       	ld	r24, Z
    3e76:	88 2f       	mov	r24, r24
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	c0 97       	sbiw	r24, 0x30	; 48
    3e7c:	aa 27       	eor	r26, r26
    3e7e:	97 fd       	sbrc	r25, 7
    3e80:	a0 95       	com	r26
    3e82:	ba 2f       	mov	r27, r26
    3e84:	fe 01       	movw	r30, r28
    3e86:	e7 5b       	subi	r30, 0xB7	; 183
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	82 0f       	add	r24, r18
    3e8c:	93 1f       	adc	r25, r19
    3e8e:	a4 1f       	adc	r26, r20
    3e90:	b5 1f       	adc	r27, r21
    3e92:	80 83       	st	Z, r24
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	a2 83       	std	Z+2, r26	; 0x02
    3e98:	b3 83       	std	Z+3, r27	; 0x03
            first_time++;
    3e9a:	de 01       	movw	r26, r28
    3e9c:	a8 5b       	subi	r26, 0xB8	; 184
    3e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e8 5b       	subi	r30, 0xB8	; 184
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	80 81       	ld	r24, Z
    3ea8:	8f 5f       	subi	r24, 0xFF	; 255
    3eaa:	8c 93       	st	X, r24
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	aa e7       	ldi	r26, 0x7A	; 122
    3eb2:	b4 e4       	ldi	r27, 0x44	; 68
    3eb4:	8d ab       	std	Y+53, r24	; 0x35
    3eb6:	9e ab       	std	Y+54, r25	; 0x36
    3eb8:	af ab       	std	Y+55, r26	; 0x37
    3eba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ebc:	6d a9       	ldd	r22, Y+53	; 0x35
    3ebe:	7e a9       	ldd	r23, Y+54	; 0x36
    3ec0:	8f a9       	ldd	r24, Y+55	; 0x37
    3ec2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	4a ef       	ldi	r20, 0xFA	; 250
    3eca:	54 e4       	ldi	r21, 0x44	; 68
    3ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	89 ab       	std	Y+49, r24	; 0x31
    3ed6:	9a ab       	std	Y+50, r25	; 0x32
    3ed8:	ab ab       	std	Y+51, r26	; 0x33
    3eda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3edc:	69 a9       	ldd	r22, Y+49	; 0x31
    3ede:	7a a9       	ldd	r23, Y+50	; 0x32
    3ee0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	40 e8       	ldi	r20, 0x80	; 128
    3eea:	5f e3       	ldi	r21, 0x3F	; 63
    3eec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef0:	88 23       	and	r24, r24
    3ef2:	2c f4       	brge	.+10     	; 0x3efe <main+0x25c>
		__ticks = 1;
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	98 ab       	std	Y+48, r25	; 0x30
    3efa:	8f a7       	std	Y+47, r24	; 0x2f
    3efc:	3f c0       	rjmp	.+126    	; 0x3f7c <main+0x2da>
	else if (__tmp > 65535)
    3efe:	69 a9       	ldd	r22, Y+49	; 0x31
    3f00:	7a a9       	ldd	r23, Y+50	; 0x32
    3f02:	8b a9       	ldd	r24, Y+51	; 0x33
    3f04:	9c a9       	ldd	r25, Y+52	; 0x34
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	3f ef       	ldi	r19, 0xFF	; 255
    3f0a:	4f e7       	ldi	r20, 0x7F	; 127
    3f0c:	57 e4       	ldi	r21, 0x47	; 71
    3f0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f12:	18 16       	cp	r1, r24
    3f14:	4c f5       	brge	.+82     	; 0x3f68 <main+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f16:	6d a9       	ldd	r22, Y+53	; 0x35
    3f18:	7e a9       	ldd	r23, Y+54	; 0x36
    3f1a:	8f a9       	ldd	r24, Y+55	; 0x37
    3f1c:	98 ad       	ldd	r25, Y+56	; 0x38
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	40 e2       	ldi	r20, 0x20	; 32
    3f24:	51 e4       	ldi	r21, 0x41	; 65
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	bc 01       	movw	r22, r24
    3f30:	cd 01       	movw	r24, r26
    3f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	98 ab       	std	Y+48, r25	; 0x30
    3f3c:	8f a7       	std	Y+47, r24	; 0x2f
    3f3e:	0f c0       	rjmp	.+30     	; 0x3f5e <main+0x2bc>
    3f40:	88 ec       	ldi	r24, 0xC8	; 200
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	9e a7       	std	Y+46, r25	; 0x2e
    3f46:	8d a7       	std	Y+45, r24	; 0x2d
    3f48:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	f1 f7       	brne	.-4      	; 0x3f4c <main+0x2aa>
    3f50:	9e a7       	std	Y+46, r25	; 0x2e
    3f52:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f54:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f56:	98 a9       	ldd	r25, Y+48	; 0x30
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	98 ab       	std	Y+48, r25	; 0x30
    3f5c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f60:	98 a9       	ldd	r25, Y+48	; 0x30
    3f62:	00 97       	sbiw	r24, 0x00	; 0
    3f64:	69 f7       	brne	.-38     	; 0x3f40 <main+0x29e>
    3f66:	14 c0       	rjmp	.+40     	; 0x3f90 <main+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f68:	69 a9       	ldd	r22, Y+49	; 0x31
    3f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	98 ab       	std	Y+48, r25	; 0x30
    3f7a:	8f a7       	std	Y+47, r24	; 0x2f
    3f7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f7e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f80:	9c a7       	std	Y+44, r25	; 0x2c
    3f82:	8b a7       	std	Y+43, r24	; 0x2b
    3f84:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f86:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	f1 f7       	brne	.-4      	; 0x3f88 <main+0x2e6>
    3f8c:	9c a7       	std	Y+44, r25	; 0x2c
    3f8e:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(1000);
        }

        if (first_time == 4) {
    3f90:	fe 01       	movw	r30, r28
    3f92:	e8 5b       	subi	r30, 0xB8	; 184
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	80 81       	ld	r24, Z
    3f98:	84 30       	cpi	r24, 0x04	; 4
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <main+0x2fc>
    3f9c:	20 c1       	rjmp	.+576    	; 0x41de <main+0x53c>
            LCD_voidClearDisplay();
    3f9e:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_voidClearDisplay>
            if (password == (u32)Main_Password) {
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e7 5b       	subi	r30, 0xB7	; 183
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	80 81       	ld	r24, Z
    3faa:	91 81       	ldd	r25, Z+1	; 0x01
    3fac:	a2 81       	ldd	r26, Z+2	; 0x02
    3fae:	b3 81       	ldd	r27, Z+3	; 0x03
    3fb0:	86 3f       	cpi	r24, 0xF6	; 246
    3fb2:	f6 e0       	ldi	r31, 0x06	; 6
    3fb4:	9f 07       	cpc	r25, r31
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	af 07       	cpc	r26, r31
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	bf 07       	cpc	r27, r31
    3fbe:	09 f0       	breq	.+2      	; 0x3fc2 <main+0x320>
    3fc0:	7f c0       	rjmp	.+254    	; 0x40c0 <main+0x41e>
                LCD_voidwriteString((u8 *)"Correct Password");
    3fc2:	82 e7       	ldi	r24, 0x72	; 114
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
                Servo_voidMoveToLoction(90);
    3fca:	8a e5       	ldi	r24, 0x5A	; 90
    3fcc:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Servo_voidMoveToLoction>
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e8       	ldi	r25, 0x80	; 128
    3fd4:	ab e3       	ldi	r26, 0x3B	; 59
    3fd6:	b5 e4       	ldi	r27, 0x45	; 69
    3fd8:	8f a3       	std	Y+39, r24	; 0x27
    3fda:	98 a7       	std	Y+40, r25	; 0x28
    3fdc:	a9 a7       	std	Y+41, r26	; 0x29
    3fde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe0:	6f a1       	ldd	r22, Y+39	; 0x27
    3fe2:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe4:	89 a5       	ldd	r24, Y+41	; 0x29
    3fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	4a ef       	ldi	r20, 0xFA	; 250
    3fee:	54 e4       	ldi	r21, 0x44	; 68
    3ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	8b a3       	std	Y+35, r24	; 0x23
    3ffa:	9c a3       	std	Y+36, r25	; 0x24
    3ffc:	ad a3       	std	Y+37, r26	; 0x25
    3ffe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4000:	6b a1       	ldd	r22, Y+35	; 0x23
    4002:	7c a1       	ldd	r23, Y+36	; 0x24
    4004:	8d a1       	ldd	r24, Y+37	; 0x25
    4006:	9e a1       	ldd	r25, Y+38	; 0x26
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	40 e8       	ldi	r20, 0x80	; 128
    400e:	5f e3       	ldi	r21, 0x3F	; 63
    4010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4014:	88 23       	and	r24, r24
    4016:	2c f4       	brge	.+10     	; 0x4022 <main+0x380>
		__ticks = 1;
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	9a a3       	std	Y+34, r25	; 0x22
    401e:	89 a3       	std	Y+33, r24	; 0x21
    4020:	3f c0       	rjmp	.+126    	; 0x40a0 <main+0x3fe>
	else if (__tmp > 65535)
    4022:	6b a1       	ldd	r22, Y+35	; 0x23
    4024:	7c a1       	ldd	r23, Y+36	; 0x24
    4026:	8d a1       	ldd	r24, Y+37	; 0x25
    4028:	9e a1       	ldd	r25, Y+38	; 0x26
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	3f ef       	ldi	r19, 0xFF	; 255
    402e:	4f e7       	ldi	r20, 0x7F	; 127
    4030:	57 e4       	ldi	r21, 0x47	; 71
    4032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4036:	18 16       	cp	r1, r24
    4038:	4c f5       	brge	.+82     	; 0x408c <main+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    403a:	6f a1       	ldd	r22, Y+39	; 0x27
    403c:	78 a5       	ldd	r23, Y+40	; 0x28
    403e:	89 a5       	ldd	r24, Y+41	; 0x29
    4040:	9a a5       	ldd	r25, Y+42	; 0x2a
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	40 e2       	ldi	r20, 0x20	; 32
    4048:	51 e4       	ldi	r21, 0x41	; 65
    404a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	bc 01       	movw	r22, r24
    4054:	cd 01       	movw	r24, r26
    4056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	9a a3       	std	Y+34, r25	; 0x22
    4060:	89 a3       	std	Y+33, r24	; 0x21
    4062:	0f c0       	rjmp	.+30     	; 0x4082 <main+0x3e0>
    4064:	88 ec       	ldi	r24, 0xC8	; 200
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	98 a3       	std	Y+32, r25	; 0x20
    406a:	8f 8f       	std	Y+31, r24	; 0x1f
    406c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    406e:	98 a1       	ldd	r25, Y+32	; 0x20
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	f1 f7       	brne	.-4      	; 0x4070 <main+0x3ce>
    4074:	98 a3       	std	Y+32, r25	; 0x20
    4076:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4078:	89 a1       	ldd	r24, Y+33	; 0x21
    407a:	9a a1       	ldd	r25, Y+34	; 0x22
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	9a a3       	std	Y+34, r25	; 0x22
    4080:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4082:	89 a1       	ldd	r24, Y+33	; 0x21
    4084:	9a a1       	ldd	r25, Y+34	; 0x22
    4086:	00 97       	sbiw	r24, 0x00	; 0
    4088:	69 f7       	brne	.-38     	; 0x4064 <main+0x3c2>
    408a:	14 c0       	rjmp	.+40     	; 0x40b4 <main+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    408c:	6b a1       	ldd	r22, Y+35	; 0x23
    408e:	7c a1       	ldd	r23, Y+36	; 0x24
    4090:	8d a1       	ldd	r24, Y+37	; 0x25
    4092:	9e a1       	ldd	r25, Y+38	; 0x26
    4094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	9a a3       	std	Y+34, r25	; 0x22
    409e:	89 a3       	std	Y+33, r24	; 0x21
    40a0:	89 a1       	ldd	r24, Y+33	; 0x21
    40a2:	9a a1       	ldd	r25, Y+34	; 0x22
    40a4:	9e 8f       	std	Y+30, r25	; 0x1e
    40a6:	8d 8f       	std	Y+29, r24	; 0x1d
    40a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40ac:	01 97       	sbiw	r24, 0x01	; 1
    40ae:	f1 f7       	brne	.-4      	; 0x40ac <main+0x40a>
    40b0:	9e 8f       	std	Y+30, r25	; 0x1e
    40b2:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(3000);
                Servo_voidMoveToLoction(0);
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Servo_voidMoveToLoction>
                takepasword = 0;
    40ba:	10 92 f2 01 	sts	0x01F2, r1
    40be:	8f c0       	rjmp	.+286    	; 0x41de <main+0x53c>
            } else {
                LCD_voidwriteString((u8 *)"Wrong Password");
    40c0:	83 e8       	ldi	r24, 0x83	; 131
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	aa e7       	ldi	r26, 0x7A	; 122
    40ce:	b4 e4       	ldi	r27, 0x44	; 68
    40d0:	89 8f       	std	Y+25, r24	; 0x19
    40d2:	9a 8f       	std	Y+26, r25	; 0x1a
    40d4:	ab 8f       	std	Y+27, r26	; 0x1b
    40d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d8:	69 8d       	ldd	r22, Y+25	; 0x19
    40da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	4a ef       	ldi	r20, 0xFA	; 250
    40e6:	54 e4       	ldi	r21, 0x44	; 68
    40e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	8d 8b       	std	Y+21, r24	; 0x15
    40f2:	9e 8b       	std	Y+22, r25	; 0x16
    40f4:	af 8b       	std	Y+23, r26	; 0x17
    40f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40f8:	6d 89       	ldd	r22, Y+21	; 0x15
    40fa:	7e 89       	ldd	r23, Y+22	; 0x16
    40fc:	8f 89       	ldd	r24, Y+23	; 0x17
    40fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	40 e8       	ldi	r20, 0x80	; 128
    4106:	5f e3       	ldi	r21, 0x3F	; 63
    4108:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    410c:	88 23       	and	r24, r24
    410e:	2c f4       	brge	.+10     	; 0x411a <main+0x478>
		__ticks = 1;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	9c 8b       	std	Y+20, r25	; 0x14
    4116:	8b 8b       	std	Y+19, r24	; 0x13
    4118:	3f c0       	rjmp	.+126    	; 0x4198 <main+0x4f6>
	else if (__tmp > 65535)
    411a:	6d 89       	ldd	r22, Y+21	; 0x15
    411c:	7e 89       	ldd	r23, Y+22	; 0x16
    411e:	8f 89       	ldd	r24, Y+23	; 0x17
    4120:	98 8d       	ldd	r25, Y+24	; 0x18
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	3f ef       	ldi	r19, 0xFF	; 255
    4126:	4f e7       	ldi	r20, 0x7F	; 127
    4128:	57 e4       	ldi	r21, 0x47	; 71
    412a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    412e:	18 16       	cp	r1, r24
    4130:	4c f5       	brge	.+82     	; 0x4184 <main+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4132:	69 8d       	ldd	r22, Y+25	; 0x19
    4134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e2       	ldi	r20, 0x20	; 32
    4140:	51 e4       	ldi	r21, 0x41	; 65
    4142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	bc 01       	movw	r22, r24
    414c:	cd 01       	movw	r24, r26
    414e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	9c 8b       	std	Y+20, r25	; 0x14
    4158:	8b 8b       	std	Y+19, r24	; 0x13
    415a:	0f c0       	rjmp	.+30     	; 0x417a <main+0x4d8>
    415c:	88 ec       	ldi	r24, 0xC8	; 200
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	9a 8b       	std	Y+18, r25	; 0x12
    4162:	89 8b       	std	Y+17, r24	; 0x11
    4164:	89 89       	ldd	r24, Y+17	; 0x11
    4166:	9a 89       	ldd	r25, Y+18	; 0x12
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	f1 f7       	brne	.-4      	; 0x4168 <main+0x4c6>
    416c:	9a 8b       	std	Y+18, r25	; 0x12
    416e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4170:	8b 89       	ldd	r24, Y+19	; 0x13
    4172:	9c 89       	ldd	r25, Y+20	; 0x14
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	9c 8b       	std	Y+20, r25	; 0x14
    4178:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417a:	8b 89       	ldd	r24, Y+19	; 0x13
    417c:	9c 89       	ldd	r25, Y+20	; 0x14
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	69 f7       	brne	.-38     	; 0x415c <main+0x4ba>
    4182:	14 c0       	rjmp	.+40     	; 0x41ac <main+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4184:	6d 89       	ldd	r22, Y+21	; 0x15
    4186:	7e 89       	ldd	r23, Y+22	; 0x16
    4188:	8f 89       	ldd	r24, Y+23	; 0x17
    418a:	98 8d       	ldd	r25, Y+24	; 0x18
    418c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	9c 8b       	std	Y+20, r25	; 0x14
    4196:	8b 8b       	std	Y+19, r24	; 0x13
    4198:	8b 89       	ldd	r24, Y+19	; 0x13
    419a:	9c 89       	ldd	r25, Y+20	; 0x14
    419c:	98 8b       	std	Y+16, r25	; 0x10
    419e:	8f 87       	std	Y+15, r24	; 0x0f
    41a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a2:	98 89       	ldd	r25, Y+16	; 0x10
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <main+0x502>
    41a8:	98 8b       	std	Y+16, r25	; 0x10
    41aa:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(1000);
                // Reset for another attempt
                pass_char = '\0';
    41ac:	fe 01       	movw	r30, r28
    41ae:	e3 5b       	subi	r30, 0xB3	; 179
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	10 82       	st	Z, r1
                password = 0;
    41b4:	fe 01       	movw	r30, r28
    41b6:	e7 5b       	subi	r30, 0xB7	; 183
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	10 82       	st	Z, r1
    41bc:	11 82       	std	Z+1, r1	; 0x01
    41be:	12 82       	std	Z+2, r1	; 0x02
    41c0:	13 82       	std	Z+3, r1	; 0x03
                first_time = 0;
    41c2:	fe 01       	movw	r30, r28
    41c4:	e8 5b       	subi	r30, 0xB8	; 184
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	10 82       	st	Z, r1
                LCD_voidClearDisplay();
    41ca:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_voidClearDisplay>
                LCD_voidwriteString((u8 *)"Enter The pass : ");
    41ce:	80 e6       	ldi	r24, 0x60	; 96
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
                LCD_voidSetCursorLocation(1, 0);
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <LCD_voidSetCursorLocation>

    LCD_voidwriteString((u8 *)"Enter The pass : ");
    LCD_voidSetCursorLocation(1, 0);

    // Password entry loop
    while (takepasword == 1) {
    41de:	80 91 f2 01 	lds	r24, 0x01F2
    41e2:	81 30       	cpi	r24, 0x01	; 1
    41e4:	09 f4       	brne	.+2      	; 0x41e8 <main+0x546>
    41e6:	9a cd       	rjmp	.-1228   	; 0x3d1c <main+0x7a>
                LCD_voidSetCursorLocation(1, 0);
            }
        }
    }

    LCD_voidClearDisplay();
    41e8:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_voidClearDisplay>
    41ec:	9a c0       	rjmp	.+308    	; 0x4322 <main+0x680>

    // Option selection loop
    while (takepasword == 0) {
        LCD_voidSetCursorLocation(0, 0);
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	60 e0       	ldi	r22, 0x00	; 0
    41f2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <LCD_voidSetCursorLocation>
        LCD_voidwriteString((u8 *)"Temp 1, Light 2");
    41f6:	82 e9       	ldi	r24, 0x92	; 146
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
        LCD_voidSetCursorLocation(1, 0);
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	60 e0       	ldi	r22, 0x00	; 0
    4202:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <LCD_voidSetCursorLocation>
        LCD_voidwriteString((u8 *)"Enter: ");
    4206:	82 ea       	ldi	r24, 0xA2	; 162
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>

        while (1) {
            option = KEYPAD_u8Scan();
    420e:	0e 94 35 1c 	call	0x386a	; 0x386a <KEYPAD_u8Scan>
    4212:	fe 01       	movw	r30, r28
    4214:	e9 5b       	subi	r30, 0xB9	; 185
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	80 83       	st	Z, r24
            if (option != '\0') {
    421a:	fe 01       	movw	r30, r28
    421c:	e9 5b       	subi	r30, 0xB9	; 185
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	80 81       	ld	r24, Z
    4222:	88 23       	and	r24, r24
    4224:	a1 f3       	breq	.-24     	; 0x420e <main+0x56c>
                LCD_voidSendData(option);
    4226:	fe 01       	movw	r30, r28
    4228:	e9 5b       	subi	r30, 0xB9	; 185
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	80 81       	ld	r24, Z
    422e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_voidSendData>
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	aa e7       	ldi	r26, 0x7A	; 122
    4238:	b4 e4       	ldi	r27, 0x44	; 68
    423a:	8b 87       	std	Y+11, r24	; 0x0b
    423c:	9c 87       	std	Y+12, r25	; 0x0c
    423e:	ad 87       	std	Y+13, r26	; 0x0d
    4240:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4242:	6b 85       	ldd	r22, Y+11	; 0x0b
    4244:	7c 85       	ldd	r23, Y+12	; 0x0c
    4246:	8d 85       	ldd	r24, Y+13	; 0x0d
    4248:	9e 85       	ldd	r25, Y+14	; 0x0e
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	4a ef       	ldi	r20, 0xFA	; 250
    4250:	54 e4       	ldi	r21, 0x44	; 68
    4252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	8f 83       	std	Y+7, r24	; 0x07
    425c:	98 87       	std	Y+8, r25	; 0x08
    425e:	a9 87       	std	Y+9, r26	; 0x09
    4260:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4262:	6f 81       	ldd	r22, Y+7	; 0x07
    4264:	78 85       	ldd	r23, Y+8	; 0x08
    4266:	89 85       	ldd	r24, Y+9	; 0x09
    4268:	9a 85       	ldd	r25, Y+10	; 0x0a
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e8       	ldi	r20, 0x80	; 128
    4270:	5f e3       	ldi	r21, 0x3F	; 63
    4272:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4276:	88 23       	and	r24, r24
    4278:	2c f4       	brge	.+10     	; 0x4284 <main+0x5e2>
		__ticks = 1;
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	9e 83       	std	Y+6, r25	; 0x06
    4280:	8d 83       	std	Y+5, r24	; 0x05
    4282:	3f c0       	rjmp	.+126    	; 0x4302 <main+0x660>
	else if (__tmp > 65535)
    4284:	6f 81       	ldd	r22, Y+7	; 0x07
    4286:	78 85       	ldd	r23, Y+8	; 0x08
    4288:	89 85       	ldd	r24, Y+9	; 0x09
    428a:	9a 85       	ldd	r25, Y+10	; 0x0a
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	3f ef       	ldi	r19, 0xFF	; 255
    4290:	4f e7       	ldi	r20, 0x7F	; 127
    4292:	57 e4       	ldi	r21, 0x47	; 71
    4294:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4298:	18 16       	cp	r1, r24
    429a:	4c f5       	brge	.+82     	; 0x42ee <main+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    429c:	6b 85       	ldd	r22, Y+11	; 0x0b
    429e:	7c 85       	ldd	r23, Y+12	; 0x0c
    42a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e2       	ldi	r20, 0x20	; 32
    42aa:	51 e4       	ldi	r21, 0x41	; 65
    42ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	bc 01       	movw	r22, r24
    42b6:	cd 01       	movw	r24, r26
    42b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	9e 83       	std	Y+6, r25	; 0x06
    42c2:	8d 83       	std	Y+5, r24	; 0x05
    42c4:	0f c0       	rjmp	.+30     	; 0x42e4 <main+0x642>
    42c6:	88 ec       	ldi	r24, 0xC8	; 200
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	9c 83       	std	Y+4, r25	; 0x04
    42cc:	8b 83       	std	Y+3, r24	; 0x03
    42ce:	8b 81       	ldd	r24, Y+3	; 0x03
    42d0:	9c 81       	ldd	r25, Y+4	; 0x04
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	f1 f7       	brne	.-4      	; 0x42d2 <main+0x630>
    42d6:	9c 83       	std	Y+4, r25	; 0x04
    42d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	9e 81       	ldd	r25, Y+6	; 0x06
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	9e 83       	std	Y+6, r25	; 0x06
    42e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e4:	8d 81       	ldd	r24, Y+5	; 0x05
    42e6:	9e 81       	ldd	r25, Y+6	; 0x06
    42e8:	00 97       	sbiw	r24, 0x00	; 0
    42ea:	69 f7       	brne	.-38     	; 0x42c6 <main+0x624>
    42ec:	14 c0       	rjmp	.+40     	; 0x4316 <main+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ee:	6f 81       	ldd	r22, Y+7	; 0x07
    42f0:	78 85       	ldd	r23, Y+8	; 0x08
    42f2:	89 85       	ldd	r24, Y+9	; 0x09
    42f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	9e 83       	std	Y+6, r25	; 0x06
    4300:	8d 83       	std	Y+5, r24	; 0x05
    4302:	8d 81       	ldd	r24, Y+5	; 0x05
    4304:	9e 81       	ldd	r25, Y+6	; 0x06
    4306:	9a 83       	std	Y+2, r25	; 0x02
    4308:	89 83       	std	Y+1, r24	; 0x01
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	9a 81       	ldd	r25, Y+2	; 0x02
    430e:	01 97       	sbiw	r24, 0x01	; 1
    4310:	f1 f7       	brne	.-4      	; 0x430e <main+0x66c>
    4312:	9a 83       	std	Y+2, r25	; 0x02
    4314:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(1000);  // Small delay to allow the user to see their input
                do_option(option);
    4316:	fe 01       	movw	r30, r28
    4318:	e9 5b       	subi	r30, 0xB9	; 185
    431a:	ff 4f       	sbci	r31, 0xFF	; 255
    431c:	80 81       	ld	r24, Z
    431e:	0e 94 a4 21 	call	0x4348	; 0x4348 <do_option>
    }

    LCD_voidClearDisplay();

    // Option selection loop
    while (takepasword == 0) {
    4322:	80 91 f2 01 	lds	r24, 0x01F2
    4326:	88 23       	and	r24, r24
    4328:	09 f4       	brne	.+2      	; 0x432c <main+0x68a>
    432a:	61 cf       	rjmp	.-318    	; 0x41ee <main+0x54c>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
            }
        }
    }


}
    4330:	c3 5b       	subi	r28, 0xB3	; 179
    4332:	df 4f       	sbci	r29, 0xFF	; 255
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	08 95       	ret

00004348 <do_option>:

// Function to handle the option selected by the user
void do_option(u8 option) {
    4348:	0f 93       	push	r16
    434a:	1f 93       	push	r17
    434c:	df 93       	push	r29
    434e:	cf 93       	push	r28
    4350:	cd b7       	in	r28, 0x3d	; 61
    4352:	de b7       	in	r29, 0x3e	; 62
    4354:	c7 55       	subi	r28, 0x57	; 87
    4356:	d0 40       	sbci	r29, 0x00	; 0
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	f8 94       	cli
    435c:	de bf       	out	0x3e, r29	; 62
    435e:	0f be       	out	0x3f, r0	; 63
    4360:	cd bf       	out	0x3d, r28	; 61
    4362:	fe 01       	movw	r30, r28
    4364:	e9 5a       	subi	r30, 0xA9	; 169
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	80 83       	st	Z, r24
    u8 mode_char = '\0';
    436a:	fe 01       	movw	r30, r28
    436c:	ea 5a       	subi	r30, 0xAA	; 170
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	10 82       	st	Z, r1
    u8 selected_option = option;
    4372:	de 01       	movw	r26, r28
    4374:	ab 5a       	subi	r26, 0xAB	; 171
    4376:	bf 4f       	sbci	r27, 0xFF	; 255
    4378:	fe 01       	movw	r30, r28
    437a:	e9 5a       	subi	r30, 0xA9	; 169
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	80 81       	ld	r24, Z
    4380:	8c 93       	st	X, r24

    LCD_voidClearDisplay();
    4382:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_voidClearDisplay>

    if (selected_option == '1') {  // Temperature control
    4386:	fe 01       	movw	r30, r28
    4388:	eb 5a       	subi	r30, 0xAB	; 171
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	80 81       	ld	r24, Z
    438e:	81 33       	cpi	r24, 0x31	; 49
    4390:	29 f4       	brne	.+10     	; 0x439c <do_option+0x54>
        LCD_voidwriteString((u8 *)"Auto Temp 1,Man 2");
    4392:	8a ea       	ldi	r24, 0xAA	; 170
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
    439a:	0a c0       	rjmp	.+20     	; 0x43b0 <do_option+0x68>
    } else if (selected_option == '2') {  // Light control
    439c:	fe 01       	movw	r30, r28
    439e:	eb 5a       	subi	r30, 0xAB	; 171
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	80 81       	ld	r24, Z
    43a4:	82 33       	cpi	r24, 0x32	; 50
    43a6:	21 f4       	brne	.+8      	; 0x43b0 <do_option+0x68>
        LCD_voidwriteString((u8 *)"Auto Light 1,Man 2");
    43a8:	8c eb       	ldi	r24, 0xBC	; 188
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
    }

    LCD_voidSetCursorLocation(1, 0);
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	60 e0       	ldi	r22, 0x00	; 0
    43b4:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <LCD_voidSetCursorLocation>
    LCD_voidwriteString((u8 *)"Enter: ");
    43b8:	82 ea       	ldi	r24, 0xA2	; 162
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
    43c0:	fe 01       	movw	r30, r28
    43c2:	ef 5a       	subi	r30, 0xAF	; 175
    43c4:	ff 4f       	sbci	r31, 0xFF	; 255
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	aa e7       	ldi	r26, 0x7A	; 122
    43cc:	b4 e4       	ldi	r27, 0x44	; 68
    43ce:	80 83       	st	Z, r24
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	a2 83       	std	Z+2, r26	; 0x02
    43d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d6:	8e 01       	movw	r16, r28
    43d8:	03 5b       	subi	r16, 0xB3	; 179
    43da:	1f 4f       	sbci	r17, 0xFF	; 255
    43dc:	fe 01       	movw	r30, r28
    43de:	ef 5a       	subi	r30, 0xAF	; 175
    43e0:	ff 4f       	sbci	r31, 0xFF	; 255
    43e2:	60 81       	ld	r22, Z
    43e4:	71 81       	ldd	r23, Z+1	; 0x01
    43e6:	82 81       	ldd	r24, Z+2	; 0x02
    43e8:	93 81       	ldd	r25, Z+3	; 0x03
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	4a ef       	ldi	r20, 0xFA	; 250
    43f0:	54 e4       	ldi	r21, 0x44	; 68
    43f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f6:	dc 01       	movw	r26, r24
    43f8:	cb 01       	movw	r24, r22
    43fa:	f8 01       	movw	r30, r16
    43fc:	80 83       	st	Z, r24
    43fe:	91 83       	std	Z+1, r25	; 0x01
    4400:	a2 83       	std	Z+2, r26	; 0x02
    4402:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4404:	fe 01       	movw	r30, r28
    4406:	e3 5b       	subi	r30, 0xB3	; 179
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	60 81       	ld	r22, Z
    440c:	71 81       	ldd	r23, Z+1	; 0x01
    440e:	82 81       	ldd	r24, Z+2	; 0x02
    4410:	93 81       	ldd	r25, Z+3	; 0x03
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e8       	ldi	r20, 0x80	; 128
    4418:	5f e3       	ldi	r21, 0x3F	; 63
    441a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    441e:	88 23       	and	r24, r24
    4420:	44 f4       	brge	.+16     	; 0x4432 <do_option+0xea>
		__ticks = 1;
    4422:	fe 01       	movw	r30, r28
    4424:	e5 5b       	subi	r30, 0xB5	; 181
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	91 83       	std	Z+1, r25	; 0x01
    442e:	80 83       	st	Z, r24
    4430:	64 c0       	rjmp	.+200    	; 0x44fa <do_option+0x1b2>
	else if (__tmp > 65535)
    4432:	fe 01       	movw	r30, r28
    4434:	e3 5b       	subi	r30, 0xB3	; 179
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	60 81       	ld	r22, Z
    443a:	71 81       	ldd	r23, Z+1	; 0x01
    443c:	82 81       	ldd	r24, Z+2	; 0x02
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	3f ef       	ldi	r19, 0xFF	; 255
    4444:	4f e7       	ldi	r20, 0x7F	; 127
    4446:	57 e4       	ldi	r21, 0x47	; 71
    4448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    444c:	18 16       	cp	r1, r24
    444e:	0c f0       	brlt	.+2      	; 0x4452 <do_option+0x10a>
    4450:	43 c0       	rjmp	.+134    	; 0x44d8 <do_option+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4452:	fe 01       	movw	r30, r28
    4454:	ef 5a       	subi	r30, 0xAF	; 175
    4456:	ff 4f       	sbci	r31, 0xFF	; 255
    4458:	60 81       	ld	r22, Z
    445a:	71 81       	ldd	r23, Z+1	; 0x01
    445c:	82 81       	ldd	r24, Z+2	; 0x02
    445e:	93 81       	ldd	r25, Z+3	; 0x03
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	40 e2       	ldi	r20, 0x20	; 32
    4466:	51 e4       	ldi	r21, 0x41	; 65
    4468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	8e 01       	movw	r16, r28
    4472:	05 5b       	subi	r16, 0xB5	; 181
    4474:	1f 4f       	sbci	r17, 0xFF	; 255
    4476:	bc 01       	movw	r22, r24
    4478:	cd 01       	movw	r24, r26
    447a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	f8 01       	movw	r30, r16
    4484:	91 83       	std	Z+1, r25	; 0x01
    4486:	80 83       	st	Z, r24
    4488:	1f c0       	rjmp	.+62     	; 0x44c8 <do_option+0x180>
    448a:	fe 01       	movw	r30, r28
    448c:	e7 5b       	subi	r30, 0xB7	; 183
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	88 ec       	ldi	r24, 0xC8	; 200
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
    4498:	fe 01       	movw	r30, r28
    449a:	e7 5b       	subi	r30, 0xB7	; 183
    449c:	ff 4f       	sbci	r31, 0xFF	; 255
    449e:	80 81       	ld	r24, Z
    44a0:	91 81       	ldd	r25, Z+1	; 0x01
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	f1 f7       	brne	.-4      	; 0x44a2 <do_option+0x15a>
    44a6:	fe 01       	movw	r30, r28
    44a8:	e7 5b       	subi	r30, 0xB7	; 183
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	91 83       	std	Z+1, r25	; 0x01
    44ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b0:	de 01       	movw	r26, r28
    44b2:	a5 5b       	subi	r26, 0xB5	; 181
    44b4:	bf 4f       	sbci	r27, 0xFF	; 255
    44b6:	fe 01       	movw	r30, r28
    44b8:	e5 5b       	subi	r30, 0xB5	; 181
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	11 96       	adiw	r26, 0x01	; 1
    44c4:	9c 93       	st	X, r25
    44c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c8:	fe 01       	movw	r30, r28
    44ca:	e5 5b       	subi	r30, 0xB5	; 181
    44cc:	ff 4f       	sbci	r31, 0xFF	; 255
    44ce:	80 81       	ld	r24, Z
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	00 97       	sbiw	r24, 0x00	; 0
    44d4:	d1 f6       	brne	.-76     	; 0x448a <do_option+0x142>
    44d6:	dd c0       	rjmp	.+442    	; 0x4692 <do_option+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d8:	8e 01       	movw	r16, r28
    44da:	05 5b       	subi	r16, 0xB5	; 181
    44dc:	1f 4f       	sbci	r17, 0xFF	; 255
    44de:	fe 01       	movw	r30, r28
    44e0:	e3 5b       	subi	r30, 0xB3	; 179
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	f8 01       	movw	r30, r16
    44f6:	91 83       	std	Z+1, r25	; 0x01
    44f8:	80 83       	st	Z, r24
    44fa:	de 01       	movw	r26, r28
    44fc:	a9 5b       	subi	r26, 0xB9	; 185
    44fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4500:	fe 01       	movw	r30, r28
    4502:	e5 5b       	subi	r30, 0xB5	; 181
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	80 81       	ld	r24, Z
    4508:	91 81       	ldd	r25, Z+1	; 0x01
    450a:	11 96       	adiw	r26, 0x01	; 1
    450c:	9c 93       	st	X, r25
    450e:	8e 93       	st	-X, r24
    4510:	fe 01       	movw	r30, r28
    4512:	e9 5b       	subi	r30, 0xB9	; 185
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	80 81       	ld	r24, Z
    4518:	91 81       	ldd	r25, Z+1	; 0x01
    451a:	01 97       	sbiw	r24, 0x01	; 1
    451c:	f1 f7       	brne	.-4      	; 0x451a <do_option+0x1d2>
    451e:	fe 01       	movw	r30, r28
    4520:	e9 5b       	subi	r30, 0xB9	; 185
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	80 83       	st	Z, r24
    4528:	b4 c0       	rjmp	.+360    	; 0x4692 <do_option+0x34a>
    _delay_ms(1000);

    // Mode selection loop
    while (entered_mode == 0) {
        mode_char = KEYPAD_u8Scan();
    452a:	0e 94 35 1c 	call	0x386a	; 0x386a <KEYPAD_u8Scan>
    452e:	fe 01       	movw	r30, r28
    4530:	ea 5a       	subi	r30, 0xAA	; 170
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	80 83       	st	Z, r24
        if (mode_char != '\0') {
    4536:	fe 01       	movw	r30, r28
    4538:	ea 5a       	subi	r30, 0xAA	; 170
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	80 81       	ld	r24, Z
    453e:	88 23       	and	r24, r24
    4540:	09 f4       	brne	.+2      	; 0x4544 <do_option+0x1fc>
    4542:	a7 c0       	rjmp	.+334    	; 0x4692 <do_option+0x34a>
            LCD_voidSendData(mode_char);
    4544:	fe 01       	movw	r30, r28
    4546:	ea 5a       	subi	r30, 0xAA	; 170
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	80 81       	ld	r24, Z
    454c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_voidSendData>
            mode_char = mode_char - '0';
    4550:	de 01       	movw	r26, r28
    4552:	aa 5a       	subi	r26, 0xAA	; 170
    4554:	bf 4f       	sbci	r27, 0xFF	; 255
    4556:	fe 01       	movw	r30, r28
    4558:	ea 5a       	subi	r30, 0xAA	; 170
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	80 81       	ld	r24, Z
    455e:	80 53       	subi	r24, 0x30	; 48
    4560:	8c 93       	st	X, r24

            if (mode_char == 1 || mode_char == 2) {
    4562:	fe 01       	movw	r30, r28
    4564:	ea 5a       	subi	r30, 0xAA	; 170
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	80 81       	ld	r24, Z
    456a:	81 30       	cpi	r24, 0x01	; 1
    456c:	31 f0       	breq	.+12     	; 0x457a <do_option+0x232>
    456e:	fe 01       	movw	r30, r28
    4570:	ea 5a       	subi	r30, 0xAA	; 170
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	80 81       	ld	r24, Z
    4576:	82 30       	cpi	r24, 0x02	; 2
    4578:	39 f4       	brne	.+14     	; 0x4588 <do_option+0x240>
                entered_mode = mode_char;
    457a:	fe 01       	movw	r30, r28
    457c:	ea 5a       	subi	r30, 0xAA	; 170
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	80 81       	ld	r24, Z
    4582:	80 93 44 02 	sts	0x0244, r24
    4586:	8a c0       	rjmp	.+276    	; 0x469c <do_option+0x354>
                break;
    4588:	fe 01       	movw	r30, r28
    458a:	ed 5b       	subi	r30, 0xBD	; 189
    458c:	ff 4f       	sbci	r31, 0xFF	; 255
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	aa e7       	ldi	r26, 0x7A	; 122
    4594:	b4 e4       	ldi	r27, 0x44	; 68
    4596:	80 83       	st	Z, r24
    4598:	91 83       	std	Z+1, r25	; 0x01
    459a:	a2 83       	std	Z+2, r26	; 0x02
    459c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    459e:	8e 01       	movw	r16, r28
    45a0:	01 5c       	subi	r16, 0xC1	; 193
    45a2:	1f 4f       	sbci	r17, 0xFF	; 255
    45a4:	fe 01       	movw	r30, r28
    45a6:	ed 5b       	subi	r30, 0xBD	; 189
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	60 81       	ld	r22, Z
    45ac:	71 81       	ldd	r23, Z+1	; 0x01
    45ae:	82 81       	ldd	r24, Z+2	; 0x02
    45b0:	93 81       	ldd	r25, Z+3	; 0x03
    45b2:	20 e0       	ldi	r18, 0x00	; 0
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	4a ef       	ldi	r20, 0xFA	; 250
    45b8:	54 e4       	ldi	r21, 0x44	; 68
    45ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45be:	dc 01       	movw	r26, r24
    45c0:	cb 01       	movw	r24, r22
    45c2:	f8 01       	movw	r30, r16
    45c4:	80 83       	st	Z, r24
    45c6:	91 83       	std	Z+1, r25	; 0x01
    45c8:	a2 83       	std	Z+2, r26	; 0x02
    45ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45cc:	fe 01       	movw	r30, r28
    45ce:	ff 96       	adiw	r30, 0x3f	; 63
    45d0:	60 81       	ld	r22, Z
    45d2:	71 81       	ldd	r23, Z+1	; 0x01
    45d4:	82 81       	ldd	r24, Z+2	; 0x02
    45d6:	93 81       	ldd	r25, Z+3	; 0x03
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e8       	ldi	r20, 0x80	; 128
    45de:	5f e3       	ldi	r21, 0x3F	; 63
    45e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e4:	88 23       	and	r24, r24
    45e6:	2c f4       	brge	.+10     	; 0x45f2 <do_option+0x2aa>
		__ticks = 1;
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	9e af       	std	Y+62, r25	; 0x3e
    45ee:	8d af       	std	Y+61, r24	; 0x3d
    45f0:	46 c0       	rjmp	.+140    	; 0x467e <do_option+0x336>
	else if (__tmp > 65535)
    45f2:	fe 01       	movw	r30, r28
    45f4:	ff 96       	adiw	r30, 0x3f	; 63
    45f6:	60 81       	ld	r22, Z
    45f8:	71 81       	ldd	r23, Z+1	; 0x01
    45fa:	82 81       	ldd	r24, Z+2	; 0x02
    45fc:	93 81       	ldd	r25, Z+3	; 0x03
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	3f ef       	ldi	r19, 0xFF	; 255
    4602:	4f e7       	ldi	r20, 0x7F	; 127
    4604:	57 e4       	ldi	r21, 0x47	; 71
    4606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    460a:	18 16       	cp	r1, r24
    460c:	64 f5       	brge	.+88     	; 0x4666 <do_option+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    460e:	fe 01       	movw	r30, r28
    4610:	ed 5b       	subi	r30, 0xBD	; 189
    4612:	ff 4f       	sbci	r31, 0xFF	; 255
    4614:	60 81       	ld	r22, Z
    4616:	71 81       	ldd	r23, Z+1	; 0x01
    4618:	82 81       	ldd	r24, Z+2	; 0x02
    461a:	93 81       	ldd	r25, Z+3	; 0x03
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	40 e2       	ldi	r20, 0x20	; 32
    4622:	51 e4       	ldi	r21, 0x41	; 65
    4624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	bc 01       	movw	r22, r24
    462e:	cd 01       	movw	r24, r26
    4630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	9e af       	std	Y+62, r25	; 0x3e
    463a:	8d af       	std	Y+61, r24	; 0x3d
    463c:	0f c0       	rjmp	.+30     	; 0x465c <do_option+0x314>
    463e:	88 ec       	ldi	r24, 0xC8	; 200
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	9c af       	std	Y+60, r25	; 0x3c
    4644:	8b af       	std	Y+59, r24	; 0x3b
    4646:	8b ad       	ldd	r24, Y+59	; 0x3b
    4648:	9c ad       	ldd	r25, Y+60	; 0x3c
    464a:	01 97       	sbiw	r24, 0x01	; 1
    464c:	f1 f7       	brne	.-4      	; 0x464a <do_option+0x302>
    464e:	9c af       	std	Y+60, r25	; 0x3c
    4650:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4652:	8d ad       	ldd	r24, Y+61	; 0x3d
    4654:	9e ad       	ldd	r25, Y+62	; 0x3e
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	9e af       	std	Y+62, r25	; 0x3e
    465a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    465c:	8d ad       	ldd	r24, Y+61	; 0x3d
    465e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4660:	00 97       	sbiw	r24, 0x00	; 0
    4662:	69 f7       	brne	.-38     	; 0x463e <do_option+0x2f6>
    4664:	16 c0       	rjmp	.+44     	; 0x4692 <do_option+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4666:	fe 01       	movw	r30, r28
    4668:	ff 96       	adiw	r30, 0x3f	; 63
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	9e af       	std	Y+62, r25	; 0x3e
    467c:	8d af       	std	Y+61, r24	; 0x3d
    467e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4680:	9e ad       	ldd	r25, Y+62	; 0x3e
    4682:	9a af       	std	Y+58, r25	; 0x3a
    4684:	89 af       	std	Y+57, r24	; 0x39
    4686:	89 ad       	ldd	r24, Y+57	; 0x39
    4688:	9a ad       	ldd	r25, Y+58	; 0x3a
    468a:	01 97       	sbiw	r24, 0x01	; 1
    468c:	f1 f7       	brne	.-4      	; 0x468a <do_option+0x342>
    468e:	9a af       	std	Y+58, r25	; 0x3a
    4690:	89 af       	std	Y+57, r24	; 0x39
    LCD_voidSetCursorLocation(1, 0);
    LCD_voidwriteString((u8 *)"Enter: ");
    _delay_ms(1000);

    // Mode selection loop
    while (entered_mode == 0) {
    4692:	80 91 44 02 	lds	r24, 0x0244
    4696:	88 23       	and	r24, r24
    4698:	09 f4       	brne	.+2      	; 0x469c <do_option+0x354>
    469a:	47 cf       	rjmp	.-370    	; 0x452a <do_option+0x1e2>
            _delay_ms(1000);
        }
    }

    // UART transmission based on selected option and mode
    LCD_voidClearDisplay();
    469c:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_voidClearDisplay>
    LCD_voidwriteString((u8 *)"Sending Data...");
    46a0:	8f ec       	ldi	r24, 0xCF	; 207
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	aa ef       	ldi	r26, 0xFA	; 250
    46ae:	b3 e4       	ldi	r27, 0x43	; 67
    46b0:	8d ab       	std	Y+53, r24	; 0x35
    46b2:	9e ab       	std	Y+54, r25	; 0x36
    46b4:	af ab       	std	Y+55, r26	; 0x37
    46b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46b8:	6d a9       	ldd	r22, Y+53	; 0x35
    46ba:	7e a9       	ldd	r23, Y+54	; 0x36
    46bc:	8f a9       	ldd	r24, Y+55	; 0x37
    46be:	98 ad       	ldd	r25, Y+56	; 0x38
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	4a ef       	ldi	r20, 0xFA	; 250
    46c6:	54 e4       	ldi	r21, 0x44	; 68
    46c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46cc:	dc 01       	movw	r26, r24
    46ce:	cb 01       	movw	r24, r22
    46d0:	89 ab       	std	Y+49, r24	; 0x31
    46d2:	9a ab       	std	Y+50, r25	; 0x32
    46d4:	ab ab       	std	Y+51, r26	; 0x33
    46d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46d8:	69 a9       	ldd	r22, Y+49	; 0x31
    46da:	7a a9       	ldd	r23, Y+50	; 0x32
    46dc:	8b a9       	ldd	r24, Y+51	; 0x33
    46de:	9c a9       	ldd	r25, Y+52	; 0x34
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	40 e8       	ldi	r20, 0x80	; 128
    46e6:	5f e3       	ldi	r21, 0x3F	; 63
    46e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46ec:	88 23       	and	r24, r24
    46ee:	2c f4       	brge	.+10     	; 0x46fa <do_option+0x3b2>
		__ticks = 1;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	98 ab       	std	Y+48, r25	; 0x30
    46f6:	8f a7       	std	Y+47, r24	; 0x2f
    46f8:	3f c0       	rjmp	.+126    	; 0x4778 <do_option+0x430>
	else if (__tmp > 65535)
    46fa:	69 a9       	ldd	r22, Y+49	; 0x31
    46fc:	7a a9       	ldd	r23, Y+50	; 0x32
    46fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4700:	9c a9       	ldd	r25, Y+52	; 0x34
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	3f ef       	ldi	r19, 0xFF	; 255
    4706:	4f e7       	ldi	r20, 0x7F	; 127
    4708:	57 e4       	ldi	r21, 0x47	; 71
    470a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    470e:	18 16       	cp	r1, r24
    4710:	4c f5       	brge	.+82     	; 0x4764 <do_option+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4712:	6d a9       	ldd	r22, Y+53	; 0x35
    4714:	7e a9       	ldd	r23, Y+54	; 0x36
    4716:	8f a9       	ldd	r24, Y+55	; 0x37
    4718:	98 ad       	ldd	r25, Y+56	; 0x38
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	40 e2       	ldi	r20, 0x20	; 32
    4720:	51 e4       	ldi	r21, 0x41	; 65
    4722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4726:	dc 01       	movw	r26, r24
    4728:	cb 01       	movw	r24, r22
    472a:	bc 01       	movw	r22, r24
    472c:	cd 01       	movw	r24, r26
    472e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	98 ab       	std	Y+48, r25	; 0x30
    4738:	8f a7       	std	Y+47, r24	; 0x2f
    473a:	0f c0       	rjmp	.+30     	; 0x475a <do_option+0x412>
    473c:	88 ec       	ldi	r24, 0xC8	; 200
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	9e a7       	std	Y+46, r25	; 0x2e
    4742:	8d a7       	std	Y+45, r24	; 0x2d
    4744:	8d a5       	ldd	r24, Y+45	; 0x2d
    4746:	9e a5       	ldd	r25, Y+46	; 0x2e
    4748:	01 97       	sbiw	r24, 0x01	; 1
    474a:	f1 f7       	brne	.-4      	; 0x4748 <do_option+0x400>
    474c:	9e a7       	std	Y+46, r25	; 0x2e
    474e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4750:	8f a5       	ldd	r24, Y+47	; 0x2f
    4752:	98 a9       	ldd	r25, Y+48	; 0x30
    4754:	01 97       	sbiw	r24, 0x01	; 1
    4756:	98 ab       	std	Y+48, r25	; 0x30
    4758:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    475a:	8f a5       	ldd	r24, Y+47	; 0x2f
    475c:	98 a9       	ldd	r25, Y+48	; 0x30
    475e:	00 97       	sbiw	r24, 0x00	; 0
    4760:	69 f7       	brne	.-38     	; 0x473c <do_option+0x3f4>
    4762:	14 c0       	rjmp	.+40     	; 0x478c <do_option+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4764:	69 a9       	ldd	r22, Y+49	; 0x31
    4766:	7a a9       	ldd	r23, Y+50	; 0x32
    4768:	8b a9       	ldd	r24, Y+51	; 0x33
    476a:	9c a9       	ldd	r25, Y+52	; 0x34
    476c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	98 ab       	std	Y+48, r25	; 0x30
    4776:	8f a7       	std	Y+47, r24	; 0x2f
    4778:	8f a5       	ldd	r24, Y+47	; 0x2f
    477a:	98 a9       	ldd	r25, Y+48	; 0x30
    477c:	9c a7       	std	Y+44, r25	; 0x2c
    477e:	8b a7       	std	Y+43, r24	; 0x2b
    4780:	8b a5       	ldd	r24, Y+43	; 0x2b
    4782:	9c a5       	ldd	r25, Y+44	; 0x2c
    4784:	01 97       	sbiw	r24, 0x01	; 1
    4786:	f1 f7       	brne	.-4      	; 0x4784 <do_option+0x43c>
    4788:	9c a7       	std	Y+44, r25	; 0x2c
    478a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);

    if (selected_option == '1') {
    478c:	fe 01       	movw	r30, r28
    478e:	eb 5a       	subi	r30, 0xAB	; 171
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	80 81       	ld	r24, Z
    4794:	81 33       	cpi	r24, 0x31	; 49
    4796:	21 f4       	brne	.+8      	; 0x47a0 <do_option+0x458>
    	send_char('T');  // Temperature option
    4798:	84 e5       	ldi	r24, 0x54	; 84
    479a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <send_char>
    479e:	09 c0       	rjmp	.+18     	; 0x47b2 <do_option+0x46a>
    } else if (selected_option == '2') {
    47a0:	fe 01       	movw	r30, r28
    47a2:	eb 5a       	subi	r30, 0xAB	; 171
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	80 81       	ld	r24, Z
    47a8:	82 33       	cpi	r24, 0x32	; 50
    47aa:	19 f4       	brne	.+6      	; 0x47b2 <do_option+0x46a>
    	send_char('L');  // Light option
    47ac:	8c e4       	ldi	r24, 0x4C	; 76
    47ae:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <send_char>
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	aa e7       	ldi	r26, 0x7A	; 122
    47b8:	b4 e4       	ldi	r27, 0x44	; 68
    47ba:	8f a3       	std	Y+39, r24	; 0x27
    47bc:	98 a7       	std	Y+40, r25	; 0x28
    47be:	a9 a7       	std	Y+41, r26	; 0x29
    47c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c2:	6f a1       	ldd	r22, Y+39	; 0x27
    47c4:	78 a5       	ldd	r23, Y+40	; 0x28
    47c6:	89 a5       	ldd	r24, Y+41	; 0x29
    47c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	4a ef       	ldi	r20, 0xFA	; 250
    47d0:	54 e4       	ldi	r21, 0x44	; 68
    47d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	8b a3       	std	Y+35, r24	; 0x23
    47dc:	9c a3       	std	Y+36, r25	; 0x24
    47de:	ad a3       	std	Y+37, r26	; 0x25
    47e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47e2:	6b a1       	ldd	r22, Y+35	; 0x23
    47e4:	7c a1       	ldd	r23, Y+36	; 0x24
    47e6:	8d a1       	ldd	r24, Y+37	; 0x25
    47e8:	9e a1       	ldd	r25, Y+38	; 0x26
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	40 e8       	ldi	r20, 0x80	; 128
    47f0:	5f e3       	ldi	r21, 0x3F	; 63
    47f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47f6:	88 23       	and	r24, r24
    47f8:	2c f4       	brge	.+10     	; 0x4804 <do_option+0x4bc>
		__ticks = 1;
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	9a a3       	std	Y+34, r25	; 0x22
    4800:	89 a3       	std	Y+33, r24	; 0x21
    4802:	3f c0       	rjmp	.+126    	; 0x4882 <do_option+0x53a>
	else if (__tmp > 65535)
    4804:	6b a1       	ldd	r22, Y+35	; 0x23
    4806:	7c a1       	ldd	r23, Y+36	; 0x24
    4808:	8d a1       	ldd	r24, Y+37	; 0x25
    480a:	9e a1       	ldd	r25, Y+38	; 0x26
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	3f ef       	ldi	r19, 0xFF	; 255
    4810:	4f e7       	ldi	r20, 0x7F	; 127
    4812:	57 e4       	ldi	r21, 0x47	; 71
    4814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4818:	18 16       	cp	r1, r24
    481a:	4c f5       	brge	.+82     	; 0x486e <do_option+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    481c:	6f a1       	ldd	r22, Y+39	; 0x27
    481e:	78 a5       	ldd	r23, Y+40	; 0x28
    4820:	89 a5       	ldd	r24, Y+41	; 0x29
    4822:	9a a5       	ldd	r25, Y+42	; 0x2a
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e2       	ldi	r20, 0x20	; 32
    482a:	51 e4       	ldi	r21, 0x41	; 65
    482c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	bc 01       	movw	r22, r24
    4836:	cd 01       	movw	r24, r26
    4838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483c:	dc 01       	movw	r26, r24
    483e:	cb 01       	movw	r24, r22
    4840:	9a a3       	std	Y+34, r25	; 0x22
    4842:	89 a3       	std	Y+33, r24	; 0x21
    4844:	0f c0       	rjmp	.+30     	; 0x4864 <do_option+0x51c>
    4846:	88 ec       	ldi	r24, 0xC8	; 200
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	98 a3       	std	Y+32, r25	; 0x20
    484c:	8f 8f       	std	Y+31, r24	; 0x1f
    484e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4850:	98 a1       	ldd	r25, Y+32	; 0x20
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	f1 f7       	brne	.-4      	; 0x4852 <do_option+0x50a>
    4856:	98 a3       	std	Y+32, r25	; 0x20
    4858:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485a:	89 a1       	ldd	r24, Y+33	; 0x21
    485c:	9a a1       	ldd	r25, Y+34	; 0x22
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	9a a3       	std	Y+34, r25	; 0x22
    4862:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4864:	89 a1       	ldd	r24, Y+33	; 0x21
    4866:	9a a1       	ldd	r25, Y+34	; 0x22
    4868:	00 97       	sbiw	r24, 0x00	; 0
    486a:	69 f7       	brne	.-38     	; 0x4846 <do_option+0x4fe>
    486c:	14 c0       	rjmp	.+40     	; 0x4896 <do_option+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    486e:	6b a1       	ldd	r22, Y+35	; 0x23
    4870:	7c a1       	ldd	r23, Y+36	; 0x24
    4872:	8d a1       	ldd	r24, Y+37	; 0x25
    4874:	9e a1       	ldd	r25, Y+38	; 0x26
    4876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	9a a3       	std	Y+34, r25	; 0x22
    4880:	89 a3       	std	Y+33, r24	; 0x21
    4882:	89 a1       	ldd	r24, Y+33	; 0x21
    4884:	9a a1       	ldd	r25, Y+34	; 0x22
    4886:	9e 8f       	std	Y+30, r25	; 0x1e
    4888:	8d 8f       	std	Y+29, r24	; 0x1d
    488a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    488c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    488e:	01 97       	sbiw	r24, 0x01	; 1
    4890:	f1 f7       	brne	.-4      	; 0x488e <do_option+0x546>
    4892:	9e 8f       	std	Y+30, r25	; 0x1e
    4894:	8d 8f       	std	Y+29, r24	; 0x1d
    }

    _delay_ms(1000);

    if (entered_mode == 1) {
    4896:	80 91 44 02 	lds	r24, 0x0244
    489a:	81 30       	cpi	r24, 0x01	; 1
    489c:	21 f4       	brne	.+8      	; 0x48a6 <do_option+0x55e>
    	send_char('A');  // Auto mode
    489e:	81 e4       	ldi	r24, 0x41	; 65
    48a0:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <send_char>
    48a4:	07 c0       	rjmp	.+14     	; 0x48b4 <do_option+0x56c>
    } else if (entered_mode == 2) {
    48a6:	80 91 44 02 	lds	r24, 0x0244
    48aa:	82 30       	cpi	r24, 0x02	; 2
    48ac:	19 f4       	brne	.+6      	; 0x48b4 <do_option+0x56c>
    	send_char('M');  // Manual mode
    48ae:	8d e4       	ldi	r24, 0x4D	; 77
    48b0:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <send_char>
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	aa e7       	ldi	r26, 0x7A	; 122
    48ba:	b4 e4       	ldi	r27, 0x44	; 68
    48bc:	89 8f       	std	Y+25, r24	; 0x19
    48be:	9a 8f       	std	Y+26, r25	; 0x1a
    48c0:	ab 8f       	std	Y+27, r26	; 0x1b
    48c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48c4:	69 8d       	ldd	r22, Y+25	; 0x19
    48c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	4a ef       	ldi	r20, 0xFA	; 250
    48d2:	54 e4       	ldi	r21, 0x44	; 68
    48d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d8:	dc 01       	movw	r26, r24
    48da:	cb 01       	movw	r24, r22
    48dc:	8d 8b       	std	Y+21, r24	; 0x15
    48de:	9e 8b       	std	Y+22, r25	; 0x16
    48e0:	af 8b       	std	Y+23, r26	; 0x17
    48e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48e4:	6d 89       	ldd	r22, Y+21	; 0x15
    48e6:	7e 89       	ldd	r23, Y+22	; 0x16
    48e8:	8f 89       	ldd	r24, Y+23	; 0x17
    48ea:	98 8d       	ldd	r25, Y+24	; 0x18
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	40 e8       	ldi	r20, 0x80	; 128
    48f2:	5f e3       	ldi	r21, 0x3F	; 63
    48f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48f8:	88 23       	and	r24, r24
    48fa:	2c f4       	brge	.+10     	; 0x4906 <do_option+0x5be>
		__ticks = 1;
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	9c 8b       	std	Y+20, r25	; 0x14
    4902:	8b 8b       	std	Y+19, r24	; 0x13
    4904:	3f c0       	rjmp	.+126    	; 0x4984 <do_option+0x63c>
	else if (__tmp > 65535)
    4906:	6d 89       	ldd	r22, Y+21	; 0x15
    4908:	7e 89       	ldd	r23, Y+22	; 0x16
    490a:	8f 89       	ldd	r24, Y+23	; 0x17
    490c:	98 8d       	ldd	r25, Y+24	; 0x18
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	3f ef       	ldi	r19, 0xFF	; 255
    4912:	4f e7       	ldi	r20, 0x7F	; 127
    4914:	57 e4       	ldi	r21, 0x47	; 71
    4916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    491a:	18 16       	cp	r1, r24
    491c:	4c f5       	brge	.+82     	; 0x4970 <do_option+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    491e:	69 8d       	ldd	r22, Y+25	; 0x19
    4920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e2       	ldi	r20, 0x20	; 32
    492c:	51 e4       	ldi	r21, 0x41	; 65
    492e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	bc 01       	movw	r22, r24
    4938:	cd 01       	movw	r24, r26
    493a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	9c 8b       	std	Y+20, r25	; 0x14
    4944:	8b 8b       	std	Y+19, r24	; 0x13
    4946:	0f c0       	rjmp	.+30     	; 0x4966 <do_option+0x61e>
    4948:	88 ec       	ldi	r24, 0xC8	; 200
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	9a 8b       	std	Y+18, r25	; 0x12
    494e:	89 8b       	std	Y+17, r24	; 0x11
    4950:	89 89       	ldd	r24, Y+17	; 0x11
    4952:	9a 89       	ldd	r25, Y+18	; 0x12
    4954:	01 97       	sbiw	r24, 0x01	; 1
    4956:	f1 f7       	brne	.-4      	; 0x4954 <do_option+0x60c>
    4958:	9a 8b       	std	Y+18, r25	; 0x12
    495a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    495c:	8b 89       	ldd	r24, Y+19	; 0x13
    495e:	9c 89       	ldd	r25, Y+20	; 0x14
    4960:	01 97       	sbiw	r24, 0x01	; 1
    4962:	9c 8b       	std	Y+20, r25	; 0x14
    4964:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4966:	8b 89       	ldd	r24, Y+19	; 0x13
    4968:	9c 89       	ldd	r25, Y+20	; 0x14
    496a:	00 97       	sbiw	r24, 0x00	; 0
    496c:	69 f7       	brne	.-38     	; 0x4948 <do_option+0x600>
    496e:	14 c0       	rjmp	.+40     	; 0x4998 <do_option+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4970:	6d 89       	ldd	r22, Y+21	; 0x15
    4972:	7e 89       	ldd	r23, Y+22	; 0x16
    4974:	8f 89       	ldd	r24, Y+23	; 0x17
    4976:	98 8d       	ldd	r25, Y+24	; 0x18
    4978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	9c 8b       	std	Y+20, r25	; 0x14
    4982:	8b 8b       	std	Y+19, r24	; 0x13
    4984:	8b 89       	ldd	r24, Y+19	; 0x13
    4986:	9c 89       	ldd	r25, Y+20	; 0x14
    4988:	98 8b       	std	Y+16, r25	; 0x10
    498a:	8f 87       	std	Y+15, r24	; 0x0f
    498c:	8f 85       	ldd	r24, Y+15	; 0x0f
    498e:	98 89       	ldd	r25, Y+16	; 0x10
    4990:	01 97       	sbiw	r24, 0x01	; 1
    4992:	f1 f7       	brne	.-4      	; 0x4990 <do_option+0x648>
    4994:	98 8b       	std	Y+16, r25	; 0x10
    4996:	8f 87       	std	Y+15, r24	; 0x0f
    }

    _delay_ms(1000);
    LCD_voidClearDisplay();
    4998:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_voidClearDisplay>
    LCD_voidwriteString((u8 *)"Data Sent!");
    499c:	8f ed       	ldi	r24, 0xDF	; 223
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_voidwriteString>
    49a4:	80 e0       	ldi	r24, 0x00	; 0
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	aa e7       	ldi	r26, 0x7A	; 122
    49aa:	b4 e4       	ldi	r27, 0x44	; 68
    49ac:	8b 87       	std	Y+11, r24	; 0x0b
    49ae:	9c 87       	std	Y+12, r25	; 0x0c
    49b0:	ad 87       	std	Y+13, r26	; 0x0d
    49b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    49b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    49b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	4a ef       	ldi	r20, 0xFA	; 250
    49c2:	54 e4       	ldi	r21, 0x44	; 68
    49c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	8f 83       	std	Y+7, r24	; 0x07
    49ce:	98 87       	std	Y+8, r25	; 0x08
    49d0:	a9 87       	std	Y+9, r26	; 0x09
    49d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49d4:	6f 81       	ldd	r22, Y+7	; 0x07
    49d6:	78 85       	ldd	r23, Y+8	; 0x08
    49d8:	89 85       	ldd	r24, Y+9	; 0x09
    49da:	9a 85       	ldd	r25, Y+10	; 0x0a
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	40 e8       	ldi	r20, 0x80	; 128
    49e2:	5f e3       	ldi	r21, 0x3F	; 63
    49e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49e8:	88 23       	and	r24, r24
    49ea:	2c f4       	brge	.+10     	; 0x49f6 <do_option+0x6ae>
		__ticks = 1;
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	9e 83       	std	Y+6, r25	; 0x06
    49f2:	8d 83       	std	Y+5, r24	; 0x05
    49f4:	3f c0       	rjmp	.+126    	; 0x4a74 <do_option+0x72c>
	else if (__tmp > 65535)
    49f6:	6f 81       	ldd	r22, Y+7	; 0x07
    49f8:	78 85       	ldd	r23, Y+8	; 0x08
    49fa:	89 85       	ldd	r24, Y+9	; 0x09
    49fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	3f ef       	ldi	r19, 0xFF	; 255
    4a02:	4f e7       	ldi	r20, 0x7F	; 127
    4a04:	57 e4       	ldi	r21, 0x47	; 71
    4a06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a0a:	18 16       	cp	r1, r24
    4a0c:	4c f5       	brge	.+82     	; 0x4a60 <do_option+0x718>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	40 e2       	ldi	r20, 0x20	; 32
    4a1c:	51 e4       	ldi	r21, 0x41	; 65
    4a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	bc 01       	movw	r22, r24
    4a28:	cd 01       	movw	r24, r26
    4a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	9e 83       	std	Y+6, r25	; 0x06
    4a34:	8d 83       	std	Y+5, r24	; 0x05
    4a36:	0f c0       	rjmp	.+30     	; 0x4a56 <do_option+0x70e>
    4a38:	88 ec       	ldi	r24, 0xC8	; 200
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	9c 83       	std	Y+4, r25	; 0x04
    4a3e:	8b 83       	std	Y+3, r24	; 0x03
    4a40:	8b 81       	ldd	r24, Y+3	; 0x03
    4a42:	9c 81       	ldd	r25, Y+4	; 0x04
    4a44:	01 97       	sbiw	r24, 0x01	; 1
    4a46:	f1 f7       	brne	.-4      	; 0x4a44 <do_option+0x6fc>
    4a48:	9c 83       	std	Y+4, r25	; 0x04
    4a4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	9e 83       	std	Y+6, r25	; 0x06
    4a54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a56:	8d 81       	ldd	r24, Y+5	; 0x05
    4a58:	9e 81       	ldd	r25, Y+6	; 0x06
    4a5a:	00 97       	sbiw	r24, 0x00	; 0
    4a5c:	69 f7       	brne	.-38     	; 0x4a38 <do_option+0x6f0>
    4a5e:	14 c0       	rjmp	.+40     	; 0x4a88 <do_option+0x740>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a60:	6f 81       	ldd	r22, Y+7	; 0x07
    4a62:	78 85       	ldd	r23, Y+8	; 0x08
    4a64:	89 85       	ldd	r24, Y+9	; 0x09
    4a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	9e 83       	std	Y+6, r25	; 0x06
    4a72:	8d 83       	std	Y+5, r24	; 0x05
    4a74:	8d 81       	ldd	r24, Y+5	; 0x05
    4a76:	9e 81       	ldd	r25, Y+6	; 0x06
    4a78:	9a 83       	std	Y+2, r25	; 0x02
    4a7a:	89 83       	std	Y+1, r24	; 0x01
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
    4a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a80:	01 97       	sbiw	r24, 0x01	; 1
    4a82:	f1 f7       	brne	.-4      	; 0x4a80 <do_option+0x738>
    4a84:	9a 83       	std	Y+2, r25	; 0x02
    4a86:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    entered_mode = 0;  // Reset for the next operation
    4a88:	10 92 44 02 	sts	0x0244, r1
}
    4a8c:	c9 5a       	subi	r28, 0xA9	; 169
    4a8e:	df 4f       	sbci	r29, 0xFF	; 255
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	0f be       	out	0x3f, r0	; 63
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	cf 91       	pop	r28
    4a9c:	df 91       	pop	r29
    4a9e:	1f 91       	pop	r17
    4aa0:	0f 91       	pop	r16
    4aa2:	08 95       	ret

00004aa4 <__mulsi3>:
    4aa4:	62 9f       	mul	r22, r18
    4aa6:	d0 01       	movw	r26, r0
    4aa8:	73 9f       	mul	r23, r19
    4aaa:	f0 01       	movw	r30, r0
    4aac:	82 9f       	mul	r24, r18
    4aae:	e0 0d       	add	r30, r0
    4ab0:	f1 1d       	adc	r31, r1
    4ab2:	64 9f       	mul	r22, r20
    4ab4:	e0 0d       	add	r30, r0
    4ab6:	f1 1d       	adc	r31, r1
    4ab8:	92 9f       	mul	r25, r18
    4aba:	f0 0d       	add	r31, r0
    4abc:	83 9f       	mul	r24, r19
    4abe:	f0 0d       	add	r31, r0
    4ac0:	74 9f       	mul	r23, r20
    4ac2:	f0 0d       	add	r31, r0
    4ac4:	65 9f       	mul	r22, r21
    4ac6:	f0 0d       	add	r31, r0
    4ac8:	99 27       	eor	r25, r25
    4aca:	72 9f       	mul	r23, r18
    4acc:	b0 0d       	add	r27, r0
    4ace:	e1 1d       	adc	r30, r1
    4ad0:	f9 1f       	adc	r31, r25
    4ad2:	63 9f       	mul	r22, r19
    4ad4:	b0 0d       	add	r27, r0
    4ad6:	e1 1d       	adc	r30, r1
    4ad8:	f9 1f       	adc	r31, r25
    4ada:	bd 01       	movw	r22, r26
    4adc:	cf 01       	movw	r24, r30
    4ade:	11 24       	eor	r1, r1
    4ae0:	08 95       	ret

00004ae2 <__udivmodsi4>:
    4ae2:	a1 e2       	ldi	r26, 0x21	; 33
    4ae4:	1a 2e       	mov	r1, r26
    4ae6:	aa 1b       	sub	r26, r26
    4ae8:	bb 1b       	sub	r27, r27
    4aea:	fd 01       	movw	r30, r26
    4aec:	0d c0       	rjmp	.+26     	; 0x4b08 <__udivmodsi4_ep>

00004aee <__udivmodsi4_loop>:
    4aee:	aa 1f       	adc	r26, r26
    4af0:	bb 1f       	adc	r27, r27
    4af2:	ee 1f       	adc	r30, r30
    4af4:	ff 1f       	adc	r31, r31
    4af6:	a2 17       	cp	r26, r18
    4af8:	b3 07       	cpc	r27, r19
    4afa:	e4 07       	cpc	r30, r20
    4afc:	f5 07       	cpc	r31, r21
    4afe:	20 f0       	brcs	.+8      	; 0x4b08 <__udivmodsi4_ep>
    4b00:	a2 1b       	sub	r26, r18
    4b02:	b3 0b       	sbc	r27, r19
    4b04:	e4 0b       	sbc	r30, r20
    4b06:	f5 0b       	sbc	r31, r21

00004b08 <__udivmodsi4_ep>:
    4b08:	66 1f       	adc	r22, r22
    4b0a:	77 1f       	adc	r23, r23
    4b0c:	88 1f       	adc	r24, r24
    4b0e:	99 1f       	adc	r25, r25
    4b10:	1a 94       	dec	r1
    4b12:	69 f7       	brne	.-38     	; 0x4aee <__udivmodsi4_loop>
    4b14:	60 95       	com	r22
    4b16:	70 95       	com	r23
    4b18:	80 95       	com	r24
    4b1a:	90 95       	com	r25
    4b1c:	9b 01       	movw	r18, r22
    4b1e:	ac 01       	movw	r20, r24
    4b20:	bd 01       	movw	r22, r26
    4b22:	cf 01       	movw	r24, r30
    4b24:	08 95       	ret

00004b26 <__prologue_saves__>:
    4b26:	2f 92       	push	r2
    4b28:	3f 92       	push	r3
    4b2a:	4f 92       	push	r4
    4b2c:	5f 92       	push	r5
    4b2e:	6f 92       	push	r6
    4b30:	7f 92       	push	r7
    4b32:	8f 92       	push	r8
    4b34:	9f 92       	push	r9
    4b36:	af 92       	push	r10
    4b38:	bf 92       	push	r11
    4b3a:	cf 92       	push	r12
    4b3c:	df 92       	push	r13
    4b3e:	ef 92       	push	r14
    4b40:	ff 92       	push	r15
    4b42:	0f 93       	push	r16
    4b44:	1f 93       	push	r17
    4b46:	cf 93       	push	r28
    4b48:	df 93       	push	r29
    4b4a:	cd b7       	in	r28, 0x3d	; 61
    4b4c:	de b7       	in	r29, 0x3e	; 62
    4b4e:	ca 1b       	sub	r28, r26
    4b50:	db 0b       	sbc	r29, r27
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	f8 94       	cli
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	cd bf       	out	0x3d, r28	; 61
    4b5c:	09 94       	ijmp

00004b5e <__epilogue_restores__>:
    4b5e:	2a 88       	ldd	r2, Y+18	; 0x12
    4b60:	39 88       	ldd	r3, Y+17	; 0x11
    4b62:	48 88       	ldd	r4, Y+16	; 0x10
    4b64:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b66:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b68:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b70:	b9 84       	ldd	r11, Y+9	; 0x09
    4b72:	c8 84       	ldd	r12, Y+8	; 0x08
    4b74:	df 80       	ldd	r13, Y+7	; 0x07
    4b76:	ee 80       	ldd	r14, Y+6	; 0x06
    4b78:	fd 80       	ldd	r15, Y+5	; 0x05
    4b7a:	0c 81       	ldd	r16, Y+4	; 0x04
    4b7c:	1b 81       	ldd	r17, Y+3	; 0x03
    4b7e:	aa 81       	ldd	r26, Y+2	; 0x02
    4b80:	b9 81       	ldd	r27, Y+1	; 0x01
    4b82:	ce 0f       	add	r28, r30
    4b84:	d1 1d       	adc	r29, r1
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	f8 94       	cli
    4b8a:	de bf       	out	0x3e, r29	; 62
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	cd bf       	out	0x3d, r28	; 61
    4b90:	ed 01       	movw	r28, r26
    4b92:	08 95       	ret

00004b94 <_exit>:
    4b94:	f8 94       	cli

00004b96 <__stop_program>:
    4b96:	ff cf       	rjmp	.-2      	; 0x4b96 <__stop_program>
